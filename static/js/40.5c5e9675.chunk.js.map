{"version":3,"sources":["assets/commonAssets.js","components/table/EnhancedTableHead.js","components/table/tableStyles.js","components/table/tablesSortingFunctions.js","components/table/commonTable.js","components/ExportToExcelBtn.js","components/PrintArrayToPdfBtn.js","Routes/OutstandingBalances.js"],"names":["monthsInYear","eachMonthOfInterval","start","startOfYear","startOfToday","end","endOfYear","TITLES_LIST","GENDERS_LIST","EXPENSES_CATEGORIES","UNIT_TYPES","LEASE_OPTIONS","METER_TYPES","PAYMENT_FREQUENCY_OPTIONS","getContactTitles","getGendersList","getExpensesCategories","getUnitTypes","getPropertyBaths","baths","i","push","concat","getPropertyBeds","beds","getMeterTypes","getLeaseOptions","getPaymentOptions","getTransactionsFilterOptions","id","text","getLastMonthFromToDates","startOfMonth","subMonths","endOfMonth","getLastYearFromToDates","subYears","getYearToDateFromToDates","getCurrentMonthFromToDates","getLastThreeMonthsFromToDates","getMonthsInYear","currencyFormatter","Intl","NumberFormat","undefined","style","currency","EnhancedTableHead","props","classes","onSelectAllClick","order","orderBy","headCells","numSelected","rowCount","onRequestSort","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","checked","onChange","inputProps","map","headCell","key","align","numeric","disablePadding","sortDirection","TableSortLabel","active","direction","onClick","property","event","label","className","visuallyHidden","useStyles","makeStyles","theme","root","width","paper","marginBottom","spacing","table","minWidth","border","clip","height","margin","overflow","position","top","desc","a","b","withRouter","rows","selected","setSelected","deleteUrl","handleDelete","noEditCol","noDeleteCol","noDetailsCol","match","React","useState","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","Box","borderRadius","borderColor","TableContainer","Table","stickyHeader","aria-labelledby","size","aria-label","length","target","newSelecteds","n","TableBody","array","cmp","stabilizedThis","el","index","sort","stableSort","getSorting","slice","row","isItemSelected","indexOf","labelId","hover","role","aria-checked","tabIndex","stopPropagation","selectedIndex","newSelected","handleClick","tableCellIndex","tableCellData","component","scope","Tooltip","title","placement","IconButton","color","Link","to","url","fontSize","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","value","ExportStatementToExcelBtn","displayText","disabled","reportName","reportTitle","dataToPrint","type","variant","exportPropertyStatementDataToXSL","startIcon","ExportToExcelBtn","exportDataToXSL","PrintArrayToPdfBtn","printDataRows","PERIOD_FILTER_OPTIONS","TenantChargesStatementPage","properties","contacts","transactionsCharges","commonStyles","tenantChargesItems","setTenantChargesItems","filteredChargeItems","setFilteredChargeItems","chargeType","setChargeTypeFilter","periodFilter","setPeriodFilter","contactFilter","setContactFilter","propertyFilter","setPropertyFilter","CHARGE_TYPES","Array","from","Set","chargeItem","JSON","stringify","charge_label","charge_type","parse","useEffect","dateRange","startOfPeriod","endOfPeriod","chargesForCurrentMonth","filter","chargeItemDate","charge_date","Date","isWithinInterval","totalNumOfCharges","totalChargesAmount","reduce","total","currentValue","parseFloat","charge_amount","chargesWithPayments","charge","payed_status","totalPaymentsAmount","payed_amount","handleSearchFormSubmit","preventDefault","filteredStatements","property_id","tenant_id","pageTitle","container","justify","item","alignItems","tenantDetails","find","printInvoice","includes","sm","form","onSubmit","md","xs","fullWidth","select","name","filterOption","ref","options","getOptionSelected","option","defaultValue","newValue","getOptionLabel","tenant","first_name","last_name","renderInput","params","resetSearchForm","format","connect","state","transactions","contact","unitWithCharge","propertyUnits","unit_id","chargeDetails","tenant_name","tenant_id_number","id_number","unit_ref","chargePayments","payment","charge_id","payment_amount","balance","Object","assign","charge1","charge2"],"mappings":"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","file":"static/js/40.5c5e9675.chunk.js","sourcesContent":["import { endOfMonth, endOfYear, startOfToday, eachMonthOfInterval, startOfMonth, startOfYear, subMonths, subYears } from \"date-fns\";\n\nconst monthsInYear = eachMonthOfInterval({\n\tstart: startOfYear(startOfToday()),\n\tend: endOfYear(startOfToday()),\n})\n//general contact titles\nconst TITLES_LIST = [\"Mr\", \"Prof\", \"Hon\", \"Sir\", \"Mrs\", \"Miss\", \"Dr\", \"Madam\", \"Other\"]\nconst GENDERS_LIST = [\"Male\", \"Female\", \"Unspecified\"];\nconst EXPENSES_CATEGORIES = [\n\t'Security Deposit Refund',\n\t'Water Deposit Refund',\n\t'Management Fees',\n\t'Utilities',\n\t'Taxes',\n\t'Mortgage',\n\t'Office',\n\t'Maintenance & Cleaning',\n\t'Advertising',\n\t'Insurance',\n\t'Legal & Other Professional Fees',\n\t'Auto & Travel',\n\t'Supplies',\n\t'Other Refund',\n\t'Repairs',\n\t'Other'\n]\nconst PROPRERTY_TYPES = [\n\t\"Residential\",\n\t\"Condo/Townhouse\",\n\t\"Multi-family\",\n\t\"Single-family\",\n]\nconst UNIT_TYPES = [\n\t\"Bed Sitter\",\n\t\"One Bedroom\",\n\t\"Two Bedroom\",\n\t\"Single Room\",\n\t\"Double Room\",\n\t\"Shop\",\n\t\"Other\",\n];\nconst LEASE_OPTIONS = [\n\t\"Fixed\",\n\t\"Fixed w/rollover\",\n];\nconst METER_TYPES = [\"Electric\", \"Sewer\", \"Water\"];\nconst FREQUENCY_OPTIONS = [\"Per Day\", \"Week\", \"Month\", \"Quarter\", \"Half Year\", \"Year\"];\nconst PAYMENT_FREQUENCY_OPTIONS = [\"Daily\", \"Weekly\", \"Monthly\", \"Quarterly\", \"Half-Yearly\", \"Yearly\"];\n\n//functions to get the above values\nexport function getContactTitles() {\n\treturn TITLES_LIST;\n}\n\nexport function getGendersList() {\n\treturn GENDERS_LIST;\n}\n\nexport function getExpensesCategories() {\n\treturn EXPENSES_CATEGORIES;\n}\n\n//general property types\nexport function getPropertyTypes() {\n\treturn PROPRERTY_TYPES;\n}\n\n//general unit types\nexport function getUnitTypes() {\n\treturn UNIT_TYPES;\n}\n\nexport function getPropertyBaths() {\n\tconst baths = [];\n\tfor (let i = 1; i <= 5; i++) {\n\t\tbaths.push(i);\n\t}\n\treturn baths.concat(\"5+\");\n}\n\nexport function getPropertyBeds() {\n\tconst beds = [];\n\tfor (let i = 1; i <= 5; i++) {\n\t\tbeds.push(i);\n\t}\n\treturn beds;\n}\n\nexport function getFrequencyOptions() {\n\treturn FREQUENCY_OPTIONS;\n}\n\nexport function getMeterTypes() {\n\treturn METER_TYPES;\n}\n\nexport function getLeaseOptions() {\n\treturn LEASE_OPTIONS;\n}\n\nexport function getPaymentOptions() {\n\treturn PAYMENT_FREQUENCY_OPTIONS;\n}\n\nexport function getTransactionsFilterOptions() {\n\treturn [\n\t\t{ id: 'month-to-date', text: 'Month To Date' }, { id: 'last-month', text: 'Last Month' },\n\t\t{ id: '3-months-to-date', text: '3 Months To Date' }, { id: 'year-to-date', text: 'Year To Date' },\n\t\t{ id: 'last-year', text: 'Last Year' },];\n}\n\nexport function getLastMonthFromToDates() {\n\treturn [startOfMonth(subMonths(startOfToday(), 1)), endOfMonth(subMonths(startOfToday(), 1))]\n}\n\nexport function getLastYearFromToDates() {\n\treturn [startOfYear(subYears(startOfToday(), 1)), endOfYear(subYears(startOfToday(), 1))]\n}\n\nexport function getYearToDateFromToDates() {\n\treturn [startOfYear(startOfToday()), startOfToday()]\n}\n\nexport function getCurrentMonthFromToDates() {\n\treturn [startOfMonth(startOfToday()), endOfMonth(startOfToday())]\n}\n\nexport function getLastThreeMonthsFromToDates() {\n\treturn [startOfMonth(subMonths(startOfToday(), 2)), endOfMonth(startOfToday())]\n}\n\nexport function getMonthsInYear() {\n\treturn monthsInYear\n}\n\n// Create our number formatter.\nexport const currencyFormatter = new Intl.NumberFormat(undefined, {\n\tstyle: 'decimal',\n\tcurrency: 'KES',\n});\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\n\nfunction EnhancedTableHead(props) {\n    const {\n        classes,\n        onSelectAllClick,\n        order,\n        orderBy,\n        headCells,\n        numSelected,\n        rowCount,\n        onRequestSort,\n    } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={\n                            numSelected > 0 && numSelected < rowCount\n                        }\n                        checked={numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ \"aria-label\": \"select all\" }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? \"right\" : \"left\"}\n                        padding={headCell.disablePadding ? \"none\" : \"default\"}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={order}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === \"desc\"\n                                        ? \"sorted descending\"\n                                        : \"sorted ascending\"}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nexport default EnhancedTableHead;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nexport default useStyles;\n","\nfunction desc(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction stableSort(array, cmp) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = cmp(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nfunction getSorting(order, orderBy) {\n    return order === \"desc\"\n        ? (a, b) => desc(a, b, orderBy)\n        : (a, b) => -desc(a, b, orderBy);\n}\n\nexport { desc, stableSort, getSorting };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport TableBody from '@material-ui/core/TableBody';\nimport Table from '@material-ui/core/Table';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableCell from '@material-ui/core/TableCell';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DetailsIcon from \"@material-ui/icons/Details\";\nimport { withRouter } from \"react-router-dom\";\nimport EnhancedTableHead from \"./EnhancedTableHead\";\nimport useStyles from \"./tableStyles\";\nimport { stableSort, getSorting } from \"./tablesSortingFunctions\";\n\nfunction CommonTable(props) {\n    const {\n        rows,\n        headCells,\n        selected,\n        setSelected,\n        deleteUrl,\n        handleDelete,\n        noEditCol,\n        noDeleteCol,\n        noDetailsCol,\n    } = props;\n    const { match } = props;\n    const classes = useStyles();\n    const [order, setOrder] = React.useState(\"asc\");\n    const [orderBy, setOrderBy] = React.useState(\"Beds\");\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(50);\n\n    const handleRequestSort = (event, property) => {\n        const isDesc = orderBy === property && order === \"desc\";\n        setOrder(isDesc ? \"asc\" : \"desc\");\n        setOrderBy(property);\n    };\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.id);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, id) => {\n        event.stopPropagation();\n        const selectedIndex = selected.indexOf(id);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, id);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1)\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (id) => selected.indexOf(id) !== -1;\n\n    return (\n        <Box border={1} borderRadius=\"borderRadius\" borderColor=\"grey.400\">\n            <TableContainer>\n                <Table\n                    stickyHeader\n                    className={classes.table}\n                    aria-labelledby=\"tableTitle\"\n                    size={\"medium\"}\n                    aria-label=\"enhanced table\"\n                >\n                    <EnhancedTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        headCells={headCells}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getSorting(order, orderBy))\n                            .slice(\n                                page * rowsPerPage,\n                                page * rowsPerPage + rowsPerPage\n                            )\n                            .map((row, index) => {\n                                const isItemSelected = isSelected(row.id);\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        // onClick={() => {if(typeof tableRowOnClickHandler === 'function') tableRowOnClickHandler(row.id) }}\n                                        hover\n                                        role=\"checkbox\"\n                                        aria-checked={isItemSelected}\n                                        tabIndex={-1}\n                                        key={row.id}\n                                        selected={isItemSelected}\n                                    >\n                                        <TableCell padding=\"checkbox\">\n                                            <Checkbox\n                                                onClick={(event) =>\n                                                    handleClick(event, row.id)\n                                                }\n                                                checked={isItemSelected}\n                                                inputProps={{\n                                                    \"aria-labelledby\": labelId,\n                                                }}\n                                            />\n                                        </TableCell>\n                                        {headCells.map(\n                                            (headCell, tableCellIndex) => {\n                                                const tableCellData =\n                                                    row[headCell.id];\n                                                return (\n                                                    headCell.id === 'edit' ?\n                                                        (\n                                                            noEditCol ? null : (\n                                                                <TableCell\n                                                                    key={`edit${tableCellIndex}`}\n                                                                    component=\"th\"\n                                                                    scope=\"row\"\n                                                                    sortDirection={false}\n                                                                >\n                                                                    <Tooltip\n                                                                        title=\"Edit\"\n                                                                        placement=\"bottom\"\n                                                                    >\n                                                                        <IconButton\n                                                                            color=\"primary\"\n                                                                            size=\"small\"\n                                                                            component={Link}\n                                                                            to={`${match.url}/${row.id}/edit`}\n                                                                        >\n                                                                            <EditIcon fontSize=\"default\" />\n                                                                        </IconButton>\n                                                                    </Tooltip>\n                                                                </TableCell>\n                                                            )\n                                                        )\n                                                        : headCell.id === 'delete' ?\n                                                            (\n                                                                noDeleteCol ? null : (\n                                                                    <TableCell\n                                                                        key={`delete${tableCellIndex}`}\n                                                                        component=\"th\"\n                                                                        scope=\"row\"\n                                                                        sortDirection={false}\n                                                                    >\n                                                                        <Tooltip\n                                                                            title=\"Delete\"\n                                                                            placement=\"bottom\"\n                                                                        >\n                                                                            <IconButton\n                                                                                onClick={(event) => {\n                                                                                    handleDelete(\n                                                                                        row.id,\n                                                                                        deleteUrl\n                                                                                    );\n                                                                                }}\n                                                                                color=\"primary\"\n                                                                                size=\"small\"\n                                                                            >\n                                                                                <DeleteIcon fontSize=\"default\" />\n                                                                            </IconButton>\n                                                                        </Tooltip>\n                                                                    </TableCell>\n                                                                )\n                                                            )\n                                                            : headCell.id === 'details' ?\n                                                                (\n                                                                    !noDetailsCol ? null : (\n                                                                        <TableCell\n                                                                            key={`details${tableCellIndex}`}\n                                                                            component=\"th\"\n                                                                            scope=\"row\"\n                                                                            sortDirection={false}\n                                                                        >\n                                                                            <Tooltip\n                                                                                title=\"Details\"\n                                                                                placement=\"bottom\"\n                                                                            >\n                                                                                <IconButton\n                                                                                    color=\"primary\"\n                                                                                    size=\"small\"\n                                                                                    component={Link}\n                                                                                    to={`${match.url}/${row.id}/details`}\n                                                                                >\n                                                                                    <DetailsIcon fontSize=\"default\" />\n                                                                                </IconButton>\n                                                                            </Tooltip>\n                                                                        </TableCell>\n                                                                    )\n                                                                )\n                                                                :\n                                                                <TableCell\n                                                                    key={tableCellIndex}\n                                                                    component=\"th\"\n                                                                    id={labelId}\n                                                                    scope=\"row\"\n                                                                    padding=\"none\"\n                                                                >\n                                                                    {typeof tableCellData ===\n                                                                        \"boolean\"\n                                                                        ? tableCellData\n                                                                            ? \"Yes\"\n                                                                            : \"No\"\n                                                                        : tableCellData}\n                                                                </TableCell>\n                                                );\n                                            }\n                                        )}\n                                    </TableRow>\n                                );\n                            })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[50, 100, 200, 300]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </Box>\n    );\n}\n\nexport default withRouter(CommonTable);\n","import Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\nimport exportDataToXSL, { exportPropertyStatementDataToXSL } from \"../assets/PrintingHelper\";\nimport PropTypes from 'prop-types';\n\nfunction ExportToExcelBtn(props) {\n\tconst { disabled, reportName, reportTitle, headCells, dataToPrint } = props\n\treturn (\n\t\t<Button\n\t\t\ttype=\"button\"\n\t\t\taria-label=\"Export to Excel\"\n\t\t\tvariant=\"contained\"\n\t\t\tsize=\"medium\"\n\t\t\tcolor=\"primary\"\n\t\t\tdisabled={disabled}\n\t\t\tonClick={() => exportDataToXSL(reportName, reportTitle, headCells, dataToPrint, reportName)}\n\t\t\tstartIcon={<ImportExportIcon />}\n\t\t>\n\t\t\tExcel\n\t\t</Button >\n\t);\n}\n\nExportToExcelBtn.propTypes = {\n\treportName: PropTypes.string.isRequired,\n\treportTitle: PropTypes.string.isRequired,\n\theadCells: PropTypes.array.isRequired,\n\tdataToPrint: PropTypes.array.isRequired,\n}\n\nexport default ExportToExcelBtn;\n\nexport function ExportStatementToExcelBtn(props) {\n\tconst { displayText, disabled, reportName, reportTitle, headCells, dataToPrint } = props\n\treturn (\n\t\t<Button\n\t\t\ttype=\"button\"\n\t\t\taria-label=\"Export to Excel\"\n\t\t\tvariant=\"contained\"\n\t\t\tsize=\"medium\"\n\t\t\tcolor=\"primary\"\n\t\t\tdisabled={disabled}\n\t\t\tonClick={() => exportPropertyStatementDataToXSL(reportName, reportTitle, headCells, dataToPrint, reportName)}\n\t\t\tstartIcon={<ImportExportIcon />}\n\t\t>\n\t\t\t{ displayText ? displayText : \"Excel\"}\n\t\t</Button >\n\t);\n}\n\nExportStatementToExcelBtn.propTypes = {\n\treportName: PropTypes.string.isRequired,\n\treportTitle: PropTypes.string.isRequired,\n\theadCells: PropTypes.array.isRequired,\n\tdataToPrint: PropTypes.array.isRequired,\n}\n","import Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport { printDataRows } from \"../assets/PrintingHelper\";\nimport PropTypes from 'prop-types';\n\nfunction PrintArrayToPdfBtn (props) {\n    const { disabled, reportName, reportTitle, headCells, dataToPrint } = props\n    return (\n        <Button\n            type=\"button\"\n            aria-label=\"Print to Pdf\"\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"primary\"\n            disabled={disabled}\n            onClick={() => printDataRows(reportName, reportTitle, headCells, dataToPrint)}\n            startIcon={<PrintIcon />}\n        >\n            Pdf\n        </Button>\n    );\n}\n\nPrintArrayToPdfBtn.propTypes = {\n    reportName: PropTypes.string.isRequired,\n    reportTitle: PropTypes.string.isRequired,\n    headCells: PropTypes.array.isRequired,\n    dataToPrint: PropTypes.array.isRequired,\n}\n\nexport default PrintArrayToPdfBtn;\n","import React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/PrivateLayout\";\nimport PageHeading from \"../components/PageHeading\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport ExportToExcelBtn from \"../components/ExportToExcelBtn\";\nimport PrintArrayToPdf from \"../components/PrintArrayToPdfBtn\";\nimport CommonTable from \"../components/table/commonTable\";\nimport { commonStyles } from '../components/commonStyles'\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { currencyFormatter, getCurrentMonthFromToDates, getLastMonthFromToDates, getLastThreeMonthsFromToDates, getLastYearFromToDates, getTransactionsFilterOptions, getYearToDateFromToDates } from \"../assets/commonAssets\";\nimport { parse, isWithinInterval } from \"date-fns\";\nimport { printInvoice } from \"../assets/PrintingHelper\";\n\n\nconst PERIOD_FILTER_OPTIONS = getTransactionsFilterOptions()\n\nconst headCells = [\n    { id: \"tenant_name\", numeric: false, disablePadding: true, label: \"Tenant\", },\n    { id: \"tenant_id_number\", numeric: false, disablePadding: true, label: \"Tenant ID\", },\n    { id: \"unit_ref\", numeric: false, disablePadding: true, label: \"Unit Ref/Number\", },\n    { id: \"charge_label\", numeric: false, disablePadding: true, label: \"Charge Name/Type\", },\n    { id: \"charge_date\", numeric: false, disablePadding: true, label: \"Charge Date\", },\n    { id: \"charge_amount\", numeric: false, disablePadding: true, label: \"Charge Amount\", },\n    { id: \"payed_status\", numeric: false, disablePadding: true, label: \"Payments Made\" },\n    { id: \"payed_amount\", numeric: false, disablePadding: true, label: \"Total Amounts Paid\" },\n    { id: \"balance\", numeric: false, disablePadding: true, label: \"Balance\" },\n\n];\n\nlet TenantChargesStatementPage = ({\n    properties,\n    contacts,\n    transactionsCharges,\n}) => {\n    const classes = commonStyles()\n    let [tenantChargesItems, setTenantChargesItems] = useState([]);\n    let [filteredChargeItems, setFilteredChargeItems] = useState([]);\n    let [chargeType, setChargeTypeFilter] = useState(\"\");\n    let [periodFilter, setPeriodFilter] = useState('month-to-date');\n    let [contactFilter, setContactFilter] = useState(null);\n    let [propertyFilter, setPropertyFilter] = useState(\"all\");\n\n    const [selected, setSelected] = useState([]);\n\n    const CHARGE_TYPES = Array.from(new Set(tenantChargesItems\n        .map((chargeItem) => (JSON.stringify({ label: chargeItem.charge_label, value: chargeItem.charge_type })))))\n        .map(chargeType => JSON.parse(chargeType))\n\n    useEffect(() => {\n        const dateRange = getCurrentMonthFromToDates()\n        const startOfPeriod = dateRange[0]\n        const endOfPeriod = dateRange[1]\n        const chargesForCurrentMonth = transactionsCharges.filter((chargeItem) => {\n            const chargeItemDate = parse(chargeItem.charge_date, 'yyyy-MM-dd', new Date())\n            return isWithinInterval(chargeItemDate, { start: startOfPeriod, end: endOfPeriod })\n        })\n        setTenantChargesItems(chargesForCurrentMonth);\n        setFilteredChargeItems(chargesForCurrentMonth);\n    }, [transactionsCharges]);\n\n    const totalNumOfCharges = filteredChargeItems.length\n\n    const totalChargesAmount = filteredChargeItems\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.charge_amount) || 0\n        }, 0)\n\n    const chargesWithPayments = filteredChargeItems.filter(charge => charge.payed_status === true).length\n\n    const totalPaymentsAmount = filteredChargeItems\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.payed_amount) || 0\n        }, 0)\n\n    const handleSearchFormSubmit = (event) => {\n        event.preventDefault();\n        //filter the transactionsCharges according to the search criteria here\n        let filteredStatements = transactionsCharges\n        let dateRange = []\n        let startOfPeriod;\n        let endOfPeriod;\n        switch (periodFilter) {\n            case 'last-month':\n                dateRange = getLastMonthFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n                break;\n            case 'year-to-date':\n                dateRange = getYearToDateFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n                break;\n            case 'last-year':\n                dateRange = getLastYearFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n                break;\n            case 'month-to-date':\n                dateRange = getCurrentMonthFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n                break;\n            case '3-months-to-date':\n                dateRange = getLastThreeMonthsFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n                break;\n            default:\n                dateRange = getLastMonthFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n        }\n        filteredStatements = filteredStatements.filter((chargeItem) => {\n            const chargeItemDate = parse(chargeItem.charge_date, 'yyyy-MM-dd', new Date())\n            return isWithinInterval(chargeItemDate, { start: startOfPeriod, end: endOfPeriod })\n        })\n        filteredStatements = filteredStatements\n            .filter(({ charge_type }) => !chargeType ? true : charge_type === chargeType)\n            .filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter)\n            .filter(({ tenant_id }) => !contactFilter ? true : tenant_id === contactFilter.id)\n        setFilteredChargeItems(filteredStatements);\n    };\n\n\n    const resetSearchForm = (event) => {\n        event.preventDefault();\n        setFilteredChargeItems(tenantChargesItems);\n        setChargeTypeFilter(\"\");\n        setPeriodFilter(\"month-to-date\");\n        setContactFilter(null)\n        setPropertyFilter(\"all\")\n    };\n\n    return (\n        <Layout pageTitle=\"Outstanding Balances\">\n            <Grid\n                container\n                spacing={2}\n                justify=\"center\" direction=\"column\"\n            >\n                <Grid item key={2}>\n                    <PageHeading text={\"Outstanding Balances\"} />\n                </Grid>\n                <Grid\n                    container\n                    spacing={2}\n                    item\n                    alignItems=\"center\"\n                    direction=\"row\"\n                    key={1}\n                >\n                    <Grid item>\n                        <Button\n                            aria-label=\"Print Invoice\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            color=\"primary\"\n                            disabled={!contactFilter || !selected.length}\n                            onClick={() => {\n                                const tenantDetails = contacts.find(({ id }) => id === contactFilter.id)\n                                printInvoice(\n                                    tenantDetails,\n                                    tenantChargesItems.filter(({ id }) => selected.includes(id))\n                                )\n                            }}\n                            startIcon={<PrintIcon />}>\n                            Print Invoice\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <PrintArrayToPdf\n                            disabled={!selected.length}\n                            reportName={'Tenants Outstanding Balances Data'}\n                            reportTitle={`Tenants Outstanding Balances Records`}\n                            headCells={headCells}\n                            dataToPrint={tenantChargesItems.filter(({ id }) => selected.includes(id))}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <ExportToExcelBtn\n                            disabled={!selected.length}\n                            reportName={`Tenants Outstanding Balances Records`}\n                            reportTitle={'Tenants Outstanding Balances Data'}\n                            headCells={headCells}\n                            dataToPrint={tenantChargesItems.filter(({ id }) => selected.includes(id))}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item container>\n                    <Grid item sm={12}>\n                        <Box\n                            border={1}\n                            borderRadius=\"borderRadius\"\n                            borderColor=\"grey.400\"\n                        >\n                            <form\n                                className={classes.form}\n                                id=\"contactSearchForm\"\n                                onSubmit={handleSearchFormSubmit}\n                            >\n                                <Grid\n                                    container\n                                    spacing={2}\n                                    justify=\"center\"\n                                    direction=\"column\"\n                                >\n                                    <Grid item container direction=\"column\" spacing={2}>\n                                        <Grid item container direction=\"row\" spacing={2}>\n                                            <Grid item md={6} xs={12}>\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"outlined\"\n                                                    select\n                                                    id=\"period_filter\"\n                                                    name=\"period_filter\"\n                                                    label=\"Period\"\n                                                    value={periodFilter}\n                                                    onChange={(event) => {\n                                                        setPeriodFilter(\n                                                            event.target.value\n                                                        );\n                                                    }}\n                                                >\n                                                    {PERIOD_FILTER_OPTIONS.map((filterOption, index) => (\n                                                        <MenuItem\n                                                            key={index}\n                                                            value={filterOption.id}\n                                                        >\n                                                            {filterOption.text}\n                                                        </MenuItem>\n                                                    ))}\n                                                </TextField>\n                                            </Grid>\n                                            <Grid item md={6} xs={12}>\n                                                <TextField\n                                                    fullWidth\n                                                    select\n                                                    variant=\"outlined\"\n                                                    name=\"chargeType\"\n                                                    label=\"Charge Type\"\n                                                    id=\"chargeType\"\n                                                    onChange={(event) => {\n                                                        setChargeTypeFilter(\n                                                            event.target.value\n                                                        );\n                                                    }}\n                                                    value={chargeType}\n                                                >\n                                                    {CHARGE_TYPES.map(\n                                                        (charge_type, index) => (\n                                                            <MenuItem\n                                                                key={index}\n                                                                value={charge_type.value}\n                                                            >\n                                                                {charge_type.label}\n                                                            </MenuItem>\n                                                        )\n                                                    )}\n                                                </TextField>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item container direction=\"row\" spacing={2}>\n                                            <Grid item xs={12} md={6}>\n                                                <TextField\n                                                    fullWidth\n                                                    select\n                                                    variant=\"outlined\"\n                                                    name=\"property_filter\"\n                                                    label=\"Property\"\n                                                    id=\"property_filter\"\n                                                    onChange={(event) => {\n                                                        setPropertyFilter(\n                                                            event.target.value\n                                                        );\n                                                    }}\n                                                    value={propertyFilter}\n                                                >\n                                                    <MenuItem key={\"all\"} value={\"all\"}>All Properties</MenuItem>\n                                                    {properties.map(\n                                                        (property, index) => (\n                                                            <MenuItem\n                                                                key={index}\n                                                                value={property.id}\n                                                            >\n                                                                {property.ref}\n                                                            </MenuItem>\n                                                        )\n                                                    )}\n                                                </TextField>\n                                            </Grid>\n                                            <Grid item xs={12} md={6}>\n                                                <Autocomplete\n                                                    id=\"contact_filter\"\n                                                    options={contacts}\n                                                    getOptionSelected={(option, value) => option.id === value.id}\n                                                    name=\"contact_filter\"\n                                                    defaultValue=\"\"\n                                                    onChange={(event, newValue) => {\n                                                        setContactFilter(newValue);\n                                                    }}\n                                                    value={contactFilter}\n                                                    getOptionLabel={(tenant) => tenant ? `${tenant.first_name} ${tenant.last_name}` : ''}\n                                                    style={{ width: \"100%\" }}\n                                                    renderInput={(params) => <TextField {...params} label=\"Tenant\" variant=\"outlined\" />}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid\n                                        container\n                                        spacing={2}\n                                        item\n                                        justify=\"flex-end\"\n                                        alignItems=\"center\"\n                                        direction=\"row\"\n                                        key={1}\n                                    >\n                                        <Grid item>\n                                            <Button\n                                                onClick={(event) => handleSearchFormSubmit(event)}\n                                                type=\"submit\"\n                                                form=\"contactSearchForm\"\n                                                color=\"primary\"\n                                                variant=\"contained\"\n                                                size=\"medium\"\n                                                startIcon={<SearchIcon />}\n                                            >\n                                                SEARCH\n                                    </Button>\n                                        </Grid>\n                                        <Grid item>\n                                            <Button\n                                                onClick={(event) => resetSearchForm(event)}\n                                                type=\"reset\"\n                                                form=\"contactSearchForm\"\n                                                color=\"primary\"\n                                                variant=\"contained\"\n                                                size=\"medium\"\n                                                startIcon={<UndoIcon />}\n                                            >\n                                                RESET\n                                    </Button>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </form>\n                        </Box>\n                    </Grid>\n                </Grid>\n                <Grid item container>\n                    <Grid item sm={12}>\n                        <Box border={1} borderRadius=\"borderRadius\" borderColor=\"grey.400\" className={classes.form}>\n                            <Grid container direction=\"row\" spacing={1}>\n                                <Grid item container md={4}>\n                                    <Grid item sm={12}>\n                                        <Typography variant=\"subtitle1\" align=\"center\">\n                                            Total Charges: {currencyFormatter.format(totalChargesAmount)}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item sm={12}>\n                                        <Typography variant=\"subtitle1\" align=\"center\">\n                                            Total Charges: {totalNumOfCharges}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                                <Grid item container md={4}>\n                                    <Grid item sm={12}>\n                                        <Typography variant=\"subtitle1\" align=\"center\">\n                                            Total  Payments: {currencyFormatter.format(totalPaymentsAmount)}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item sm={12}>\n                                        <Typography variant=\"subtitle1\" align=\"center\">\n                                            Charges With Payments: {chargesWithPayments}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                                <Grid item container md={4}>\n                                    <Grid item sm={12}>\n                                        <Typography variant=\"subtitle1\" align=\"center\">\n                                            Outstanding Balances: {currencyFormatter.format((totalChargesAmount - totalPaymentsAmount))}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item sm={12}>\n                                        <Typography variant=\"subtitle1\" align=\"center\">\n                                            Charges Without Payments: {(totalNumOfCharges - chargesWithPayments)}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Grid>\n                </Grid>\n                <Grid item container>\n                    <Grid item sm={12}>\n                        <CommonTable\n                            selected={selected}\n                            setSelected={setSelected}\n                            rows={filteredChargeItems}\n                            headCells={headCells}\n                            noDetailsCol={true}\n                            noEditCol={true}\n                            noDeleteCol={true}\n                        />\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Layout >\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        transactions: state.transactions,\n        transactionsCharges: state.transactionsCharges\n            .map((charge) => {\n                const tenant = state.contacts.find((contact) => contact.id === charge.tenant_id) || {};\n                const unitWithCharge = state.propertyUnits.find(({ id }) => id === charge.unit_id) || {};\n                const chargeDetails = {}\n                chargeDetails.tenant_name = `${tenant.first_name} ${tenant.last_name}`\n                chargeDetails.tenant_id_number = tenant.id_number\n                chargeDetails.unit_ref = unitWithCharge.ref\n                //get payments with this charge id\n                const chargePayments = state.transactions.filter((payment) => payment.charge_id === charge.id)\n                chargeDetails.payed_status = chargePayments.length ? true : false;\n                const payed_amount = chargePayments.reduce((total, currentValue) => {\n                    return total + parseFloat(currentValue.payment_amount) || 0\n                }, 0)\n                chargeDetails.payed_amount = payed_amount\n                chargeDetails.balance = parseFloat(charge.charge_amount) - payed_amount\n                return Object.assign({}, charge, chargeDetails);\n            })\n            .filter((charge) => charge.balance > 0)\n            .sort((charge1, charge2) => parse(charge2.charge_date, 'yyyy-MM-dd', new Date()) -\n                parse(charge1.charge_date, 'yyyy-MM-dd', new Date())),\n        contacts: state.contacts,\n        properties: state.properties,\n    };\n};\n\nTenantChargesStatementPage = connect(mapStateToProps)(TenantChargesStatementPage);\n\nexport default withRouter(TenantChargesStatementPage);\n"],"sourceRoot":""}