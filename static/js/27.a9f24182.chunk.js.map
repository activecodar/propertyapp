{"version":3,"sources":["../node_modules/date-fns/esm/addMonths/index.js","assets/commonAssets.js","components/ExportToExcelBtn.js","../node_modules/@material-ui/icons/Undo.js","../node_modules/date-fns/esm/startOfMonth/index.js","../node_modules/date-fns/esm/subMonths/index.js","../node_modules/date-fns/esm/endOfMonth/index.js","../node_modules/date-fns/esm/addYears/index.js","../node_modules/date-fns/esm/subYears/index.js","../node_modules/date-fns/esm/isSameMonth/index.js","Routes/PropertyIncomeStatement.js"],"names":["addMonths","dirtyDate","dirtyAmount","requiredArgs","arguments","date","toDate","amount","toInteger","isNaN","Date","NaN","dayOfMonth","getDate","endOfDesiredMonth","getTime","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","monthsInYear","eachMonthOfInterval","start","startOfYear","startOfToday","end","endOfYear","TITLES_LIST","GENDERS_LIST","EXPENSES_CATEGORIES","UNIT_TYPES","LEASE_OPTIONS","METER_TYPES","PAYMENT_FREQUENCY_OPTIONS","getContactTitles","getGendersList","getExpensesCategories","getUnitTypes","getPropertyBaths","baths","i","push","concat","getPropertyBeds","beds","getMeterTypes","getLeaseOptions","getPaymentOptions","getTransactionsFilterOptions","id","text","getLastMonthFromToDates","startOfMonth","subMonths","endOfMonth","getLastYearFromToDates","subYears","getYearToDateFromToDates","getCurrentMonthFromToDates","getLastThreeMonthsFromToDates","getMonthsInYear","currencyFormatter","Intl","NumberFormat","undefined","style","currency","ExportStatementToExcelBtn","props","displayText","disabled","reportName","reportTitle","headCells","dataToPrint","type","aria-label","variant","size","color","onClick","exportPropertyStatementDataToXSL","startIcon","ExportToExcelBtn","exportDataToXSL","_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","setDate","setHours","month","addYears","isSameMonth","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight","TRANSACTIONS_FILTER_OPTIONS","PropertyIncomeStatement","transactions","expenses","leases","properties","classes","commonStyles","useState","expensesItems","setExpensesItems","leaseItems","setLeaseItems","paymentItems","setPaymentItems","netIncomeObject","setNetIncomeObject","incomeStatements","setIncomeStatements","setHeadCells","expensesStatements","setExpensesStatements","propertyFilter","setPropertyFilter","fromFilter","setFromFilter","useEffect","eachPastMonthDate","Array","keys","map","reverse","headCellsForMonths","monthDate","format","length","incomeMappedByMonth","rentalIncomeObject","income_type","totalIncomeObject","totalNetIncomeObject","totalRentalIncomeForPeriod","forEach","totalRentalIncomeForMonth","filter","payment_type","payment","paymentDate","parse","payment_date","reduce","total","currentTransaction","parseFloat","payment_amount","otherIncomeObject","totalOtherIncomeForPeriod","totalOtherIncome","incomeObject","headCell","incomeAmount","expensesMappedByMonth","totalExpensesObject","expense_type","expenseObjectsInMonth","expense","expenseDate","expense_date","monthExpense","expenseObject","Set","expenseType","expenseObjectByType","find","totalExpensesByTypeObject","expenseAmount","TOTAL_SECURITY_DEPOSIT_LIABILITY","currentValue","security_deposit","TOTAL_WATER_DEPOSIT_LIABILITY","water_deposit","handleSearchFormSubmit","event","preventDefault","filteredTransactions","property_id","filteredExpenses","filteredLeases","pageTitle","container","spacing","alignItems","item","key","direction","xs","border","borderRadius","borderColor","className","form","onSubmit","justify","md","fullWidth","select","name","label","onChange","target","property","index","ref","InputLabelProps","shrink","filterOption","resetSearchForm","sm","title","width","display","flexDirection","p","bgcolor","textAlign","flexGrow","incomeStatement","incomeIndex","otherColumns","expenseStatement","connect","state","ownProps","withRouter"],"mappings":"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","file":"static/js/27.a9f24182.chunk.js","sourcesContent":["import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * var result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 1, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import { endOfMonth, endOfYear, startOfToday, eachMonthOfInterval, startOfMonth, startOfYear, subMonths, subYears } from \"date-fns\";\n\nconst monthsInYear = eachMonthOfInterval({\n\tstart: startOfYear(startOfToday()),\n\tend: endOfYear(startOfToday()),\n})\n//general contact titles\nconst TITLES_LIST = [\"Mr\", \"Prof\", \"Hon\", \"Sir\", \"Mrs\", \"Miss\", \"Dr\", \"Madam\", \"Other\"]\nconst GENDERS_LIST = [\"Male\", \"Female\", \"Unspecified\"];\nconst EXPENSES_CATEGORIES = [\n\t'Security Deposit Refund',\n\t'Water Deposit Refund',\n\t'Management Fees',\n\t'Utilities',\n\t'Taxes',\n\t'Mortgage',\n\t'Office',\n\t'Maintenance & Cleaning',\n\t'Advertising',\n\t'Insurance',\n\t'Legal & Other Professional Fees',\n\t'Auto & Travel',\n\t'Supplies',\n\t'Other Refund',\n\t'Repairs',\n\t'Other'\n]\nconst PROPRERTY_TYPES = [\n\t\"Residential\",\n\t\"Condo/Townhouse\",\n\t\"Multi-family\",\n\t\"Single-family\",\n]\nconst UNIT_TYPES = [\n\t\"Bed Sitter\",\n\t\"One Bedroom\",\n\t\"Two Bedroom\",\n\t\"Single Room\",\n\t\"Double Room\",\n\t\"Shop\",\n\t\"Other\",\n];\nconst LEASE_OPTIONS = [\n\t\"Fixed\",\n\t\"Fixed w/rollover\",\n];\nconst METER_TYPES = [\"Electric\", \"Sewer\", \"Water\"];\nconst FREQUENCY_OPTIONS = [\"Per Day\", \"Week\", \"Month\", \"Quarter\", \"Half Year\", \"Year\"];\nconst PAYMENT_FREQUENCY_OPTIONS = [\"Daily\", \"Weekly\", \"Monthly\", \"Quarterly\", \"Half-Yearly\", \"Yearly\"];\n\n//functions to get the above values\nexport function getContactTitles() {\n\treturn TITLES_LIST;\n}\n\nexport function getGendersList() {\n\treturn GENDERS_LIST;\n}\n\nexport function getExpensesCategories() {\n\treturn EXPENSES_CATEGORIES;\n}\n\n//general property types\nexport function getPropertyTypes() {\n\treturn PROPRERTY_TYPES;\n}\n\n//general unit types\nexport function getUnitTypes() {\n\treturn UNIT_TYPES;\n}\n\nexport function getPropertyBaths() {\n\tconst baths = [];\n\tfor (let i = 1; i <= 5; i++) {\n\t\tbaths.push(i);\n\t}\n\treturn baths.concat(\"5+\");\n}\n\nexport function getPropertyBeds() {\n\tconst beds = [];\n\tfor (let i = 1; i <= 5; i++) {\n\t\tbeds.push(i);\n\t}\n\treturn beds;\n}\n\nexport function getFrequencyOptions() {\n\treturn FREQUENCY_OPTIONS;\n}\n\nexport function getMeterTypes() {\n\treturn METER_TYPES;\n}\n\nexport function getLeaseOptions() {\n\treturn LEASE_OPTIONS;\n}\n\nexport function getPaymentOptions() {\n\treturn PAYMENT_FREQUENCY_OPTIONS;\n}\n\nexport function getTransactionsFilterOptions() {\n\treturn [\n\t\t{ id: 'month-to-date', text: 'Month To Date' }, { id: 'last-month', text: 'Last Month' },\n\t\t{ id: '3-months-to-date', text: '3 Months To Date' }, { id: 'year-to-date', text: 'Year To Date' },\n\t\t{ id: 'last-year', text: 'Last Year' },];\n}\n\nexport function getLastMonthFromToDates() {\n\treturn [startOfMonth(subMonths(startOfToday(), 1)), endOfMonth(subMonths(startOfToday(), 1))]\n}\n\nexport function getLastYearFromToDates() {\n\treturn [startOfYear(subYears(startOfToday(), 1)), endOfYear(subYears(startOfToday(), 1))]\n}\n\nexport function getYearToDateFromToDates() {\n\treturn [startOfYear(startOfToday()), startOfToday()]\n}\n\nexport function getCurrentMonthFromToDates() {\n\treturn [startOfMonth(startOfToday()), endOfMonth(startOfToday())]\n}\n\nexport function getLastThreeMonthsFromToDates() {\n\treturn [startOfMonth(subMonths(startOfToday(), 2)), endOfMonth(startOfToday())]\n}\n\nexport function getMonthsInYear() {\n\treturn monthsInYear\n}\n\n// Create our number formatter.\nexport const currencyFormatter = new Intl.NumberFormat(undefined, {\n\tstyle: 'decimal',\n\tcurrency: 'KES',\n});\n","import Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\nimport exportDataToXSL, { exportPropertyStatementDataToXSL } from \"../assets/PrintingHelper\";\nimport PropTypes from 'prop-types';\n\nfunction ExportToExcelBtn(props) {\n\tconst { disabled, reportName, reportTitle, headCells, dataToPrint } = props\n\treturn (\n\t\t<Button\n\t\t\ttype=\"button\"\n\t\t\taria-label=\"Export to Excel\"\n\t\t\tvariant=\"contained\"\n\t\t\tsize=\"medium\"\n\t\t\tcolor=\"primary\"\n\t\t\tdisabled={disabled}\n\t\t\tonClick={() => exportDataToXSL(reportName, reportTitle, headCells, dataToPrint, reportName)}\n\t\t\tstartIcon={<ImportExportIcon />}\n\t\t>\n\t\t\tExcel\n\t\t</Button >\n\t);\n}\n\nExportToExcelBtn.propTypes = {\n\treportName: PropTypes.string.isRequired,\n\treportTitle: PropTypes.string.isRequired,\n\theadCells: PropTypes.array.isRequired,\n\tdataToPrint: PropTypes.array.isRequired,\n}\n\nexport default ExportToExcelBtn;\n\nexport function ExportStatementToExcelBtn(props) {\n\tconst { displayText, disabled, reportName, reportTitle, headCells, dataToPrint } = props\n\treturn (\n\t\t<Button\n\t\t\ttype=\"button\"\n\t\t\taria-label=\"Export to Excel\"\n\t\t\tvariant=\"contained\"\n\t\t\tsize=\"medium\"\n\t\t\tcolor=\"primary\"\n\t\t\tdisabled={disabled}\n\t\t\tonClick={() => exportPropertyStatementDataToXSL(reportName, reportTitle, headCells, dataToPrint, reportName)}\n\t\t\tstartIcon={<ImportExportIcon />}\n\t\t>\n\t\t\t{ displayText ? displayText : \"Excel\"}\n\t\t</Button >\n\t);\n}\n\nExportStatementToExcelBtn.propTypes = {\n\treportName: PropTypes.string.isRequired,\n\treportTitle: PropTypes.string.isRequired,\n\theadCells: PropTypes.array.isRequired,\n\tdataToPrint: PropTypes.array.isRequired,\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12.5 8c-2.65 0-5.05.99-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88 3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8z\"\n}), 'Undo');\n\nexports.default = _default;","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * var result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * var result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * var result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addYears from '../addYears/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * var result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\n\nexport default function subYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addYears(dirtyDate, -amount);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameMonth\n * @category Month Helpers\n * @summary Are the given dates in the same month?\n *\n * @description\n * Are the given dates in the same month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same month\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same month?\n * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n */\n\nexport default function isSameMonth(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();\n}","import Layout from \"../components/PrivateLayout\";\nimport PageHeading from \"../components/PageHeading\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport { getTransactionsFilterOptions, currencyFormatter, getLastYearFromToDates, getYearToDateFromToDates, getLastMonthFromToDates } from \"../assets/commonAssets\";\nimport { startOfToday, parse, subMonths, addMonths, getMonth, format, isSameMonth } from 'date-fns'\nimport { ExportStatementToExcelBtn } from \"../components/ExportToExcelBtn\";\nimport InfoDisplayPaper from \"../components/InfoDisplayPaper\";\n\nconst TRANSACTIONS_FILTER_OPTIONS = getTransactionsFilterOptions()\n\n\nlet PropertyIncomeStatement = ({\n    transactions,\n    expenses,\n    leases,\n    properties,\n}) => {\n    const classes = commonStyles();\n    let [expensesItems, setExpensesItems] = useState([]);\n    let [leaseItems, setLeaseItems] = useState([]);\n    let [paymentItems, setPaymentItems] = useState([]);\n    let [netIncomeObject, setNetIncomeObject] = useState({});\n    let [incomeStatements, setIncomeStatements] = useState([]);\n    let [headCells, setHeadCells] = useState([]);\n    let [expensesStatements, setExpensesStatements] = useState([]);\n    let [propertyFilter, setPropertyFilter] = useState(\"all\");\n    let [fromFilter, setFromFilter] = useState('month-to-date');\n\n    useEffect(() => {\n        //go back [numMonths] months from current date\n        let eachPastMonthDate;\n        switch (fromFilter) {\n            case 'last-month':\n                eachPastMonthDate = [getLastMonthFromToDates()[0]]\n                break;\n            case 'year-to-date':\n                eachPastMonthDate = [...Array((getMonth(startOfToday()) + 1)).keys()].map((value) => addMonths(getYearToDateFromToDates()[0], value))\n                break;\n            case 'last-year':\n                eachPastMonthDate = [...Array(12).keys()].map((value) => addMonths(getLastYearFromToDates()[0], value))\n                break;\n            case 'month-to-date':\n                eachPastMonthDate = [...Array(1).keys()].reverse().map((value) => subMonths(startOfToday(), value))\n                break;\n            case '3-months-to-date':\n                eachPastMonthDate = [...Array(3).keys()].reverse().map((value) => subMonths(startOfToday(), value))\n                break;\n            default:\n                eachPastMonthDate = [getLastMonthFromToDates()[0]]\n        }\n        const headCellsForMonths = [...eachPastMonthDate.map((monthDate) => format(monthDate, 'MMMM yyyy')), `Total as of ${format(eachPastMonthDate[eachPastMonthDate.length - 1], 'MMMM yyyy')}`]\n        // calculate income from rent\n        const incomeMappedByMonth = []\n        const rentalIncomeObject = { income_type: 'Rental Income' }\n        const totalIncomeObject = { income_type: 'Total Income' }\n        const totalNetIncomeObject = { income_type: 'Net Income' }\n        let totalRentalIncomeForPeriod = 0\n        eachPastMonthDate.forEach((monthDate) => {\n            //get transactions recorded in the same month and year as monthDate\n            const totalRentalIncomeForMonth = paymentItems.filter(({ payment_type }) => payment_type === 'rent')\n                .filter((payment) => {\n                    const paymentDate = parse(payment.payment_date, 'yyyy-MM-dd', new Date())\n                    return isSameMonth(monthDate, paymentDate)\n                }).reduce((total, currentTransaction) => total + (parseFloat(currentTransaction.payment_amount) || 0), 0)\n            totalRentalIncomeForPeriod += totalRentalIncomeForMonth\n            rentalIncomeObject[format(monthDate, 'MMMM yyyy')] = totalRentalIncomeForMonth\n        })\n        rentalIncomeObject[headCellsForMonths[headCellsForMonths.length - 1]] = totalRentalIncomeForPeriod\n        incomeMappedByMonth.push(rentalIncomeObject)\n        // calculate income from other sources\n        const otherIncomeObject = { income_type: 'Other Income' }\n        let totalOtherIncomeForPeriod = 0\n        eachPastMonthDate.forEach((monthDate) => {\n            //get transactions recorded in the same month and year as monthDate\n            const totalOtherIncome = paymentItems.filter(({ payment_type }) => payment_type !== 'rent')\n                .filter((payment) => {\n                    const paymentDate = parse(payment.payment_date, 'yyyy-MM-dd', new Date())\n                    return isSameMonth(monthDate, paymentDate)\n                }).reduce((total, currentTransaction) => total + (parseFloat(currentTransaction.payment_amount) || 0), 0)\n            totalOtherIncomeForPeriod += totalOtherIncome\n            otherIncomeObject[format(monthDate, 'MMMM yyyy')] = totalOtherIncome\n        })\n        otherIncomeObject[headCellsForMonths[headCellsForMonths.length - 1]] = totalOtherIncomeForPeriod\n        incomeMappedByMonth.push(otherIncomeObject)\n        // get total of all incomes\n        incomeMappedByMonth.forEach((incomeObject) => {\n            headCellsForMonths.forEach((headCell) => {\n                const incomeAmount = parseFloat(incomeObject[headCell]) || 0\n                totalIncomeObject[headCell] = (parseFloat(totalIncomeObject[headCell]) || 0) + incomeAmount\n            })\n        })\n        incomeMappedByMonth.push(totalIncomeObject)\n        //calucate expenses\n        const expensesMappedByMonth = []\n        const totalExpensesObject = { expense_type: 'Total Expenses' }\n        const expenseObjectsInMonth = []\n        eachPastMonthDate.forEach((monthDate) => {\n            //get expenses recorded in the same month and year\n            //as monthDate\n            expensesItems.filter((expense) => {\n                const expenseDate = parse(expense.expense_date, 'yyyy-MM-dd', new Date())\n                return isSameMonth(monthDate, expenseDate)\n            }).forEach((monthExpense) => {\n                const { type, amount } = monthExpense\n                const expenseObject = {};\n                expenseObject['expense_type'] = type\n                expenseObject['amount'] = (parseFloat(amount) || 0)\n                expenseObject['month'] = format(monthDate, 'MMMM yyyy')\n                expenseObjectsInMonth.push(expenseObject)\n            })\n        })\n        const expensesTypesSet = new Set(expenseObjectsInMonth.map((expenseObject) => expenseObject.expense_type))\n        expensesTypesSet.forEach((expenseType) => {\n            expenseObjectsInMonth.filter((expenseObject) => expenseObject.expense_type === expenseType).forEach((expenseObject) => {\n                //make or obtain an object and push it to the expenses array\n                const expenseObjectByType = expensesMappedByMonth.find((expense) => expense.expense_type === expenseType)\n                if (typeof expenseObjectByType !== 'undefined') {\n                    expenseObjectByType[expenseObject.month] = (parseFloat(expenseObjectByType[expenseObject.month]) || 0) + parseFloat(expenseObject.amount)\n                    expenseObjectByType[headCellsForMonths[headCellsForMonths.length - 1]] = (parseFloat(expenseObjectByType[headCellsForMonths[headCellsForMonths.length - 1]]) || 0) + parseFloat(expenseObject.amount)\n                } else {\n                    const totalExpensesByTypeObject = {}\n                    totalExpensesByTypeObject['expense_type'] = expenseType\n                    totalExpensesByTypeObject[expenseObject.month] = parseFloat(expenseObject.amount) || 0\n                    totalExpensesByTypeObject[headCellsForMonths[headCellsForMonths.length - 1]] = parseFloat(expenseObject.amount) || 0\n                    expensesMappedByMonth.push(totalExpensesByTypeObject)\n                }\n            })\n        })\n        expensesMappedByMonth.forEach((expenseObject) => {\n            headCellsForMonths.forEach((headCell) => {\n                const expenseAmount = parseFloat(expenseObject[headCell]) || 0\n                totalExpensesObject[headCell] = (parseFloat(totalExpensesObject[headCell]) || 0) + expenseAmount\n            })\n        })\n        expensesMappedByMonth.push(totalExpensesObject)\n        // get net income\n        headCellsForMonths.forEach((headCell) => {\n            totalNetIncomeObject[headCell] = (parseFloat(totalIncomeObject[headCell]) || 0) - (parseFloat(totalExpensesObject[headCell]) || 0)\n        })\n        setHeadCells(headCellsForMonths)\n        setNetIncomeObject(totalNetIncomeObject);\n        setIncomeStatements(incomeMappedByMonth);\n        setExpensesStatements(expensesMappedByMonth);\n    }, [expensesItems, paymentItems])\n\n    useEffect(() => {\n        setExpensesItems(expenses)\n    }, [expenses])\n\n    useEffect(() => {\n        setPaymentItems(transactions)\n    }, [transactions])\n\n    useEffect(() => {\n        setLeaseItems(leases)\n    }, [leases])\n\n    const TOTAL_SECURITY_DEPOSIT_LIABILITY = leaseItems.reduce((total, currentValue) => {\n        return total + parseFloat(currentValue.security_deposit) || 0\n    }, 0);\n    const TOTAL_WATER_DEPOSIT_LIABILITY = leaseItems.reduce((total, currentValue) => {\n        return total + parseFloat(currentValue.water_deposit) || 0\n    }, 0);\n\n    const handleSearchFormSubmit = (event) => {\n        event.preventDefault();\n        //filter the transactions according to the search criteria here\n        let filteredTransactions = transactions\n            .filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter)\n        const filteredExpenses = expenses\n            .filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter)\n        const filteredLeases = leases\n            .filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter)\n        setPaymentItems(filteredTransactions)\n        setLeaseItems(filteredLeases)\n        setExpensesItems(filteredExpenses)\n    };\n\n    const resetSearchForm = (event) => {\n        event.preventDefault();\n        setPropertyFilter(\"all\");\n        setFromFilter(\"month-to-date\");\n        setExpensesItems(expenses)\n        setPaymentItems(transactions)\n        setLeaseItems(leases)\n    };\n\n    return (\n        <Layout pageTitle=\"Properties Income Statement\">\n            <Grid\n                container\n                spacing={3}\n                alignItems=\"center\"\n            >\n                <Grid item key={2}>\n                    <PageHeading text={'Properties Income Statement'} />\n                </Grid>\n                <Grid\n                    container\n                    spacing={2}\n                    item\n                    alignItems=\"center\"\n                    direction=\"row\"\n                    key={1}\n                >\n                    <Grid item>\n                        <ExportStatementToExcelBtn\n                            displayText={\"Export Income\"}\n                            reportName={'Properties Income Records'}\n                            reportTitle={'Properties Income Records'}\n                            headCells={headCells}\n                            dataToPrint={incomeStatements}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <ExportStatementToExcelBtn\n                            displayText={\"Export Expenses\"}\n                            reportName={\"Properties Expenses  Records\"}\n                            reportTitle={\"Properties Expenses Data\"}\n                            headCells={headCells}\n                            dataToPrint={expensesStatements}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Box\n                        border={1}\n                        borderRadius=\"borderRadius\"\n                        borderColor=\"grey.400\"\n                    >\n                        <form\n                            className={classes.form}\n                            id=\"contactSearchForm\"\n                            onSubmit={handleSearchFormSubmit}\n                        >\n                            <Grid\n                                container\n                                spacing={2}\n                                justify=\"center\"\n                                direction=\"row\"\n                            >\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        select\n                                        variant=\"outlined\"\n                                        name=\"property_filter\"\n                                        label=\"Select Property\"\n                                        id=\"property_filter\"\n                                        value={propertyFilter}\n                                        onChange={(event) => {\n                                            setPropertyFilter(\n                                                event.target.value\n                                            );\n                                        }}\n                                    >\n                                        <MenuItem key={\"all\"} value={\"all\"}>All Properties</MenuItem>\n                                        {properties.map((property, index) => (\n                                            <MenuItem\n                                                key={index}\n                                                value={property.id}\n                                            >\n                                                {property.ref}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        fullWidth\n                                        variant=\"outlined\"\n                                        select\n                                        id=\"from_filter\"\n                                        name=\"from_filter\"\n                                        label=\"Period\"\n                                        value={fromFilter}\n                                        onChange={(event) => {\n                                            setFromFilter(\n                                                event.target.value\n                                            );\n                                        }}\n                                        InputLabelProps={{ shrink: true }}>\n                                        {TRANSACTIONS_FILTER_OPTIONS.map((filterOption, index) => (\n                                            <MenuItem\n                                                key={index}\n                                                value={filterOption.id}\n                                            >\n                                                {filterOption.text}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                </Grid>\n                            </Grid>\n                            <Grid\n                                container\n                                spacing={2}\n                                item\n                                justify=\"flex-end\"\n                                alignItems=\"center\"\n                                direction=\"row\"\n                                key={1}\n                            >\n                                <Grid item>\n                                    <Button\n                                        onClick={(event) => handleSearchFormSubmit(event)}\n                                        type=\"submit\"\n                                        form=\"contactSearchForm\"\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        size=\"medium\"\n                                        startIcon={<SearchIcon />}\n                                    >\n                                        SEARCH\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        onClick={(event) => resetSearchForm(event)}\n                                        type=\"reset\"\n                                        form=\"contactSearchForm\"\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        size=\"medium\"\n                                        startIcon={<UndoIcon />}\n                                    >\n                                        RESET\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </form>\n                    </Box>\n                </Grid>\n                <Grid item container sm={12} spacing={2}>\n                    <Grid item container direction=\"row\" spacing={2}>\n                        <InfoDisplayPaper value={TOTAL_SECURITY_DEPOSIT_LIABILITY} title=\"Total Security Deposit Liability\" />\n                        <InfoDisplayPaper value={TOTAL_WATER_DEPOSIT_LIABILITY} title=\"Total Water Deposit Liability\" />\n                    </Grid>\n                    <Grid item sm={12}>\n                        <div style={{ width: '100%' }}>\n                            <Box display=\"flex\" key={'adadf'} flexDirection=\"row\" p={1} bgcolor=\"grey.300\">\n                                <Box key=\"first1\" width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                    Income\n                            </Box>\n                                {\n                                    headCells.map((headCell, index) =>\n                                        <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                            {headCell} (Ksh)\n                                    </Box>\n                                    )\n                                }\n                            </Box>\n                            {\n                                incomeStatements.map((incomeStatement, incomeIndex) => {\n                                    const otherColumns = headCells.map((headCell, index) =>\n                                        <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                            {currencyFormatter.format(incomeStatement[headCell])}\n                                        </Box>\n                                    )\n                                    return (\n                                        <Box display=\"flex\" key={incomeIndex} flexDirection=\"row\" p={1} bgcolor=\"background.paper\">\n                                            <Box textAlign=\"left\" width={1} key={incomeIndex + \"jl\"} flexGrow={1} p={1} >\n                                                {incomeStatement['income_type']}\n                                            </Box>\n                                            {otherColumns}\n                                        </Box>\n                                    )\n                                })\n                            }\n                        </div>\n                        <div style={{ width: '100%' }}>\n                            <Box display=\"flex\" key={'adlaldadf'} flexDirection=\"row\" p={1} bgcolor=\"grey.300\">\n                                <Box key=\"faldirst1\" width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                    Expenses\n                            </Box>\n                                {\n                                    headCells.map((headCell, index) =>\n                                        <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                            {headCell}\n                                        </Box>\n                                    )\n                                }\n                            </Box>\n                            {\n                                expensesStatements.map((expenseStatement, incomeIndex) => {\n                                    const otherColumns = headCells.map((headCell, index) =>\n                                        <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                            {currencyFormatter.format(expenseStatement[headCell] || 0)}\n                                        </Box>\n                                    )\n                                    return (\n                                        <Box display=\"flex\" key={incomeIndex} flexDirection=\"row\" p={1} bgcolor=\"background.paper\">\n                                            <Box textAlign=\"left\" width={1} key={incomeIndex + \"iiajl\"} flexGrow={1} p={1} >\n                                                {expenseStatement['expense_type']}\n                                            </Box>\n                                            {otherColumns}\n                                        </Box>\n                                    )\n                                })\n                            }\n                        </div>\n                        <div style={{ width: '100%' }}>\n                            <Box display=\"flex\" key={'adlaldadf'} flexDirection=\"row\" p={1} bgcolor=\"grey.300\">\n                                <Box key=\"faldirst1\" width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                    Net Income\n                            </Box>\n                                {\n                                    headCells.map((headCell, index) =>\n                                        <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                            {headCell}\n                                        </Box>\n                                    )\n                                }\n                            </Box>\n                            {\n                                <Box display=\"flex\" key={'kjb'} flexDirection=\"row\" p={1} bgcolor=\"background.paper\">\n                                    <Box textAlign=\"left\" width={1} key={\"iiajl\"} flexGrow={1} p={1} >\n                                        Net Income\n                            </Box>\n                                    {headCells.map((headCell, index) =>\n                                        <Box key={index} width={1} textAlign=\"left\" flexGrow={1} p={1} >\n                                            {currencyFormatter.format(netIncomeObject[headCell] || 0)}\n                                        </Box>\n                                    )\n                                    }\n                                </Box>\n\n                            }\n                        </div>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Layout>\n    );\n};\n\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        transactions: state.transactions,\n        expenses: state.expenses,\n        properties: state.properties,\n        leases: state.leases,\n    };\n};\n\nPropertyIncomeStatement = connect(mapStateToProps)(PropertyIncomeStatement);\n\nexport default withRouter(PropertyIncomeStatement);\n"],"sourceRoot":""}