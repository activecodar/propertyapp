{"version":3,"sources":["components/table/EnhancedTableHead.js","components/table/tableStyles.js","components/table/tablesSortingFunctions.js","components/table/commonTable.js","components/ExportToExcelBtn.js","components/PrintArrayToPdfBtn.js","components/ImportItemsBtn.js","Routes/RentAdjustModal.js","Routes/Leases.js"],"names":["EnhancedTableHead","props","classes","onSelectAllClick","order","orderBy","headCells","numSelected","rowCount","onRequestSort","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","checked","onChange","inputProps","map","headCell","key","id","align","numeric","disablePadding","sortDirection","TableSortLabel","active","direction","onClick","property","event","label","className","visuallyHidden","useStyles","makeStyles","theme","root","width","paper","marginBottom","spacing","table","minWidth","border","clip","height","margin","overflow","position","top","desc","a","b","withRouter","rows","selected","setSelected","deleteUrl","handleDelete","noEditCol","noDeleteCol","noDetailsCol","match","React","useState","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","Box","borderRadius","borderColor","TableContainer","Table","stickyHeader","aria-labelledby","size","aria-label","length","target","newSelecteds","n","TableBody","array","cmp","stabilizedThis","el","index","sort","stableSort","getSorting","slice","row","isItemSelected","indexOf","labelId","hover","role","aria-checked","tabIndex","stopPropagation","selectedIndex","newSelected","concat","handleClick","tableCellIndex","tableCellData","component","scope","Tooltip","title","placement","IconButton","color","Link","to","url","fontSize","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","value","ExportStatementToExcelBtn","displayText","disabled","reportName","reportTitle","dataToPrint","type","variant","exportPropertyStatementDataToXSL","startIcon","ExportToExcelBtn","exportDataToXSL","PrintArrayToPdfBtn","printDataRows","connect","dispatch","handleItemSubmit","item","handleItemFormSubmit","text","savingUrl","baseObjectToAddProperties","accept","style","display","files","file","reader","FileReader","onload","e","fileData","result","readXlsxFile","forEach","dataItem","Object","assign","readAsBinaryString","htmlFor","RentAdjustSchema","Yup","shape","increase_or_decrease","trim","required","adjust_method","fixed_adjust_amount","typeError","when","is","then","min","adjust_percentage","max","RentAdjustModal","commonStyles","leasesToAdjustRentAmounts","open","handleClose","Dialog","fullWidth","maxWidth","onClose","DialogTitle","DialogContent","initialValues","validationSchema","onSubmit","values","resetForm","setStatus","leaseToAdjust","currentRentAmount","parseFloat","rent_amount","rentAmountToAdjustBy","newRentAmount","leaseWithAdjustedRentAmount","sent","msg","error","status","handleSubmit","touched","errors","handleChange","handleBlur","isSubmitting","form","method","Grid","container","CustomSnackbar","message","FormControl","FormLabel","RadioGroup","name","FormControlLabel","control","Radio","xs","md","TextField","onBlur","helperText","buttonBox","Button","disableElevation","TransactionPage","leases","properties","history","handleItemDelete","leaseItems","setLeaseItems","filteredLeaseItems","setFilteredLeaseItems","propertyFilter","setPropertyFilter","activeStatusFilter","setActiveStatusFilter","fromDateFilter","setFromDateFilter","toDateFilter","setToDateFilter","adjustRentModalState","setAdjustRentModalState","useEffect","handleSearchFormSubmit","preventDefault","filteredLeases","filter","start_date","end_date","property_id","terminated","handleModalStateToggle","pageTitle","alignItems","PageHeading","includes","ImportItemsBtn","find","tenants","unit_id","tenant_id","Array","isArray","charge_type","charge_label","getSelectedLeaseDetailsForRentChargesUpload","justify","select","MenuItem","ref","InputLabelProps","shrink","resetSearchForm","state","lease","tenant","contacts","contact","unitWithLease","propertyUnits","tenant_name","first_name","last_name","tenant_id_number","id_number","property_ref","unit_ref","lease1","lease2","parse","Date","itemId"],"mappings":"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","file":"static/js/37.f0f6ab0c.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\n\nfunction EnhancedTableHead(props) {\n    const {\n        classes,\n        onSelectAllClick,\n        order,\n        orderBy,\n        headCells,\n        numSelected,\n        rowCount,\n        onRequestSort,\n    } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={\n                            numSelected > 0 && numSelected < rowCount\n                        }\n                        checked={numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ \"aria-label\": \"select all\" }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? \"right\" : \"left\"}\n                        padding={headCell.disablePadding ? \"none\" : \"default\"}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={order}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === \"desc\"\n                                        ? \"sorted descending\"\n                                        : \"sorted ascending\"}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nexport default EnhancedTableHead;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nexport default useStyles;\n","\nfunction desc(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction stableSort(array, cmp) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = cmp(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nfunction getSorting(order, orderBy) {\n    return order === \"desc\"\n        ? (a, b) => desc(a, b, orderBy)\n        : (a, b) => -desc(a, b, orderBy);\n}\n\nexport { desc, stableSort, getSorting };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport TableBody from '@material-ui/core/TableBody';\nimport Table from '@material-ui/core/Table';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableCell from '@material-ui/core/TableCell';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DetailsIcon from \"@material-ui/icons/Details\";\nimport { withRouter } from \"react-router-dom\";\nimport EnhancedTableHead from \"./EnhancedTableHead\";\nimport useStyles from \"./tableStyles\";\nimport { stableSort, getSorting } from \"./tablesSortingFunctions\";\n\nfunction CommonTable(props) {\n    const {\n        rows,\n        headCells,\n        selected,\n        setSelected,\n        deleteUrl,\n        handleDelete,\n        noEditCol,\n        noDeleteCol,\n        noDetailsCol,\n    } = props;\n    const { match } = props;\n    const classes = useStyles();\n    const [order, setOrder] = React.useState(\"asc\");\n    const [orderBy, setOrderBy] = React.useState(\"Beds\");\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(50);\n\n    const handleRequestSort = (event, property) => {\n        const isDesc = orderBy === property && order === \"desc\";\n        setOrder(isDesc ? \"asc\" : \"desc\");\n        setOrderBy(property);\n    };\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.id);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, id) => {\n        event.stopPropagation();\n        const selectedIndex = selected.indexOf(id);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, id);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1)\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (id) => selected.indexOf(id) !== -1;\n\n    return (\n        <Box border={1} borderRadius=\"borderRadius\" borderColor=\"grey.400\">\n            <TableContainer>\n                <Table\n                    stickyHeader\n                    className={classes.table}\n                    aria-labelledby=\"tableTitle\"\n                    size={\"medium\"}\n                    aria-label=\"enhanced table\"\n                >\n                    <EnhancedTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        headCells={headCells}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getSorting(order, orderBy))\n                            .slice(\n                                page * rowsPerPage,\n                                page * rowsPerPage + rowsPerPage\n                            )\n                            .map((row, index) => {\n                                const isItemSelected = isSelected(row.id);\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        // onClick={() => {if(typeof tableRowOnClickHandler === 'function') tableRowOnClickHandler(row.id) }}\n                                        hover\n                                        role=\"checkbox\"\n                                        aria-checked={isItemSelected}\n                                        tabIndex={-1}\n                                        key={row.id}\n                                        selected={isItemSelected}\n                                    >\n                                        <TableCell padding=\"checkbox\">\n                                            <Checkbox\n                                                onClick={(event) =>\n                                                    handleClick(event, row.id)\n                                                }\n                                                checked={isItemSelected}\n                                                inputProps={{\n                                                    \"aria-labelledby\": labelId,\n                                                }}\n                                            />\n                                        </TableCell>\n                                        {headCells.map(\n                                            (headCell, tableCellIndex) => {\n                                                const tableCellData =\n                                                    row[headCell.id];\n                                                return (\n                                                    headCell.id === 'edit' ?\n                                                        (\n                                                            noEditCol ? null : (\n                                                                <TableCell\n                                                                    key={`edit${tableCellIndex}`}\n                                                                    component=\"th\"\n                                                                    scope=\"row\"\n                                                                    sortDirection={false}\n                                                                >\n                                                                    <Tooltip\n                                                                        title=\"Edit\"\n                                                                        placement=\"bottom\"\n                                                                    >\n                                                                        <IconButton\n                                                                            color=\"primary\"\n                                                                            size=\"small\"\n                                                                            component={Link}\n                                                                            to={`${match.url}/${row.id}/edit`}\n                                                                        >\n                                                                            <EditIcon fontSize=\"default\" />\n                                                                        </IconButton>\n                                                                    </Tooltip>\n                                                                </TableCell>\n                                                            )\n                                                        )\n                                                        : headCell.id === 'delete' ?\n                                                            (\n                                                                noDeleteCol ? null : (\n                                                                    <TableCell\n                                                                        key={`delete${tableCellIndex}`}\n                                                                        component=\"th\"\n                                                                        scope=\"row\"\n                                                                        sortDirection={false}\n                                                                    >\n                                                                        <Tooltip\n                                                                            title=\"Delete\"\n                                                                            placement=\"bottom\"\n                                                                        >\n                                                                            <IconButton\n                                                                                onClick={(event) => {\n                                                                                    handleDelete(\n                                                                                        row.id,\n                                                                                        deleteUrl\n                                                                                    );\n                                                                                }}\n                                                                                color=\"primary\"\n                                                                                size=\"small\"\n                                                                            >\n                                                                                <DeleteIcon fontSize=\"default\" />\n                                                                            </IconButton>\n                                                                        </Tooltip>\n                                                                    </TableCell>\n                                                                )\n                                                            )\n                                                            : headCell.id === 'details' ?\n                                                                (\n                                                                    !noDetailsCol ? null : (\n                                                                        <TableCell\n                                                                            key={`details${tableCellIndex}`}\n                                                                            component=\"th\"\n                                                                            scope=\"row\"\n                                                                            sortDirection={false}\n                                                                        >\n                                                                            <Tooltip\n                                                                                title=\"Details\"\n                                                                                placement=\"bottom\"\n                                                                            >\n                                                                                <IconButton\n                                                                                    color=\"primary\"\n                                                                                    size=\"small\"\n                                                                                    component={Link}\n                                                                                    to={`${match.url}/${row.id}/details`}\n                                                                                >\n                                                                                    <DetailsIcon fontSize=\"default\" />\n                                                                                </IconButton>\n                                                                            </Tooltip>\n                                                                        </TableCell>\n                                                                    )\n                                                                )\n                                                                :\n                                                                <TableCell\n                                                                    key={tableCellIndex}\n                                                                    component=\"th\"\n                                                                    id={labelId}\n                                                                    scope=\"row\"\n                                                                    padding=\"none\"\n                                                                >\n                                                                    {typeof tableCellData ===\n                                                                        \"boolean\"\n                                                                        ? tableCellData\n                                                                            ? \"Yes\"\n                                                                            : \"No\"\n                                                                        : tableCellData}\n                                                                </TableCell>\n                                                );\n                                            }\n                                        )}\n                                    </TableRow>\n                                );\n                            })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[50, 100, 200, 300]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </Box>\n    );\n}\n\nexport default withRouter(CommonTable);\n","import Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\nimport exportDataToXSL, { exportPropertyStatementDataToXSL } from \"../assets/PrintingHelper\";\nimport PropTypes from 'prop-types';\n\nfunction ExportToExcelBtn(props) {\n\tconst { disabled, reportName, reportTitle, headCells, dataToPrint } = props\n\treturn (\n\t\t<Button\n\t\t\ttype=\"button\"\n\t\t\taria-label=\"Export to Excel\"\n\t\t\tvariant=\"contained\"\n\t\t\tsize=\"medium\"\n\t\t\tcolor=\"primary\"\n\t\t\tdisabled={disabled}\n\t\t\tonClick={() => exportDataToXSL(reportName, reportTitle, headCells, dataToPrint, reportName)}\n\t\t\tstartIcon={<ImportExportIcon />}\n\t\t>\n\t\t\tExcel\n\t\t</Button >\n\t);\n}\n\nExportToExcelBtn.propTypes = {\n\treportName: PropTypes.string.isRequired,\n\treportTitle: PropTypes.string.isRequired,\n\theadCells: PropTypes.array.isRequired,\n\tdataToPrint: PropTypes.array.isRequired,\n}\n\nexport default ExportToExcelBtn;\n\nexport function ExportStatementToExcelBtn(props) {\n\tconst { displayText, disabled, reportName, reportTitle, headCells, dataToPrint } = props\n\treturn (\n\t\t<Button\n\t\t\ttype=\"button\"\n\t\t\taria-label=\"Export to Excel\"\n\t\t\tvariant=\"contained\"\n\t\t\tsize=\"medium\"\n\t\t\tcolor=\"primary\"\n\t\t\tdisabled={disabled}\n\t\t\tonClick={() => exportPropertyStatementDataToXSL(reportName, reportTitle, headCells, dataToPrint, reportName)}\n\t\t\tstartIcon={<ImportExportIcon />}\n\t\t>\n\t\t\t{ displayText ? displayText : \"Excel\"}\n\t\t</Button >\n\t);\n}\n\nExportStatementToExcelBtn.propTypes = {\n\treportName: PropTypes.string.isRequired,\n\treportTitle: PropTypes.string.isRequired,\n\theadCells: PropTypes.array.isRequired,\n\tdataToPrint: PropTypes.array.isRequired,\n}\n","import Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport { printDataRows } from \"../assets/PrintingHelper\";\nimport PropTypes from 'prop-types';\n\nfunction PrintArrayToPdfBtn (props) {\n    const { disabled, reportName, reportTitle, headCells, dataToPrint } = props\n    return (\n        <Button\n            type=\"button\"\n            aria-label=\"Print to Pdf\"\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"primary\"\n            disabled={disabled}\n            onClick={() => printDataRows(reportName, reportTitle, headCells, dataToPrint)}\n            startIcon={<PrintIcon />}\n        >\n            Pdf\n        </Button>\n    );\n}\n\nPrintArrayToPdfBtn.propTypes = {\n    reportName: PropTypes.string.isRequired,\n    reportTitle: PropTypes.string.isRequired,\n    headCells: PropTypes.array.isRequired,\n    dataToPrint: PropTypes.array.isRequired,\n}\n\nexport default PrintArrayToPdfBtn;\n","import Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport { readXlsxFile } from \"../assets/PrintingHelper\";\nimport PropTypes from 'prop-types';\nimport { handleItemFormSubmit } from '../actions/actions'\nimport { connect } from \"react-redux\";\n\nfunction ImportItemsBtn(props) {\n    const { disabled, text, savingUrl, baseObjectToAddProperties, handleItemSubmit } = props\n    return (\n        <div>\n            <input\n                accept=\".xls,.xlsx, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-excel\"\n                style={{ display: \"none\" }}\n                id=\"contained-button-file\"\n                type=\"file\"\n                onChange={(event) => {\n                    const files = event.target.files\n                    if (files.length) {\n                        const file = files[0];\n                        const reader = new FileReader();\n                        reader.onload = function (e) {\n                            var fileData = e.target.result;\n                            const dataToSave = readXlsxFile(fileData)\n                            dataToSave.forEach(async dataItem => {\n                                if (baseObjectToAddProperties) {\n                                    Object.assign(dataItem, baseObjectToAddProperties)\n                                }\n                                await handleItemSubmit(dataItem, savingUrl)\n                            })\n                        };\n                        reader.readAsBinaryString(file)\n                    }\n                }}\n            />\n            <label htmlFor=\"contained-button-file\">\n                <Button variant=\"contained\" color=\"primary\" component=\"span\"\n                    disabled={disabled} startIcon={<CloudUploadIcon />}>\n                    {text ? text : \"Upload\"}\n                </Button>\n            </label>\n        </div>\n    );\n}\n\nImportItemsBtn.propTypes = {\n    savingUrl: PropTypes.string.isRequired,\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleItemSubmit: (item, url) => dispatch(handleItemFormSubmit(item, url)),\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(ImportItemsBtn);\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport Radio from \"@material-ui/core/Radio\";\nimport CustomSnackbar from '../components/CustomSnackbar'\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { commonStyles } from \"../components/commonStyles.js\";\n\n\nconst RentAdjustSchema = Yup.object().shape({\n    increase_or_decrease: Yup.string().trim().required('Adjust choice is Required'),\n    adjust_method: Yup.string().trim().required(\"Method is required\"),\n    fixed_adjust_amount: Yup.number().typeError('Amount must be a number')\n        .when('adjust_method', { is: 'fixed_amount', then: Yup.number().min(0).required('Amount is required') }),\n    adjust_percentage: Yup.number().typeError('Percentage must be a number')\n        .when('adjust_method', {\n            is: 'percentage',\n            then: Yup.number().min(0).max(100, \"Percentage must be less <= 100\")\n                .required('Percentage is required')\n        }),\n\n});\n\nexport default function RentAdjustModal(props) {\n    const classes = commonStyles();\n    const { leasesToAdjustRentAmounts, open, handleClose, handleItemSubmit } = props\n\n    const rentAdjustValues = {\n        increase_or_decrease: \"increase\",\n        adjust_method: \"fixed_amount\",\n        adjust_percentage: \"\",\n        fixed_adjust_amount: \"\",\n    }\n\n    return (\n        <Dialog\n            fullWidth\n            maxWidth=\"sm\"\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"form-dialog-title\"\n        >\n            <DialogTitle id=\"alert-dialog-title\"> Adjust Rent Amounts</DialogTitle>\n            <DialogContent>\n                <Formik\n                    initialValues={rentAdjustValues}\n                    validationSchema={RentAdjustSchema}\n                    onSubmit={async (values, { resetForm, setStatus }) => {\n                        try {\n                            leasesToAdjustRentAmounts.forEach(async leaseToAdjust => {\n                                const currentRentAmount = parseFloat(leaseToAdjust.rent_amount) || 0\n                                let rentAmountToAdjustBy = 0;\n                                if (values.adjust_method === \"percentage\") {\n                                    rentAmountToAdjustBy = (currentRentAmount * values.adjust_percentage) / 100\n                                } else {\n                                    rentAmountToAdjustBy = parseFloat(values.fixed_adjust_amount)\n                                }\n                                const newRentAmount = values.increase_or_decrease === \"increase\" ?\n                                    (currentRentAmount + rentAmountToAdjustBy) : (currentRentAmount - rentAmountToAdjustBy)\n                                const leaseWithAdjustedRentAmount = Object.assign({}, leaseToAdjust, { rent_amount: newRentAmount })\n                                await handleItemSubmit(leaseWithAdjustedRentAmount, 'leases')\n                            });\n                            resetForm({});\n                            setStatus({ sent: true, msg: \"Rent Amounts Adjusted Successfully!\" })\n                            handleClose()\n                        } catch (error) {\n                            setStatus({ sent: false, msg: `Error! ${error}.` })\n                        }\n                    }}>\n                    {({\n                        values,\n                        status,\n                        handleSubmit,\n                        touched,\n                        errors,\n                        handleChange,\n                        handleBlur,\n                        isSubmitting,\n                    }) => (\n                        <form\n                            className={classes.form}\n                            method=\"post\"\n                            id=\"rentAdjustForm\"\n                            onSubmit={handleSubmit}\n                        >\n                            <Grid\n                                container\n                                direction=\"column\"\n                                spacing={2}\n                            >\n                                {\n                                    status && status.msg && (\n                                        <CustomSnackbar\n                                            variant={status.sent ? \"success\" : \"error\"}\n                                            message={status.msg}\n                                        />\n                                    )\n                                }\n                                <Grid container item direction=\"column\" spacing={2}>\n                                    <Grid item>\n                                        <FormControl component=\"fieldset\">\n                                            <FormLabel component=\"legend\">Increase/Decrease Rent Amount</FormLabel>\n                                            <RadioGroup aria-label=\"Increase or Decrease\" name=\"increase_or_decrease\"\n                                                value={values.increase_or_decrease} onChange={handleChange}>\n                                                <FormControlLabel value=\"increase\" control={<Radio />} label=\"Increase\" />\n                                                <FormControlLabel value=\"decrease\" control={<Radio />} label=\"Decrease\" />\n                                            </RadioGroup>\n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item>\n                                        <FormControl component=\"fieldset\">\n                                            <FormLabel component=\"legend\">Adjust Rent Amount By</FormLabel>\n                                            <RadioGroup aria-label=\"Adjust Method\" name=\"adjust_method\"\n                                                value={values.adjust_method} onChange={handleChange}>\n                                                <FormControlLabel value=\"fixed_amount\" control={<Radio />} label=\"Fixed Amount\" />\n                                                <FormControlLabel value=\"percentage\" control={<Radio />} label=\"Percentage\" />\n                                            </RadioGroup>\n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item xs={12} md>\n                                        {\n                                            values.adjust_method === \"fixed_amount\" ?\n                                                <TextField\n                                                    fullWidth\n                                                    label=\"Amount to Adjust Rent\"\n                                                    variant=\"outlined\"\n                                                    type=\"text\"\n                                                    value={values.fixed_adjust_amount}\n                                                    id='fixed_adjust_amount'\n                                                    name='fixed_adjust_amount'\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    error={errors.fixed_adjust_amount && touched.fixed_adjust_amount}\n                                                    helperText={touched.fixed_adjust_amount && errors.fixed_adjust_amount}\n                                                />\n                                                :\n                                                <TextField\n                                                    fullWidth\n                                                    label=\"Percentage to Adjust Rent\"\n                                                    variant=\"outlined\"\n                                                    type=\"text\"\n                                                    value={values.adjust_percentage}\n                                                    name='adjust_percentage'\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    error={errors.adjust_percentage && touched.adjust_percentage}\n                                                    helperText={touched.adjust_percentage && errors.adjust_percentage}\n                                                />\n                                        }\n                                    </Grid>\n                                </Grid>\n                                <Grid\n                                    item\n                                    container\n                                    direction=\"row\"\n                                    className={classes.buttonBox}\n                                >\n                                    <Grid item>\n                                        <Button\n                                            color=\"secondary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<CancelIcon />}\n                                            onClick={() => { handleClose() }}\n                                            disableElevation\n                                        >\n                                            Cancel\n\t\t\t\t\t\t\t\t\t    </Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            type=\"submit\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<SaveIcon />}\n                                            form=\"rentAdjustForm\"\n                                            disabled={isSubmitting}\n                                        >\n                                            Adjust Rent\n\t\t\t\t\t\t\t\t        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </form>\n                    )}\n                </Formik>\n            </DialogContent>\n        </Dialog >\n    );\n}","import Layout from \"../components/PrivateLayout\";\nimport Grid from \"@material-ui/core/Grid\";\nimport PageHeading from \"../components/PageHeading\";\nimport React, { useEffect, useState } from \"react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport BlockIcon from \"@material-ui/icons/Block\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ExportToExcelBtn from \"../components/ExportToExcelBtn\";\nimport { connect } from \"react-redux\";\nimport { handleDelete, handleItemFormSubmit } from \"../actions/actions\";\nimport CommonTable from \"../components/table/commonTable\";\nimport { withRouter } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport ImportItemsBtn from \"../components/ImportItemsBtn\";\nimport PrintArrayToPdf from \"../components/PrintArrayToPdfBtn\";\nimport RentAdjustModal from \"./RentAdjustModal\";\nimport { parse } from \"date-fns\";\n\nconst headCells = [\n    { id: \"property_ref\", numeric: false, disablePadding: true, label: \"Property\", },\n    { id: \"unit_ref\", numeric: false, disablePadding: true, label: \"Unit\", },\n    { id: \"lease_type\", numeric: false, disablePadding: true, label: \"Agreement Type\", },\n    { id: \"rent_cycle\", numeric: false, disablePadding: true, label: \"Rent Cycle\", },\n    { id: \"tenant_name\", numeric: false, disablePadding: true, label: \"Tenant Name\", },\n    { id: \"tenant_id_number\", numeric: false, disablePadding: true, label: \"Tenant ID\", },\n    { id: \"start_date\", numeric: false, disablePadding: true, label: \"Start Date\", },\n    { id: \"end_date\", numeric: false, disablePadding: true, label: \"End Date\", },\n    { id: \"security_deposit\", numeric: false, disablePadding: true, label: \"Deposit Held\", },\n    { id: \"rent_amount\", numeric: false, disablePadding: true, label: \"Rent\", },\n    { id: \"edit\", numeric: false, disablePadding: true, label: \"Edit\" },\n    { id: \"delete\", numeric: false, disablePadding: true, label: \"Delete\" },\n];\n\nlet TransactionPage = ({\n    leases,\n    properties,\n    match,\n    history,\n    handleItemSubmit,\n    handleItemDelete,\n}) => {\n    const classes = commonStyles();\n    let [leaseItems, setLeaseItems] = useState([]);\n    let [filteredLeaseItems, setFilteredLeaseItems] = useState([]);\n    let [propertyFilter, setPropertyFilter] = useState(\"all\");\n    let [activeStatusFilter, setActiveStatusFilter] = useState(\"all\");\n    let [fromDateFilter, setFromDateFilter] = useState(\"\");\n    let [toDateFilter, setToDateFilter] = useState(\"\");\n    const [selected, setSelected] = useState([]);\n    const [adjustRentModalState, setAdjustRentModalState] = useState(false);\n\n    useEffect(() => {\n        setLeaseItems(leases);\n        setFilteredLeaseItems(leases);\n    }, [leases]);\n\n    const handleSearchFormSubmit = (event) => {\n        event.preventDefault();\n        //filter the leases according to the search criteria here\n        let filteredLeases = leaseItems\n            .filter(({ start_date }) =>\n                !fromDateFilter ? true : start_date >= fromDateFilter\n            )\n            .filter(({ end_date }) =>\n                !toDateFilter ? true : !end_date ? false : end_date <= toDateFilter\n            )\n            .filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter)\n            .filter(({ terminated }) =>\n                activeStatusFilter === \"all\" ? true : typeof terminated === 'undefined' ? true : terminated === activeStatusFilter\n            );\n        setFilteredLeaseItems(filteredLeases);\n    };\n\n    const handleModalStateToggle = () => {\n        setAdjustRentModalState(!adjustRentModalState)\n    }\n\n    const getSelectedLeaseDetailsForRentChargesUpload = () => {\n        const { tenants, unit_id, property_id } = leaseItems.find(({ id }) => id === selected[0]) || {}\n        return {\n            unit_id, property_id,\n            tenant_id: Array.isArray(tenants) ? tenants[0] : \"\",\n            charge_type: \"rent\", charge_label: \"Rent\"\n        }\n    }\n\n    const resetSearchForm = (event) => {\n        event.preventDefault();\n        setFilteredLeaseItems(leaseItems);\n        setPropertyFilter(\"all\");\n        setActiveStatusFilter(\"all\");\n        setFromDateFilter(\"\");\n        setToDateFilter(\"\");\n    };\n\n    return (\n        <Layout pageTitle=\"Rental Agreements\">\n            <Grid\n                container\n                spacing={3}\n                alignItems=\"center\"\n            >\n                <Grid item key={2}>\n                    <PageHeading text={'Rental Agreements'} />\n                </Grid>\n                <Grid\n                    container\n                    spacing={2}\n                    item\n                    alignItems=\"center\"\n                    direction=\"row\"\n                    key={1}\n                >\n                    <Grid item>\n                        <Button\n                            type=\"button\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            startIcon={<AddIcon />}\n                            component={Link}\n                            to={`${match.url}/new`}\n                        >\n                            NEW\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            type=\"button\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            startIcon={<EditIcon />}\n                            disabled={!selected.length}\n                            component={Link}\n                            to={`${match.url}/${selected[0]}/edit`}\n                        >\n                            Edit\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            type=\"button\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            disabled={!selected.length}\n                            onClick={handleModalStateToggle}\n                        >\n                            Adjust Rent Amounts\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            type=\"button\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            startIcon={<BlockIcon />}\n                            disabled={!selected.length}\n                            component={Link}\n                            to={`/app/notices/new?lease=${selected[0]}`}\n                        >\n                            End Agreement\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <PrintArrayToPdf\n                            disabled={!selected.length}\n                            reportName={'Rental Agreements Records'}\n                            reportTitle={'Rental Agreements Data'}\n                            headCells={headCells}\n                            dataToPrint={leaseItems.filter(({ id }) => selected.includes(id))}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <ExportToExcelBtn\n                            disabled={!selected.length}\n                            reportName={'Rental Agreements Records'}\n                            reportTitle={'Rental Agreements Data'}\n                            headCells={headCells}\n                            dataToPrint={leaseItems.filter(({ id }) => selected.includes(id))}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <ImportItemsBtn\n                            disabled={selected.length != 1}\n                            savingUrl=\"transactions-charges\"\n                            text=\"Upload Rent Charges\"\n                            baseObjectToAddProperties={getSelectedLeaseDetailsForRentChargesUpload()}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Box\n                        border={1}\n                        borderRadius=\"borderRadius\"\n                        borderColor=\"grey.400\"\n                    >\n                        <form\n                            className={classes.form}\n                            id=\"contactSearchForm\"\n                            onSubmit={handleSearchFormSubmit}\n                        >\n                            <Grid\n                                container\n                                spacing={2}\n                                justify=\"center\"\n                                direction=\"row\"\n                            >\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        fullWidth\n                                        select\n                                        variant=\"outlined\"\n                                        id=\"lease_status\"\n                                        name=\"lease_status\"\n                                        label=\"Agreement Status\"\n                                        value={activeStatusFilter}\n                                        onChange={(event) => {\n                                            setActiveStatusFilter(\n                                                event.target.value\n                                            );\n                                        }}\n                                    >\n                                        <MenuItem key=\"all\" value={\"all\"}>All</MenuItem>\n                                        <MenuItem key=\"active\" value={false}>Active</MenuItem>\n                                        <MenuItem key=\"in-active\" value={true}>In-Active</MenuItem>\n                                    </TextField>\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        fullWidth\n                                        select\n                                        variant=\"outlined\"\n                                        name=\"property_filter\"\n                                        label=\"Select Property\"\n                                        id=\"property_filter\"\n                                        onChange={(event) => {\n                                            setPropertyFilter(\n                                                event.target.value\n                                            );\n                                        }}\n                                        value={propertyFilter}\n                                    >\n                                        <MenuItem key={\"all\"} value={\"all\"}>All Properties</MenuItem>\n                                        {properties.map((property, index) => (\n                                            <MenuItem\n                                                key={index}\n                                                value={property.id}\n                                            >\n                                                {property.ref}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                </Grid>\n                            </Grid>\n                            <Grid\n                                container\n                                spacing={2}\n                                justify=\"center\"\n                                direction=\"row\"\n                            >\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        fullWidth\n                                        variant=\"outlined\"\n                                        type=\"date\"\n                                        id=\"from_date_filter\"\n                                        name=\"from_date_filter\"\n                                        label=\"From Date\"\n                                        value={fromDateFilter}\n                                        onChange={(event) => {\n                                            setFromDateFilter(\n                                                event.target.value\n                                            );\n                                        }}\n                                        InputLabelProps={{ shrink: true }}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <TextField\n                                        fullWidth\n                                        variant=\"outlined\"\n                                        type=\"date\"\n                                        name=\"to_date_filter\"\n                                        label=\"To Date\"\n                                        id=\"to_date_filter\"\n                                        onChange={(event) => {\n                                            setToDateFilter(event.target.value);\n                                        }}\n                                        value={toDateFilter}\n                                        InputLabelProps={{ shrink: true }}\n                                    />\n                                </Grid>\n                            </Grid>\n                            <Grid\n                                container\n                                spacing={2}\n                                item\n                                justify=\"flex-end\"\n                                alignItems=\"center\"\n                                direction=\"row\"\n                                key={1}\n                            >\n                                <Grid item>\n                                    <Button\n                                        onClick={(event) => handleSearchFormSubmit(event)}\n                                        type=\"submit\"\n                                        form=\"contactSearchForm\"\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        size=\"medium\"\n                                        startIcon={<SearchIcon />}\n                                    >\n                                        SEARCH\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        onClick={(event) => resetSearchForm(event)}\n                                        type=\"reset\"\n                                        form=\"contactSearchForm\"\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        size=\"medium\"\n                                        startIcon={<UndoIcon />}\n                                    >\n                                        RESET\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </form>\n                    </Box>\n                </Grid>\n                {\n                    adjustRentModalState ?\n                        <RentAdjustModal open={adjustRentModalState}\n                            leasesToAdjustRentAmounts={leaseItems.filter(({ id }) => selected.includes(id))}\n                            handleClose={handleModalStateToggle} history={history}\n                            handleItemSubmit={handleItemSubmit} /> : null\n                }\n                <Grid item xs={12}>\n                    <CommonTable\n                        selected={selected}\n                        setSelected={setSelected}\n                        rows={filteredLeaseItems}\n                        headCells={headCells}\n                        handleDelete={handleItemDelete}\n                        deleteUrl={\"leases\"}\n                    />\n                </Grid>\n            </Grid>\n        </Layout>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        leases: state.leases\n            .map((lease) => {\n                const tenant = state.contacts.find((contact) => contact.id === lease.tenants[0]) || {};\n                const property = state.properties.find(({ id }) => id === lease.property_id) || {};\n                const unitWithLease = state.propertyUnits.find(({ id }) => id === lease.unit_id) || {};\n                return Object.assign({}, lease,\n                    {\n                        tenant_name: tenant.first_name + \" \" + tenant.last_name,\n                        tenant_id_number: tenant.id_number,\n                        property_ref: property.ref,\n                        unit_ref: unitWithLease.ref,\n                    });\n            })\n            .sort((lease1, lease2) => parse(lease2.start_date, 'yyyy-MM-dd', new Date()) -\n                parse(lease1.start_date, 'yyyy-MM-dd', new Date())),\n        properties: state.properties,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleItemSubmit: (item, url) => dispatch(handleItemFormSubmit(item, url)),\n        handleItemDelete: (itemId, url) => dispatch(handleDelete(itemId, url)),\n    };\n};\n\nTransactionPage = connect(mapStateToProps, mapDispatchToProps)(TransactionPage);\n\nexport default withRouter(TransactionPage);\n"],"sourceRoot":""}