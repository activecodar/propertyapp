{"version":3,"sources":["../node_modules/date-fns/esm/addMonths/index.js","assets/commonAssets.js","components/table/EnhancedTableHead.js","components/table/tableStyles.js","components/table/tablesSortingFunctions.js","components/table/commonTable.js","components/ExportToExcelBtn.js","../node_modules/@material-ui/icons/Undo.js","../node_modules/@material-ui/icons/Add.js","../node_modules/@material-ui/icons/Print.js","components/PrintArrayToPdfBtn.js","../node_modules/date-fns/esm/startOfMonth/index.js","../node_modules/date-fns/esm/subMonths/index.js","../node_modules/date-fns/esm/endOfMonth/index.js","../node_modules/date-fns/esm/addYears/index.js","../node_modules/date-fns/esm/subYears/index.js","components/TabPanel.js","../node_modules/date-fns/esm/isWithinInterval/index.js","../node_modules/date-fns/esm/addDays/index.js","../node_modules/date-fns/esm/subDays/index.js","Routes/RentBalancesPage.js","Routes/RentRoll.js"],"names":["addMonths","dirtyDate","dirtyAmount","requiredArgs","arguments","date","toDate","amount","toInteger","isNaN","Date","NaN","dayOfMonth","getDate","endOfDesiredMonth","getTime","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","monthsInYear","eachMonthOfInterval","start","startOfYear","startOfToday","end","endOfYear","TITLES_LIST","GENDERS_LIST","EXPENSES_CATEGORIES","UNIT_TYPES","LEASE_OPTIONS","METER_TYPES","PAYMENT_FREQUENCY_OPTIONS","getContactTitles","getGendersList","getExpensesCategories","getUnitTypes","getPropertyBaths","baths","i","push","concat","getPropertyBeds","beds","getMeterTypes","getLeaseOptions","getPaymentOptions","getTransactionsFilterOptions","id","text","getLastMonthFromToDates","startOfMonth","subMonths","endOfMonth","getLastYearFromToDates","subYears","getYearToDateFromToDates","getCurrentMonthFromToDates","getLastThreeMonthsFromToDates","getMonthsInYear","currencyFormatter","Intl","NumberFormat","undefined","style","currency","EnhancedTableHead","props","classes","onSelectAllClick","order","orderBy","headCells","numSelected","rowCount","onRequestSort","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","checked","onChange","inputProps","map","headCell","key","align","numeric","disablePadding","sortDirection","TableSortLabel","active","direction","onClick","property","event","label","className","visuallyHidden","useStyles","makeStyles","theme","root","width","paper","marginBottom","spacing","table","minWidth","border","clip","height","margin","overflow","position","top","desc","a","b","withRouter","rows","selected","setSelected","deleteUrl","handleDelete","noEditCol","noDeleteCol","noDetailsCol","match","React","useState","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","Box","borderRadius","borderColor","TableContainer","Table","stickyHeader","aria-labelledby","size","aria-label","length","target","newSelecteds","n","TableBody","array","cmp","stabilizedThis","el","index","sort","stableSort","getSorting","slice","row","isItemSelected","indexOf","labelId","hover","role","aria-checked","tabIndex","stopPropagation","selectedIndex","newSelected","handleClick","tableCellIndex","tableCellData","component","scope","Tooltip","title","placement","IconButton","color","Link","to","url","fontSize","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","value","ExportStatementToExcelBtn","displayText","disabled","reportName","reportTitle","dataToPrint","type","variant","exportPropertyStatementDataToXSL","startIcon","ExportToExcelBtn","exportDataToXSL","_interopRequireDefault","require","Object","defineProperty","exports","default","_react","_default","createElement","d","PrintArrayToPdfBtn","printDataRows","setDate","setHours","month","addYears","TabPanel","children","other","hidden","m","isWithinInterval","dirtyInterval","interval","time","startTime","endTime","RangeError","addDays","subDays","endOfLastThirtyDays","endOfLastSixtyDays","endOfLastNinetyDays","defaultEarliestTime","RentBalancesPage","properties","contacts","transactionsCharges","filteredMappedRentBalancesItems","setFilteredMappedRentalBalances","mappedRentBalances","setMappedRentBalances","contactFilter","setContactFilter","propertyFilter","setPropertyFilter","totalBalancesAmount","setTotalBalancesAmount","uniqueTenantsWithBalances","setUniqueTenantsWithBalances","useEffect","uniqueTenantIdsWithCharges","Set","rentCharge","tenant_id","tenantsWithCharges","tenant_name","property_id","unit_ref","unit_details","totalRentBalances","mappedTenantsRentBalances","Array","from","tenantId","tenantDetails","find","tenantBalancesDetails","totalTenantRentBalance","filter","forEach","rentChargeDueDate","parse","due_date","parseFloat","balance","assign","handleSearchFormSubmit","preventDefault","filteredMappedRentBalances","Grid","container","justify","item","PageHeading","alignItems","includes","sm","form","onSubmit","xs","md","TextField","fullWidth","select","name","MenuItem","ref","Autocomplete","options","getOptionSelected","option","defaultValue","newValue","getOptionLabel","tenant","first_name","last_name","renderInput","params","Button","resetSearchForm","Typography","format","TRANSACTIONS_FILTER_OPTIONS","connect","state","transactions","payment","payment_type","charge","charge_type","contact","unitWithCharge","propertyUnits","unit_id","chargeDetails","tenant_id_number","id_number","chargePayments","charge_id","payed_status","payed_amount","reduce","total","currentValue","payment_amount","charge_amount","charge1","charge2","charge_date","leases","dispatch","handleItemSubmit","handleItemFormSubmit","handleItemDelete","itemId","rentCharges","setChargeItems","filteredChargeItems","setFilteredChargeItems","periodFilter","setPeriodFilter","fromDateFilter","setFromDateFilter","toDateFilter","setToDateFilter","commonStyles","tabValue","setTabValue","rentChargesWithBalances","totalRentCharges","totalRentPayments","dateRange","startOfPeriod","endOfPeriod","chargesForCurrentMonth","chargeItem","chargeItemDate","filteredRentCharges","handleRentChargeDelete","chargeId","security_deposit_charge_id","leaseWithChargeOnDeposit","securityDepositBeforePayment","security_deposit","leaseToEdit","pageTitle","AppBar","Tabs","Tab","chargePayment","payment_date","payment_label","charge_label","memo","payed","InputLabelProps","shrink","filterOption"],"mappings":"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","file":"static/js/13.a33e8817.chunk.js","sourcesContent":["import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * var result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 1, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import { endOfMonth, endOfYear, startOfToday, eachMonthOfInterval, startOfMonth, startOfYear, subMonths, subYears } from \"date-fns\";\n\nconst monthsInYear = eachMonthOfInterval({\n\tstart: startOfYear(startOfToday()),\n\tend: endOfYear(startOfToday()),\n})\n//general contact titles\nconst TITLES_LIST = [\"Mr\", \"Prof\", \"Hon\", \"Sir\", \"Mrs\", \"Miss\", \"Dr\", \"Madam\", \"Other\"]\nconst GENDERS_LIST = [\"Male\", \"Female\", \"Unspecified\"];\nconst EXPENSES_CATEGORIES = [\n\t'Security Deposit Refund',\n\t'Water Deposit Refund',\n\t'Management Fees',\n\t'Utilities',\n\t'Taxes',\n\t'Mortgage',\n\t'Office',\n\t'Maintenance & Cleaning',\n\t'Advertising',\n\t'Insurance',\n\t'Legal & Other Professional Fees',\n\t'Auto & Travel',\n\t'Supplies',\n\t'Other Refund',\n\t'Repairs',\n\t'Other'\n]\nconst PROPRERTY_TYPES = [\n\t\"Residential\",\n\t\"Condo/Townhouse\",\n\t\"Multi-family\",\n\t\"Single-family\",\n]\nconst UNIT_TYPES = [\n\t\"Bed Sitter\",\n\t\"One Bedroom\",\n\t\"Two Bedroom\",\n\t\"Single Room\",\n\t\"Double Room\",\n\t\"Shop\",\n\t\"Other\",\n];\nconst LEASE_OPTIONS = [\n\t\"Fixed\",\n\t\"Fixed w/rollover\",\n];\nconst METER_TYPES = [\"Electric\", \"Sewer\", \"Water\"];\nconst FREQUENCY_OPTIONS = [\"Per Day\", \"Week\", \"Month\", \"Quarter\", \"Half Year\", \"Year\"];\nconst PAYMENT_FREQUENCY_OPTIONS = [\"Daily\", \"Weekly\", \"Monthly\", \"Quarterly\", \"Half-Yearly\", \"Yearly\"];\n\n//functions to get the above values\nexport function getContactTitles() {\n\treturn TITLES_LIST;\n}\n\nexport function getGendersList() {\n\treturn GENDERS_LIST;\n}\n\nexport function getExpensesCategories() {\n\treturn EXPENSES_CATEGORIES;\n}\n\n//general property types\nexport function getPropertyTypes() {\n\treturn PROPRERTY_TYPES;\n}\n\n//general unit types\nexport function getUnitTypes() {\n\treturn UNIT_TYPES;\n}\n\nexport function getPropertyBaths() {\n\tconst baths = [];\n\tfor (let i = 1; i <= 5; i++) {\n\t\tbaths.push(i);\n\t}\n\treturn baths.concat(\"5+\");\n}\n\nexport function getPropertyBeds() {\n\tconst beds = [];\n\tfor (let i = 1; i <= 5; i++) {\n\t\tbeds.push(i);\n\t}\n\treturn beds;\n}\n\nexport function getFrequencyOptions() {\n\treturn FREQUENCY_OPTIONS;\n}\n\nexport function getMeterTypes() {\n\treturn METER_TYPES;\n}\n\nexport function getLeaseOptions() {\n\treturn LEASE_OPTIONS;\n}\n\nexport function getPaymentOptions() {\n\treturn PAYMENT_FREQUENCY_OPTIONS;\n}\n\nexport function getTransactionsFilterOptions() {\n\treturn [\n\t\t{ id: 'month-to-date', text: 'Month To Date' }, { id: 'last-month', text: 'Last Month' },\n\t\t{ id: '3-months-to-date', text: '3 Months To Date' }, { id: 'year-to-date', text: 'Year To Date' },\n\t\t{ id: 'last-year', text: 'Last Year' },];\n}\n\nexport function getLastMonthFromToDates() {\n\treturn [startOfMonth(subMonths(startOfToday(), 1)), endOfMonth(subMonths(startOfToday(), 1))]\n}\n\nexport function getLastYearFromToDates() {\n\treturn [startOfYear(subYears(startOfToday(), 1)), endOfYear(subYears(startOfToday(), 1))]\n}\n\nexport function getYearToDateFromToDates() {\n\treturn [startOfYear(startOfToday()), startOfToday()]\n}\n\nexport function getCurrentMonthFromToDates() {\n\treturn [startOfMonth(startOfToday()), endOfMonth(startOfToday())]\n}\n\nexport function getLastThreeMonthsFromToDates() {\n\treturn [startOfMonth(subMonths(startOfToday(), 2)), endOfMonth(startOfToday())]\n}\n\nexport function getMonthsInYear() {\n\treturn monthsInYear\n}\n\n// Create our number formatter.\nexport const currencyFormatter = new Intl.NumberFormat(undefined, {\n\tstyle: 'decimal',\n\tcurrency: 'KES',\n});\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\n\nfunction EnhancedTableHead(props) {\n    const {\n        classes,\n        onSelectAllClick,\n        order,\n        orderBy,\n        headCells,\n        numSelected,\n        rowCount,\n        onRequestSort,\n    } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={\n                            numSelected > 0 && numSelected < rowCount\n                        }\n                        checked={numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ \"aria-label\": \"select all\" }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? \"right\" : \"left\"}\n                        padding={headCell.disablePadding ? \"none\" : \"default\"}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={order}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === \"desc\"\n                                        ? \"sorted descending\"\n                                        : \"sorted ascending\"}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nexport default EnhancedTableHead;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nexport default useStyles;\n","\nfunction desc(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction stableSort(array, cmp) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = cmp(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nfunction getSorting(order, orderBy) {\n    return order === \"desc\"\n        ? (a, b) => desc(a, b, orderBy)\n        : (a, b) => -desc(a, b, orderBy);\n}\n\nexport { desc, stableSort, getSorting };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport TableBody from '@material-ui/core/TableBody';\nimport Table from '@material-ui/core/Table';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableCell from '@material-ui/core/TableCell';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DetailsIcon from \"@material-ui/icons/Details\";\nimport { withRouter } from \"react-router-dom\";\nimport EnhancedTableHead from \"./EnhancedTableHead\";\nimport useStyles from \"./tableStyles\";\nimport { stableSort, getSorting } from \"./tablesSortingFunctions\";\n\nfunction CommonTable(props) {\n    const {\n        rows,\n        headCells,\n        selected,\n        setSelected,\n        deleteUrl,\n        handleDelete,\n        noEditCol,\n        noDeleteCol,\n        noDetailsCol,\n    } = props;\n    const { match } = props;\n    const classes = useStyles();\n    const [order, setOrder] = React.useState(\"asc\");\n    const [orderBy, setOrderBy] = React.useState(\"Beds\");\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(50);\n\n    const handleRequestSort = (event, property) => {\n        const isDesc = orderBy === property && order === \"desc\";\n        setOrder(isDesc ? \"asc\" : \"desc\");\n        setOrderBy(property);\n    };\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.id);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, id) => {\n        event.stopPropagation();\n        const selectedIndex = selected.indexOf(id);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, id);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1)\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (id) => selected.indexOf(id) !== -1;\n\n    return (\n        <Box border={1} borderRadius=\"borderRadius\" borderColor=\"grey.400\">\n            <TableContainer>\n                <Table\n                    stickyHeader\n                    className={classes.table}\n                    aria-labelledby=\"tableTitle\"\n                    size={\"medium\"}\n                    aria-label=\"enhanced table\"\n                >\n                    <EnhancedTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        headCells={headCells}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getSorting(order, orderBy))\n                            .slice(\n                                page * rowsPerPage,\n                                page * rowsPerPage + rowsPerPage\n                            )\n                            .map((row, index) => {\n                                const isItemSelected = isSelected(row.id);\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        // onClick={() => {if(typeof tableRowOnClickHandler === 'function') tableRowOnClickHandler(row.id) }}\n                                        hover\n                                        role=\"checkbox\"\n                                        aria-checked={isItemSelected}\n                                        tabIndex={-1}\n                                        key={row.id}\n                                        selected={isItemSelected}\n                                    >\n                                        <TableCell padding=\"checkbox\">\n                                            <Checkbox\n                                                onClick={(event) =>\n                                                    handleClick(event, row.id)\n                                                }\n                                                checked={isItemSelected}\n                                                inputProps={{\n                                                    \"aria-labelledby\": labelId,\n                                                }}\n                                            />\n                                        </TableCell>\n                                        {headCells.map(\n                                            (headCell, tableCellIndex) => {\n                                                const tableCellData =\n                                                    row[headCell.id];\n                                                return (\n                                                    headCell.id === 'edit' ?\n                                                        (\n                                                            noEditCol ? null : (\n                                                                <TableCell\n                                                                    key={`edit${tableCellIndex}`}\n                                                                    component=\"th\"\n                                                                    scope=\"row\"\n                                                                    sortDirection={false}\n                                                                >\n                                                                    <Tooltip\n                                                                        title=\"Edit\"\n                                                                        placement=\"bottom\"\n                                                                    >\n                                                                        <IconButton\n                                                                            color=\"primary\"\n                                                                            size=\"small\"\n                                                                            component={Link}\n                                                                            to={`${match.url}/${row.id}/edit`}\n                                                                        >\n                                                                            <EditIcon fontSize=\"default\" />\n                                                                        </IconButton>\n                                                                    </Tooltip>\n                                                                </TableCell>\n                                                            )\n                                                        )\n                                                        : headCell.id === 'delete' ?\n                                                            (\n                                                                noDeleteCol ? null : (\n                                                                    <TableCell\n                                                                        key={`delete${tableCellIndex}`}\n                                                                        component=\"th\"\n                                                                        scope=\"row\"\n                                                                        sortDirection={false}\n                                                                    >\n                                                                        <Tooltip\n                                                                            title=\"Delete\"\n                                                                            placement=\"bottom\"\n                                                                        >\n                                                                            <IconButton\n                                                                                onClick={(event) => {\n                                                                                    handleDelete(\n                                                                                        row.id,\n                                                                                        deleteUrl\n                                                                                    );\n                                                                                }}\n                                                                                color=\"primary\"\n                                                                                size=\"small\"\n                                                                            >\n                                                                                <DeleteIcon fontSize=\"default\" />\n                                                                            </IconButton>\n                                                                        </Tooltip>\n                                                                    </TableCell>\n                                                                )\n                                                            )\n                                                            : headCell.id === 'details' ?\n                                                                (\n                                                                    !noDetailsCol ? null : (\n                                                                        <TableCell\n                                                                            key={`details${tableCellIndex}`}\n                                                                            component=\"th\"\n                                                                            scope=\"row\"\n                                                                            sortDirection={false}\n                                                                        >\n                                                                            <Tooltip\n                                                                                title=\"Details\"\n                                                                                placement=\"bottom\"\n                                                                            >\n                                                                                <IconButton\n                                                                                    color=\"primary\"\n                                                                                    size=\"small\"\n                                                                                    component={Link}\n                                                                                    to={`${match.url}/${row.id}/details`}\n                                                                                >\n                                                                                    <DetailsIcon fontSize=\"default\" />\n                                                                                </IconButton>\n                                                                            </Tooltip>\n                                                                        </TableCell>\n                                                                    )\n                                                                )\n                                                                :\n                                                                <TableCell\n                                                                    key={tableCellIndex}\n                                                                    component=\"th\"\n                                                                    id={labelId}\n                                                                    scope=\"row\"\n                                                                    padding=\"none\"\n                                                                >\n                                                                    {typeof tableCellData ===\n                                                                        \"boolean\"\n                                                                        ? tableCellData\n                                                                            ? \"Yes\"\n                                                                            : \"No\"\n                                                                        : tableCellData}\n                                                                </TableCell>\n                                                );\n                                            }\n                                        )}\n                                    </TableRow>\n                                );\n                            })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[50, 100, 200, 300]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </Box>\n    );\n}\n\nexport default withRouter(CommonTable);\n","import Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\nimport exportDataToXSL, { exportPropertyStatementDataToXSL } from \"../assets/PrintingHelper\";\nimport PropTypes from 'prop-types';\n\nfunction ExportToExcelBtn(props) {\n\tconst { disabled, reportName, reportTitle, headCells, dataToPrint } = props\n\treturn (\n\t\t<Button\n\t\t\ttype=\"button\"\n\t\t\taria-label=\"Export to Excel\"\n\t\t\tvariant=\"contained\"\n\t\t\tsize=\"medium\"\n\t\t\tcolor=\"primary\"\n\t\t\tdisabled={disabled}\n\t\t\tonClick={() => exportDataToXSL(reportName, reportTitle, headCells, dataToPrint, reportName)}\n\t\t\tstartIcon={<ImportExportIcon />}\n\t\t>\n\t\t\tExcel\n\t\t</Button >\n\t);\n}\n\nExportToExcelBtn.propTypes = {\n\treportName: PropTypes.string.isRequired,\n\treportTitle: PropTypes.string.isRequired,\n\theadCells: PropTypes.array.isRequired,\n\tdataToPrint: PropTypes.array.isRequired,\n}\n\nexport default ExportToExcelBtn;\n\nexport function ExportStatementToExcelBtn(props) {\n\tconst { displayText, disabled, reportName, reportTitle, headCells, dataToPrint } = props\n\treturn (\n\t\t<Button\n\t\t\ttype=\"button\"\n\t\t\taria-label=\"Export to Excel\"\n\t\t\tvariant=\"contained\"\n\t\t\tsize=\"medium\"\n\t\t\tcolor=\"primary\"\n\t\t\tdisabled={disabled}\n\t\t\tonClick={() => exportPropertyStatementDataToXSL(reportName, reportTitle, headCells, dataToPrint, reportName)}\n\t\t\tstartIcon={<ImportExportIcon />}\n\t\t>\n\t\t\t{ displayText ? displayText : \"Excel\"}\n\t\t</Button >\n\t);\n}\n\nExportStatementToExcelBtn.propTypes = {\n\treportName: PropTypes.string.isRequired,\n\treportTitle: PropTypes.string.isRequired,\n\theadCells: PropTypes.array.isRequired,\n\tdataToPrint: PropTypes.array.isRequired,\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12.5 8c-2.65 0-5.05.99-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88 3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8z\"\n}), 'Undo');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z\"\n}), 'Print');\n\nexports.default = _default;","import Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport { printDataRows } from \"../assets/PrintingHelper\";\nimport PropTypes from 'prop-types';\n\nfunction PrintArrayToPdfBtn (props) {\n    const { disabled, reportName, reportTitle, headCells, dataToPrint } = props\n    return (\n        <Button\n            type=\"button\"\n            aria-label=\"Print to Pdf\"\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"primary\"\n            disabled={disabled}\n            onClick={() => printDataRows(reportName, reportTitle, headCells, dataToPrint)}\n            startIcon={<PrintIcon />}\n        >\n            Pdf\n        </Button>\n    );\n}\n\nPrintArrayToPdfBtn.propTypes = {\n    reportName: PropTypes.string.isRequired,\n    reportTitle: PropTypes.string.isRequired,\n    headCells: PropTypes.array.isRequired,\n    dataToPrint: PropTypes.array.isRequired,\n}\n\nexport default PrintArrayToPdfBtn;\n","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * var result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * var result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * var result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addYears from '../addYears/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * var result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\n\nexport default function subYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addYears(dirtyDate, -amount);\n}","import React from 'react';\nimport Box from '@material-ui/core/Box';\n\nexport default function TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box m={2}>{children}</Box>}\n        </div>\n    );\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `isWithinRange` to `isWithinInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   isWithinRange(\n *     new Date(2014, 0, 3),\n *     new Date(2014, 0, 1), new Date(2014, 0, 7)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   isWithinInterval(\n *     new Date(2014, 0, 3),\n *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date to check\n * @param {Interval} interval - the interval to check\n * @returns {Boolean} the date is within the interval\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date }) // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end }) // => true\n */\n\nexport default function isWithinInterval(dirtyDate, dirtyInterval) {\n  requiredArgs(2, arguments);\n  var interval = dirtyInterval || {};\n  var time = toDate(dirtyDate).getTime();\n  var startTime = toDate(interval.start).getTime();\n  var endTime = toDate(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  return time >= startTime && time <= endTime;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * var result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addDays from '../addDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * var result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\n\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import React, { useEffect, useState } from \"react\";\nimport PageHeading from \"../components/PageHeading\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport ExportToExcelBtn from \"../components/ExportToExcelBtn\";\nimport PrintArrayToPdf from \"../components/PrintArrayToPdfBtn\";\nimport CommonTable from \"../components/table/commonTable\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { currencyFormatter } from \"../assets/commonAssets\";\nimport { parse, isWithinInterval, startOfToday, subDays } from \"date-fns\";\n\nconst headCells = [\n    { id: \"tenant_name\", numeric: false, disablePadding: true, label: \"Tenant\", },\n    { id: \"unit_ref\", numeric: false, disablePadding: true, label: \"Unit Ref/Number\", },\n    { id: \"last_thirty\", numeric: false, disablePadding: true, label: \"0-30 Days\" },\n    { id: \"last_sixty\", numeric: false, disablePadding: true, label: \"31-60 Days\" },\n    { id: \"last_ninety\", numeric: false, disablePadding: true, label: \"61-90 Days\" },\n    { id: \"ninety_plus\", numeric: false, disablePadding: true, label: \"90+ Days\" },\n    { id: \"totalTenantRentBalance\", numeric: false, disablePadding: true, label: \"Balance\" },\n\n];\n\nconst endOfLastThirtyDays = subDays(startOfToday(), 30);\nconst endOfLastSixtyDays = subDays(startOfToday(), 60);\nconst endOfLastNinetyDays = subDays(startOfToday(), 90);\nconst defaultEarliestTime = new Date(2000, 1, 1);\n\nlet RentBalancesPage = ({\n    properties,\n    contacts,\n    transactionsCharges,\n    classes\n}) => {\n    let [filteredMappedRentBalancesItems, setFilteredMappedRentalBalances] = useState([]);\n    let [mappedRentBalances, setMappedRentBalances] = useState([]);\n    let [contactFilter, setContactFilter] = useState(null);\n    let [propertyFilter, setPropertyFilter] = useState(\"all\");\n    let [totalBalancesAmount, setTotalBalancesAmount] = useState(0);\n    let [uniqueTenantsWithBalances, setUniqueTenantsWithBalances] = useState(0);\n\n    const [selected, setSelected] = useState([]);\n\n    useEffect(() => {\n        const uniqueTenantIdsWithCharges = new Set(transactionsCharges.map(rentCharge => rentCharge.tenant_id))\n        const tenantsWithCharges = transactionsCharges\n            .map(rentCharge => ({\n                id: rentCharge.tenant_id, tenant_id: rentCharge.tenant_id, tenant_name: rentCharge.tenant_name,\n                property_id: rentCharge.property_id,\n                unit_ref: rentCharge.unit_details\n            }))\n        let totalRentBalances = 0\n        const mappedTenantsRentBalances = Array.from(uniqueTenantIdsWithCharges).map(tenantId => {\n            const tenantDetails = tenantsWithCharges.find(({ tenant_id }) => tenant_id === tenantId) || {}\n            const tenantBalancesDetails = {}\n            let totalTenantRentBalance = 0\n            transactionsCharges.filter(({ tenant_id }) => tenant_id === tenantId).forEach(rentCharge => {\n                const rentChargeDueDate = parse(rentCharge.due_date, 'yyyy-MM-dd', new Date())\n                totalTenantRentBalance += parseFloat(rentCharge.balance) || 0\n                //check if due date is within a month ago\n                if (isWithinInterval(rentChargeDueDate, { start: endOfLastThirtyDays , end: startOfToday() })) {\n                    tenantBalancesDetails['last_thirty'] = rentCharge.balance\n                }\n                //check if due date is within 31-60 days ago\n                else if (isWithinInterval(rentChargeDueDate, { start: endOfLastSixtyDays, end: endOfLastThirtyDays })) {\n                    tenantBalancesDetails['last_sixty'] = rentCharge.balance\n                }\n                //check if due date is within 61-90 days ago\n                else if (isWithinInterval(rentChargeDueDate, { start: endOfLastNinetyDays, end: endOfLastSixtyDays })) {\n                    tenantBalancesDetails['last_ninety'] = rentCharge.balance\n                }\n                //check if due date is within 91+ days ago\n                else if (isWithinInterval(rentChargeDueDate, { start: defaultEarliestTime, end: endOfLastNinetyDays })) {\n                    tenantBalancesDetails['ninety_plus'] = rentCharge.balance\n                }\n            })\n            tenantBalancesDetails.totalTenantRentBalance = totalTenantRentBalance\n            totalRentBalances += totalTenantRentBalance\n            return Object.assign(tenantBalancesDetails, tenantDetails)\n        })\n        setUniqueTenantsWithBalances(uniqueTenantIdsWithCharges.size)\n        setTotalBalancesAmount(totalRentBalances)\n        setMappedRentBalances(mappedTenantsRentBalances)\n        setFilteredMappedRentalBalances(mappedTenantsRentBalances);\n    }, [transactionsCharges]);\n\n    const handleSearchFormSubmit = (event) => {\n        event.preventDefault();\n        //filter the transactionsCharges according to the search criteria here\n        const filteredMappedRentBalances = mappedRentBalances\n        .filter(({ tenant_id }) => !contactFilter ? true : tenant_id === contactFilter.id)\n        .filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter)\n        setFilteredMappedRentalBalances(filteredMappedRentBalances)\n    };\n\n\n    const resetSearchForm = (event) => {\n        event.preventDefault();\n        setContactFilter(null)\n        setPropertyFilter('all')\n        setFilteredMappedRentalBalances(mappedRentBalances)\n    };\n\n    return (\n        <Grid\n            container\n            spacing={2}\n            justify=\"center\" direction=\"column\"\n        >\n            <Grid item key={2}>\n                <PageHeading text={\"Outstanding Rent Balances\"} />\n            </Grid>\n            <Grid\n                container\n                spacing={2}\n                item\n                alignItems=\"center\"\n                direction=\"row\"\n                key={1}\n            >\n                <Grid item>\n                    <ExportToExcelBtn\n                        disabled={!selected.length}\n                        reportName={`Tenants Outstanding Rent Balances Records`}\n                        reportTitle={'Tenants Outstanding Rent Balances Data'}\n                        headCells={headCells}\n                        dataToPrint={mappedRentBalances.filter(({ id }) => selected.includes(id))}\n                    />\n                </Grid>\n                <Grid item>\n                    <PrintArrayToPdf\n                        disabled={!selected.length}\n                        reportName={'Tenants Outstanding Rent Balances Data'}\n                        reportTitle={`Tenants Outstanding Rent Balances Records`}\n                        headCells={headCells}\n                        dataToPrint={mappedRentBalances.filter(({ id }) => selected.includes(id))}\n                    />\n                </Grid>\n            </Grid>\n            <Grid item container>\n                <Grid item sm={12}>\n                    <Box\n                        border={1}\n                        borderRadius=\"borderRadius\"\n                        borderColor=\"grey.400\"\n                    >\n                        <form\n                            className={classes.form}\n                            id=\"contactSearchForm\"\n                            onSubmit={handleSearchFormSubmit}\n                        >\n                            <Grid\n                                container\n                                spacing={2}\n                                justify=\"center\"\n                                direction=\"column\"\n                            >\n                                <Grid item container direction=\"column\">\n                                    <Grid item container direction=\"row\" spacing={2}>\n                                        <Grid item xs={12} md={6}>\n                                            <TextField\n                                                fullWidth\n                                                select\n                                                variant=\"outlined\"\n                                                name=\"property_filter\"\n                                                label=\"Property\"\n                                                id=\"property_filter\"\n                                                onChange={(event) => {\n                                                    setPropertyFilter(\n                                                        event.target.value\n                                                    );\n                                                }}\n                                                value={propertyFilter}\n                                            >\n                                                <MenuItem key={\"all\"} value={\"all\"}>All Properties</MenuItem>\n                                                {properties.map(\n                                                    (property, index) => (\n                                                        <MenuItem\n                                                            key={index}\n                                                            value={property.id}\n                                                        >\n                                                            {property.ref}\n                                                        </MenuItem>\n                                                    )\n                                                )}\n                                            </TextField>\n                                        </Grid>\n                                        <Grid item xs={12} md={6}>\n                                            <Autocomplete\n                                                id=\"contact_filter\"\n                                                options={contacts}\n                                                getOptionSelected={(option, value) => option.id === value.id}\n                                                name=\"contact_filter\"\n                                                defaultValue=\"\"\n                                                onChange={(event, newValue) => {\n                                                    setContactFilter(newValue);\n                                                }}\n                                                value={contactFilter}\n                                                getOptionLabel={(tenant) => tenant ? `${tenant.first_name} ${tenant.last_name}` : ''}\n                                                style={{ width: \"100%\" }}\n                                                renderInput={(params) => <TextField {...params} label=\"Tenant\" variant=\"outlined\" />}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid\n                                    container\n                                    spacing={2}\n                                    item\n                                    justify=\"flex-end\"\n                                    alignItems=\"center\"\n                                    direction=\"row\"\n                                    key={1}\n                                >\n                                    <Grid item>\n                                        <Button\n                                            onClick={(event) => handleSearchFormSubmit(event)}\n                                            type=\"submit\"\n                                            form=\"contactSearchForm\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<SearchIcon />}\n                                        >\n                                            SEARCH\n                                    </Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            onClick={(event) => resetSearchForm(event)}\n                                            type=\"reset\"\n                                            form=\"contactSearchForm\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<UndoIcon />}\n                                        >\n                                            RESET\n                                    </Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </form>\n                    </Box>\n                </Grid>\n            </Grid>\n            <Grid item container>\n                <Grid item sm={12}>\n                    <Box border={1} borderRadius=\"borderRadius\" borderColor=\"grey.400\" className={classes.form}>\n                        <Grid container direction=\"row\" spacing={1}>\n                            <Grid item container md={6}>\n                                <Grid item sm={12}>\n                                    <Typography variant=\"subtitle1\" align=\"center\">\n                                        Total Balances Amount: {currencyFormatter.format(totalBalancesAmount)}\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                            <Grid item container md={6}>\n                                <Grid item sm={12}>\n                                    <Typography variant=\"subtitle1\" align=\"center\">\n                                        Unique Tenants With Balances: {uniqueTenantsWithBalances}\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Grid>\n            </Grid>\n            <Grid item container>\n                <Grid item sm={12}>\n                    <CommonTable\n                        selected={selected}\n                        setSelected={setSelected}\n                        rows={filteredMappedRentBalancesItems}\n                        headCells={headCells}\n                        noDetailsCol={true}\n                        noEditCol={true}\n                        noDeleteCol={true}\n                    />\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default RentBalancesPage;\n","import Grid from \"@material-ui/core/Grid\";\nimport React, { useEffect, useState } from \"react\";\nimport TabPanel from \"../components/TabPanel\";\nimport Tab from '@material-ui/core/Tab';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport PrintArrayToPdf from \"../components/PrintArrayToPdfBtn\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { Link } from \"react-router-dom\";\nimport ExportToExcelBtn from \"../components/ExportToExcelBtn\";\nimport CommonTable from \"../components/table/commonTable\";\nimport { connect } from \"react-redux\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport Layout from \"../components/PrivateLayout\";\nimport PageHeading from \"../components/PageHeading\";\nimport RentBalancesPage from \"./RentBalancesPage\";\nimport { handleItemFormSubmit, handleDelete } from '../actions/actions'\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { getTransactionsFilterOptions, currencyFormatter, getCurrentMonthFromToDates, getLastMonthFromToDates, getLastThreeMonthsFromToDates, getLastYearFromToDates, getYearToDateFromToDates } from \"../assets/commonAssets\";\nimport { parse, isWithinInterval } from \"date-fns\";\nconst TRANSACTIONS_FILTER_OPTIONS = getTransactionsFilterOptions()\n\n\n\nconst headCells = [\n    { id: \"unit_details\", numeric: false, disablePadding: true, label: \"Unit Details\", },\n    { id: \"tenant_name\", numeric: false, disablePadding: true, label: \"Tenant Name\", },\n    { id: \"tenant_id_number\", numeric: false, disablePadding: true, label: \"Tenant ID\", },\n    { id: \"due_date\", numeric: false, disablePadding: true, label: \"Rent Due Date\", },\n    { id: \"charge_amount\", numeric: false, disablePadding: true, label: \"Rent Charge Amount\", },\n    { id: \"payed_status\", numeric: false, disablePadding: true, label: \"Payments Made\" },\n    { id: \"payed_amount\", numeric: false, disablePadding: true, label: \"Total Amounts Paid\" },\n    { id: \"balance\", numeric: false, disablePadding: true, label: \"Rent Balance\" },\n    { id: \"delete\", numeric: false, disablePadding: true, label: \"Delete\" },\n];\n\nlet RentRollPage = ({\n    transactionsCharges,\n    properties,\n    contacts,\n    leases,\n    transactions,\n    handleItemSubmit,\n    handleItemDelete\n}) => {\n    let [rentCharges, setChargeItems] = useState([]);\n    let [filteredChargeItems, setFilteredChargeItems] = useState([]);\n    let [propertyFilter, setPropertyFilter] = useState(\"all\");\n    let [contactFilter, setContactFilter] = useState(null);\n    let [periodFilter, setPeriodFilter] = useState(\"month-to-date\");\n    let [fromDateFilter, setFromDateFilter] = useState('');\n    let [toDateFilter, setToDateFilter] = useState(\"\");\n    const [selected, setSelected] = useState([]);\n    const classes = commonStyles();\n\n    const [tabValue, setTabValue] = React.useState(0);\n\n    const handleTabChange = (event, newValue) => {\n        setTabValue(newValue);\n    };\n\n    const rentChargesWithBalances = rentCharges.filter(rentCharge => rentCharge.balance > 0)\n\n    const totalRentCharges = filteredChargeItems\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.charge_amount) || 0\n        }, 0)\n\n    const totalRentPayments = filteredChargeItems\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.payed_amount) || 0\n        }, 0)\n\n    useEffect(() => {\n        const dateRange = getCurrentMonthFromToDates()\n        const startOfPeriod = dateRange[0]\n        const endOfPeriod = dateRange[1]\n        const chargesForCurrentMonth = transactionsCharges.filter((chargeItem) => {\n            const chargeItemDate = parse(chargeItem.charge_date, 'yyyy-MM-dd', new Date())\n            return isWithinInterval(chargeItemDate, { start: startOfPeriod, end: endOfPeriod })\n        })\n        setChargeItems(chargesForCurrentMonth);\n        setFilteredChargeItems(chargesForCurrentMonth);\n    }, [transactionsCharges]);\n\n    const handleSearchFormSubmit = (event) => {\n        event.preventDefault();\n        //filter the charges according to the search criteria here\n        let filteredRentCharges = transactionsCharges\n        let dateRange = []\n        let startOfPeriod;\n        let endOfPeriod;\n        switch (periodFilter) {\n            case 'last-month':\n                dateRange = getLastMonthFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n                break;\n            case 'year-to-date':\n                dateRange = getYearToDateFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n                break;\n            case 'last-year':\n                dateRange = getLastYearFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n                break;\n            case 'month-to-date':\n                dateRange = getCurrentMonthFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n                break;\n            case '3-months-to-date':\n                dateRange = getLastThreeMonthsFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n                break;\n            default:\n                dateRange = getLastMonthFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n        }\n        filteredRentCharges = filteredRentCharges.filter((chargeItem) => {\n            const chargeItemDate = parse(chargeItem.charge_date, 'yyyy-MM-dd', new Date())\n            return isWithinInterval(chargeItemDate, { start: startOfPeriod, end: endOfPeriod })\n        })\n        filteredRentCharges = filteredRentCharges\n            .filter(({ charge_date }) => !fromDateFilter ? true : charge_date >= fromDateFilter)\n            .filter(({ charge_date }) => !toDateFilter ? true : charge_date <= toDateFilter)\n            .filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter)\n            .filter(({ tenant_id }) => !contactFilter ? true : tenant_id === contactFilter.id)\n        setFilteredChargeItems(filteredRentCharges);\n    };\n\n    const resetSearchForm = (event) => {\n        event.preventDefault();\n        setFilteredChargeItems(rentCharges);\n        setPropertyFilter(\"all\");\n        setContactFilter(null);\n        setPeriodFilter(\"month-to-date\");\n        setFromDateFilter(\"\");\n        setToDateFilter(\"\");\n    };\n\n    const setChargesPaidInFull = () => {\n        const chargesToAddPayments = transactionsCharges.filter(({ id }) => selected.includes(id))\n            .filter(({ payed_status }) => payed_status === false)\n        //post the charges here to show that they are payed\n        chargesToAddPayments.forEach(async (charge) => {\n            const chargePayment = {\n                charge_id: charge.id,\n                payment_amount: charge.charge_amount,\n                payment_date: charge.due_date,\n                tenant_id: charge.tenant_id,\n                unit_id: charge.unit_id,\n                property_id: charge.property_id,\n                payment_label: charge.charge_label,\n                memo: \"Rent Payment\",\n                payment_type: charge.charge_type,\n            };\n            await handleItemSubmit(chargePayment, 'charge-payments')\n            await handleItemSubmit({ id: charge.id, payed: true }, 'transactions-charges')\n        })\n    }\n\n    const handleRentChargeDelete = async (chargeId, url) => {\n        transactions.filter((payment) => payment.charge_id === chargeId).forEach(async payment => {\n            await handleItemDelete(payment.id, \"charge-payments\")\n            if (payment.security_deposit_charge_id) {\n                const leaseWithChargeOnDeposit = leases.find(({ id }) => id === payment.security_deposit_charge_id)\n                if (leaseWithChargeOnDeposit) {\n                    const securityDepositBeforePayment = parseFloat(leaseWithChargeOnDeposit.security_deposit) + parseFloat(payment.payment_amount)\n                    const leaseToEdit = {\n                        id: payment.security_deposit_charge_id,\n                        security_deposit: securityDepositBeforePayment\n                    }\n                    await handleItemSubmit(leaseToEdit, 'leases')\n                }\n            }\n        });\n        await handleItemDelete(chargeId, url)\n    }\n\n    return (\n        <Layout pageTitle=\"Rent Charges Roll\">\n            <AppBar position=\"static\">\n                <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"simple tabs example\">\n                    <Tab label=\"Rent Charges Roll\" />\n                    <Tab label=\"Rent Outstanding Balances\" />\n                </Tabs>\n            </AppBar>\n            <TabPanel value={tabValue} index={1}>\n                <RentBalancesPage transactionsCharges={rentChargesWithBalances} properties={properties}\n                    contacts={contacts} classes={classes} />\n            </TabPanel>\n            <TabPanel value={tabValue} index={0}>\n                <Grid\n                    container\n                    spacing={3}\n                    justify=\"center\" direction=\"column\"\n                >\n                    <Grid item key={2}>\n                        <PageHeading text={\"Rent Charges Roll\"} />\n                    </Grid>\n                    <Grid\n                        container\n                        spacing={2}\n                        item\n                        alignItems=\"center\"\n                        direction=\"row\"\n                        key={1}\n                    >\n                        <Grid item>\n                            <Button\n                                type=\"button\"\n                                color=\"primary\"\n                                variant=\"contained\"\n                                size=\"medium\"\n                                startIcon={<AddIcon />}\n                                disabled={!selected.length}\n                                onClick={() => setChargesPaidInFull()}\n                            >\n                                Receive Full Payments\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                type=\"button\"\n                                color=\"primary\"\n                                variant=\"contained\"\n                                size=\"medium\"\n                                disabled={!selected.length}\n                                startIcon={<AddIcon />}\n                                component={Link}\n                                to={`/app/payments/${selected[0]}/new`}\n                            >\n                                Receive Payment\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                type=\"button\"\n                                color=\"primary\"\n                                variant=\"contained\"\n                                size=\"medium\"\n                                disabled={!selected.length}\n                                startIcon={<AddIcon />}\n                                to={`/app/payments/${selected[0]}/new?charge_deposit=1`}\n                                component={Link}\n                            >\n                                Charge on Deposit\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <PrintArrayToPdf\n                                disabled={!selected.length}\n                                reportName={'Rent Charges Roll Records'}\n                                reportTitle={'Rent Charges Roll Data'}\n                                headCells={headCells}\n                                dataToPrint={rentCharges.filter(({ id }) => selected.includes(id))}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <ExportToExcelBtn\n                                disabled={!selected.length}\n                                reportName={'Rent Charges Roll Records'}\n                                reportTitle={'Rent Charges Roll Data'}\n                                headCells={headCells}\n                                dataToPrint={rentCharges.filter(({ id }) => selected.includes(id))}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Box\n                            border={1}\n                            borderRadius=\"borderRadius\"\n                            borderColor=\"grey.400\"\n                        >\n                            <form\n                                className={classes.form}\n                                id=\"rentRollSearchForm\"\n                                onSubmit={handleSearchFormSubmit}\n                            >\n                                <Grid\n                                    container\n                                    spacing={2}\n                                    justify=\"center\"\n                                >\n                                    <Grid item container spacing={2}>\n                                        <Grid item container direction=\"row\" spacing={2}>\n                                            <Grid item container xs={12} md={6} direction=\"row\" spacing={2}>\n                                                <Grid item xs={12} md={6}>\n                                                    <TextField\n                                                        fullWidth\n                                                        variant=\"outlined\"\n                                                        type=\"date\"\n                                                        id=\"from_date_filter\"\n                                                        name=\"from_date_filter\"\n                                                        label=\"From Date\"\n                                                        value={fromDateFilter}\n                                                        onChange={(event) => {\n                                                            setFromDateFilter(\n                                                                event.target.value\n                                                            );\n                                                        }}\n                                                        InputLabelProps={{ shrink: true }}\n                                                    />\n                                                </Grid>\n                                                <Grid item xs={12} md={6}>\n                                                    <TextField\n                                                        fullWidth\n                                                        variant=\"outlined\"\n                                                        type=\"date\"\n                                                        name=\"to_date_filter\"\n                                                        label=\"To Date\"\n                                                        id=\"to_date_filter\"\n                                                        onChange={(event) => {\n                                                            setToDateFilter(event.target.value);\n                                                        }}\n                                                        value={toDateFilter}\n                                                        InputLabelProps={{ shrink: true }}\n                                                    />\n                                                </Grid>\n                                            </Grid>\n                                            <Grid item xs={12} md={6}>\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"outlined\"\n                                                    select\n                                                    id=\"period_filter\"\n                                                    name=\"period_filter\"\n                                                    label=\"Period\"\n                                                    value={periodFilter}\n                                                    onChange={(event) => {\n                                                        setPeriodFilter(\n                                                            event.target.value\n                                                        );\n                                                    }}\n                                                    InputLabelProps={{ shrink: true }}\n                                                >\n                                                    {TRANSACTIONS_FILTER_OPTIONS.map((filterOption, index) => (\n                                                        <MenuItem\n                                                            key={index}\n                                                            value={filterOption.id}\n                                                        >\n                                                            {filterOption.text}\n                                                        </MenuItem>\n                                                    ))}\n                                                </TextField>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item container direction=\"row\" spacing={2}>\n                                            <Grid item md={6} xs={12}>\n                                                <TextField\n                                                    fullWidth\n                                                    select\n                                                    variant=\"outlined\"\n                                                    name=\"property_filter\"\n                                                    label=\"Property\"\n                                                    id=\"property_filter\"\n                                                    onChange={(event) => {\n                                                        setPropertyFilter(\n                                                            event.target.value\n                                                        );\n                                                    }}\n                                                    value={propertyFilter}\n                                                >\n                                                    <MenuItem key={\"all\"} value={\"all\"}>All Properties</MenuItem>\n                                                    {properties.map(\n                                                        (property, index) => (\n                                                            <MenuItem\n                                                                key={index}\n                                                                value={property.id}\n                                                            >\n                                                                {property.ref}\n                                                            </MenuItem>\n                                                        )\n                                                    )}\n                                                </TextField>\n                                            </Grid>\n                                            <Grid item xs={12} md={6}>\n                                                <Autocomplete\n                                                    id=\"contact_filter\"\n                                                    options={contacts}\n                                                    getOptionSelected={(option, value) => option.id === value.id}\n                                                    name=\"contact_filter\"\n                                                    onChange={(event, newValue) => {\n                                                        setContactFilter(newValue);\n                                                    }}\n                                                    value={contactFilter}\n                                                    getOptionLabel={(tenant) => tenant ? `${tenant.first_name} ${tenant.last_name}` : ''}\n                                                    style={{ width: \"100%\" }}\n                                                    renderInput={(params) => <TextField {...params} label=\"Tenant\" variant=\"outlined\" />}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid\n                                        container\n                                        spacing={2}\n                                        item\n                                        justify=\"flex-end\"\n                                        alignItems=\"center\"\n                                        direction=\"row\"\n                                        key={1}\n                                    >\n                                        <Grid item>\n                                            <Button\n                                                onClick={(event) => handleSearchFormSubmit(event)}\n                                                type=\"submit\"\n                                                form=\"rentRollSearchForm\"\n                                                color=\"primary\"\n                                                variant=\"contained\"\n                                                size=\"medium\"\n                                                startIcon={<SearchIcon />}\n                                            >\n                                                SEARCH\n                                    </Button>\n                                        </Grid>\n                                        <Grid item>\n                                            <Button\n                                                onClick={(event) => resetSearchForm(event)}\n                                                type=\"reset\"\n                                                form=\"rentRollSearchForm\"\n                                                color=\"primary\"\n                                                variant=\"contained\"\n                                                size=\"medium\"\n                                                startIcon={<UndoIcon />}\n                                            >\n                                                RESET\n                                    </Button>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </form>\n                        </Box>\n                    </Grid>\n                    <Grid item>\n                        <Box border={1} borderRadius=\"borderRadius\" borderColor=\"grey.400\" className={classes.form}>\n                            <Grid container direction=\"row\" spacing={1}>\n                                <Grid item container md={4}>\n                                    <Grid item sm={12}>\n                                        <Typography variant=\"subtitle1\" align=\"center\">\n                                            Total Rent Charges: {currencyFormatter.format(totalRentCharges)}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                                <Grid item container md={4}>\n                                    <Grid item sm={12}>\n                                        <Typography variant=\"subtitle1\" align=\"center\">\n                                            Total Rent Payments: {currencyFormatter.format(totalRentPayments)}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                                <Grid item container md={4}>\n                                    <Grid item sm={12}>\n                                        <Typography variant=\"subtitle1\" align=\"center\">\n                                            Outstanding Rent Balances: {currencyFormatter.format((totalRentCharges - totalRentPayments))}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <CommonTable\n                            selected={selected}\n                            setSelected={setSelected}\n                            rows={filteredChargeItems}\n                            headCells={headCells}\n                            noEditCol={true}\n                            noDetailsCol={true}\n                            deleteUrl={'transactions-charges'}\n                            handleDelete={handleRentChargeDelete}\n                        />\n                    </Grid>\n                </Grid>\n            </TabPanel>\n        </Layout>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        properties: state.properties,\n        transactions: state.transactions.filter((payment) => payment.payment_type === 'rent'),\n        transactionsCharges: state.transactionsCharges\n            .filter((charge) => charge.charge_type === 'rent')\n            .map((charge) => {\n                const tenant = state.contacts.find((contact) => contact.id === charge.tenant_id) || {};\n                const unitWithCharge = state.propertyUnits.find(({ id }) => id === charge.unit_id) || {};\n                const chargeDetails = {}\n                chargeDetails.tenant_name = `${tenant.first_name} ${tenant.last_name}`\n                chargeDetails.tenant_id_number = tenant.id_number\n                const chargePayments = state.transactions.filter((payment) => payment.charge_id === charge.id)\n                chargeDetails.payed_status = chargePayments.length ? true : false;\n                const payed_amount = chargePayments.reduce((total, currentValue) => {\n                    return total + parseFloat(currentValue.payment_amount) || 0\n                }, 0)\n                chargeDetails.payed_amount = payed_amount\n                chargeDetails.balance = parseFloat(charge.charge_amount) - payed_amount\n                const property = state.properties.find(property => property.id === charge.property_id) || {}\n                chargeDetails.unit_details = `${property.ref} - ${unitWithCharge.ref}`;\n                return Object.assign({}, charge, chargeDetails);\n            }).sort((charge1, charge2) => parse(charge2.charge_date, 'yyyy-MM-dd', new Date()) -\n                parse(charge1.charge_date, 'yyyy-MM-dd', new Date())),\n        contacts: state.contacts,\n        leases: state.leases,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleItemSubmit: (item, url) => dispatch(handleItemFormSubmit(item, url)),\n        handleItemDelete: (itemId, url) => dispatch(handleDelete(itemId, url)),\n    }\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RentRollPage);\n"],"sourceRoot":""}