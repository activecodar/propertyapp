{"version":3,"sources":["assets/commonAssets.js","components/table/EnhancedTableHead.js","components/table/tableStyles.js","components/table/tablesSortingFunctions.js","components/table/commonTable.js","components/ExportToExcelBtn.js","components/PrintArrayToPdfBtn.js","Routes/MeterReadings.js"],"names":["monthsInYear","eachMonthOfInterval","start","startOfYear","startOfToday","end","endOfYear","TITLES_LIST","GENDERS_LIST","EXPENSES_CATEGORIES","UNIT_TYPES","LEASE_OPTIONS","METER_TYPES","PAYMENT_FREQUENCY_OPTIONS","getContactTitles","getGendersList","getExpensesCategories","getUnitTypes","getPropertyBaths","baths","i","push","concat","getPropertyBeds","beds","getMeterTypes","getLeaseOptions","getPaymentOptions","getTransactionsFilterOptions","id","text","getLastMonthFromToDates","startOfMonth","subMonths","endOfMonth","getLastYearFromToDates","subYears","getYearToDateFromToDates","getCurrentMonthFromToDates","getLastThreeMonthsFromToDates","getMonthsInYear","currencyFormatter","Intl","NumberFormat","undefined","style","currency","EnhancedTableHead","props","classes","onSelectAllClick","order","orderBy","headCells","numSelected","rowCount","onRequestSort","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","checked","onChange","inputProps","map","headCell","key","align","numeric","disablePadding","sortDirection","TableSortLabel","active","direction","onClick","property","event","label","className","visuallyHidden","useStyles","makeStyles","theme","root","width","paper","marginBottom","spacing","table","minWidth","border","clip","height","margin","overflow","position","top","desc","a","b","withRouter","rows","selected","setSelected","deleteUrl","handleDelete","noEditCol","noDeleteCol","noDetailsCol","match","React","useState","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","Box","borderRadius","borderColor","TableContainer","Table","stickyHeader","aria-labelledby","size","aria-label","length","target","newSelecteds","n","TableBody","array","cmp","stabilizedThis","el","index","sort","stableSort","getSorting","slice","row","isItemSelected","indexOf","labelId","hover","role","aria-checked","tabIndex","stopPropagation","selectedIndex","newSelected","handleClick","tableCellIndex","tableCellData","component","scope","Tooltip","title","placement","IconButton","color","Link","to","url","fontSize","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","value","ExportStatementToExcelBtn","displayText","disabled","reportName","reportTitle","dataToPrint","type","variant","exportPropertyStatementDataToXSL","startIcon","ExportToExcelBtn","exportDataToXSL","PrintArrayToPdfBtn","printDataRows","TRANSACTIONS_FILTER_OPTIONS","meterReadingsTableHeadCells","MeterReadingsPage","meterReadings","handleItemDelete","properties","commonStyles","meterReadingItems","setMeterReadingItems","filteredMeterReadingItems","setFilteredMeterReadingItems","fromDateFilter","setFromDateFilter","periodFilter","setPeriodFilter","toDateFilter","setToDateFilter","meterTypeFilter","setMeterTypeFilter","propertyFilter","setPropertyFilter","METER_TYPE_OPTIONS","Array","from","Set","meterReading","meter_type","useEffect","dateRange","startOfPeriod","endOfPeriod","currentMonthMeterReadings","filter","readingDate","parse","reading_date","Date","isWithinInterval","handleSearchFormSubmit","preventDefault","filteredMeterReadings","meterReadingDate","pageTitle","container","alignItems","item","lg","includes","xs","form","onSubmit","justify","md","fullWidth","name","InputLabelProps","shrink","select","ref","filterOption","resetSearchForm","connect","state","reading","tenant","contacts","find","contact","tenant_id","unit","propertyUnits","unit_id","Object","assign","tenant_name","first_name","last_name","tenant_id_number","id_number","unit_ref","meterReading1","meterReading2","dispatch","itemId"],"mappings":"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","file":"static/js/38.6c3f6f3d.chunk.js","sourcesContent":["import { endOfMonth, endOfYear, startOfToday, eachMonthOfInterval, startOfMonth, startOfYear, subMonths, subYears } from \"date-fns\";\n\nconst monthsInYear = eachMonthOfInterval({\n\tstart: startOfYear(startOfToday()),\n\tend: endOfYear(startOfToday()),\n})\n//general contact titles\nconst TITLES_LIST = [\"Mr\", \"Prof\", \"Hon\", \"Sir\", \"Mrs\", \"Miss\", \"Dr\", \"Madam\", \"Other\"]\nconst GENDERS_LIST = [\"Male\", \"Female\", \"Unspecified\"];\nconst EXPENSES_CATEGORIES = [\n\t'Security Deposit Refund',\n\t'Water Deposit Refund',\n\t'Management Fees',\n\t'Utilities',\n\t'Taxes',\n\t'Mortgage',\n\t'Office',\n\t'Maintenance & Cleaning',\n\t'Advertising',\n\t'Insurance',\n\t'Legal & Other Professional Fees',\n\t'Auto & Travel',\n\t'Supplies',\n\t'Other Refund',\n\t'Repairs',\n\t'Other'\n]\nconst PROPRERTY_TYPES = [\n\t\"Residential\",\n\t\"Condo/Townhouse\",\n\t\"Multi-family\",\n\t\"Single-family\",\n]\nconst UNIT_TYPES = [\n\t\"Bed Sitter\",\n\t\"One Bedroom\",\n\t\"Two Bedroom\",\n\t\"Single Room\",\n\t\"Double Room\",\n\t\"Shop\",\n\t\"Other\",\n];\nconst LEASE_OPTIONS = [\n\t\"Fixed\",\n\t\"Fixed w/rollover\",\n];\nconst METER_TYPES = [\"Electric\", \"Sewer\", \"Water\"];\nconst FREQUENCY_OPTIONS = [\"Per Day\", \"Week\", \"Month\", \"Quarter\", \"Half Year\", \"Year\"];\nconst PAYMENT_FREQUENCY_OPTIONS = [\"Daily\", \"Weekly\", \"Monthly\", \"Quarterly\", \"Half-Yearly\", \"Yearly\"];\n\n//functions to get the above values\nexport function getContactTitles() {\n\treturn TITLES_LIST;\n}\n\nexport function getGendersList() {\n\treturn GENDERS_LIST;\n}\n\nexport function getExpensesCategories() {\n\treturn EXPENSES_CATEGORIES;\n}\n\n//general property types\nexport function getPropertyTypes() {\n\treturn PROPRERTY_TYPES;\n}\n\n//general unit types\nexport function getUnitTypes() {\n\treturn UNIT_TYPES;\n}\n\nexport function getPropertyBaths() {\n\tconst baths = [];\n\tfor (let i = 1; i <= 5; i++) {\n\t\tbaths.push(i);\n\t}\n\treturn baths.concat(\"5+\");\n}\n\nexport function getPropertyBeds() {\n\tconst beds = [];\n\tfor (let i = 1; i <= 5; i++) {\n\t\tbeds.push(i);\n\t}\n\treturn beds;\n}\n\nexport function getFrequencyOptions() {\n\treturn FREQUENCY_OPTIONS;\n}\n\nexport function getMeterTypes() {\n\treturn METER_TYPES;\n}\n\nexport function getLeaseOptions() {\n\treturn LEASE_OPTIONS;\n}\n\nexport function getPaymentOptions() {\n\treturn PAYMENT_FREQUENCY_OPTIONS;\n}\n\nexport function getTransactionsFilterOptions() {\n\treturn [\n\t\t{ id: 'month-to-date', text: 'Month To Date' }, { id: 'last-month', text: 'Last Month' },\n\t\t{ id: '3-months-to-date', text: '3 Months To Date' }, { id: 'year-to-date', text: 'Year To Date' },\n\t\t{ id: 'last-year', text: 'Last Year' },];\n}\n\nexport function getLastMonthFromToDates() {\n\treturn [startOfMonth(subMonths(startOfToday(), 1)), endOfMonth(subMonths(startOfToday(), 1))]\n}\n\nexport function getLastYearFromToDates() {\n\treturn [startOfYear(subYears(startOfToday(), 1)), endOfYear(subYears(startOfToday(), 1))]\n}\n\nexport function getYearToDateFromToDates() {\n\treturn [startOfYear(startOfToday()), startOfToday()]\n}\n\nexport function getCurrentMonthFromToDates() {\n\treturn [startOfMonth(startOfToday()), endOfMonth(startOfToday())]\n}\n\nexport function getLastThreeMonthsFromToDates() {\n\treturn [startOfMonth(subMonths(startOfToday(), 2)), endOfMonth(startOfToday())]\n}\n\nexport function getMonthsInYear() {\n\treturn monthsInYear\n}\n\n// Create our number formatter.\nexport const currencyFormatter = new Intl.NumberFormat(undefined, {\n\tstyle: 'decimal',\n\tcurrency: 'KES',\n});\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\n\nfunction EnhancedTableHead(props) {\n    const {\n        classes,\n        onSelectAllClick,\n        order,\n        orderBy,\n        headCells,\n        numSelected,\n        rowCount,\n        onRequestSort,\n    } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={\n                            numSelected > 0 && numSelected < rowCount\n                        }\n                        checked={numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ \"aria-label\": \"select all\" }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? \"right\" : \"left\"}\n                        padding={headCell.disablePadding ? \"none\" : \"default\"}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={order}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === \"desc\"\n                                        ? \"sorted descending\"\n                                        : \"sorted ascending\"}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nexport default EnhancedTableHead;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nexport default useStyles;\n","\nfunction desc(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction stableSort(array, cmp) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = cmp(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nfunction getSorting(order, orderBy) {\n    return order === \"desc\"\n        ? (a, b) => desc(a, b, orderBy)\n        : (a, b) => -desc(a, b, orderBy);\n}\n\nexport { desc, stableSort, getSorting };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport TableBody from '@material-ui/core/TableBody';\nimport Table from '@material-ui/core/Table';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableCell from '@material-ui/core/TableCell';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DetailsIcon from \"@material-ui/icons/Details\";\nimport { withRouter } from \"react-router-dom\";\nimport EnhancedTableHead from \"./EnhancedTableHead\";\nimport useStyles from \"./tableStyles\";\nimport { stableSort, getSorting } from \"./tablesSortingFunctions\";\n\nfunction CommonTable(props) {\n    const {\n        rows,\n        headCells,\n        selected,\n        setSelected,\n        deleteUrl,\n        handleDelete,\n        noEditCol,\n        noDeleteCol,\n        noDetailsCol,\n    } = props;\n    const { match } = props;\n    const classes = useStyles();\n    const [order, setOrder] = React.useState(\"asc\");\n    const [orderBy, setOrderBy] = React.useState(\"Beds\");\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(50);\n\n    const handleRequestSort = (event, property) => {\n        const isDesc = orderBy === property && order === \"desc\";\n        setOrder(isDesc ? \"asc\" : \"desc\");\n        setOrderBy(property);\n    };\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.id);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, id) => {\n        event.stopPropagation();\n        const selectedIndex = selected.indexOf(id);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, id);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1)\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (id) => selected.indexOf(id) !== -1;\n\n    return (\n        <Box border={1} borderRadius=\"borderRadius\" borderColor=\"grey.400\">\n            <TableContainer>\n                <Table\n                    stickyHeader\n                    className={classes.table}\n                    aria-labelledby=\"tableTitle\"\n                    size={\"medium\"}\n                    aria-label=\"enhanced table\"\n                >\n                    <EnhancedTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        headCells={headCells}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getSorting(order, orderBy))\n                            .slice(\n                                page * rowsPerPage,\n                                page * rowsPerPage + rowsPerPage\n                            )\n                            .map((row, index) => {\n                                const isItemSelected = isSelected(row.id);\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        // onClick={() => {if(typeof tableRowOnClickHandler === 'function') tableRowOnClickHandler(row.id) }}\n                                        hover\n                                        role=\"checkbox\"\n                                        aria-checked={isItemSelected}\n                                        tabIndex={-1}\n                                        key={row.id}\n                                        selected={isItemSelected}\n                                    >\n                                        <TableCell padding=\"checkbox\">\n                                            <Checkbox\n                                                onClick={(event) =>\n                                                    handleClick(event, row.id)\n                                                }\n                                                checked={isItemSelected}\n                                                inputProps={{\n                                                    \"aria-labelledby\": labelId,\n                                                }}\n                                            />\n                                        </TableCell>\n                                        {headCells.map(\n                                            (headCell, tableCellIndex) => {\n                                                const tableCellData =\n                                                    row[headCell.id];\n                                                return (\n                                                    headCell.id === 'edit' ?\n                                                        (\n                                                            noEditCol ? null : (\n                                                                <TableCell\n                                                                    key={`edit${tableCellIndex}`}\n                                                                    component=\"th\"\n                                                                    scope=\"row\"\n                                                                    sortDirection={false}\n                                                                >\n                                                                    <Tooltip\n                                                                        title=\"Edit\"\n                                                                        placement=\"bottom\"\n                                                                    >\n                                                                        <IconButton\n                                                                            color=\"primary\"\n                                                                            size=\"small\"\n                                                                            component={Link}\n                                                                            to={`${match.url}/${row.id}/edit`}\n                                                                        >\n                                                                            <EditIcon fontSize=\"default\" />\n                                                                        </IconButton>\n                                                                    </Tooltip>\n                                                                </TableCell>\n                                                            )\n                                                        )\n                                                        : headCell.id === 'delete' ?\n                                                            (\n                                                                noDeleteCol ? null : (\n                                                                    <TableCell\n                                                                        key={`delete${tableCellIndex}`}\n                                                                        component=\"th\"\n                                                                        scope=\"row\"\n                                                                        sortDirection={false}\n                                                                    >\n                                                                        <Tooltip\n                                                                            title=\"Delete\"\n                                                                            placement=\"bottom\"\n                                                                        >\n                                                                            <IconButton\n                                                                                onClick={(event) => {\n                                                                                    handleDelete(\n                                                                                        row.id,\n                                                                                        deleteUrl\n                                                                                    );\n                                                                                }}\n                                                                                color=\"primary\"\n                                                                                size=\"small\"\n                                                                            >\n                                                                                <DeleteIcon fontSize=\"default\" />\n                                                                            </IconButton>\n                                                                        </Tooltip>\n                                                                    </TableCell>\n                                                                )\n                                                            )\n                                                            : headCell.id === 'details' ?\n                                                                (\n                                                                    !noDetailsCol ? null : (\n                                                                        <TableCell\n                                                                            key={`details${tableCellIndex}`}\n                                                                            component=\"th\"\n                                                                            scope=\"row\"\n                                                                            sortDirection={false}\n                                                                        >\n                                                                            <Tooltip\n                                                                                title=\"Details\"\n                                                                                placement=\"bottom\"\n                                                                            >\n                                                                                <IconButton\n                                                                                    color=\"primary\"\n                                                                                    size=\"small\"\n                                                                                    component={Link}\n                                                                                    to={`${match.url}/${row.id}/details`}\n                                                                                >\n                                                                                    <DetailsIcon fontSize=\"default\" />\n                                                                                </IconButton>\n                                                                            </Tooltip>\n                                                                        </TableCell>\n                                                                    )\n                                                                )\n                                                                :\n                                                                <TableCell\n                                                                    key={tableCellIndex}\n                                                                    component=\"th\"\n                                                                    id={labelId}\n                                                                    scope=\"row\"\n                                                                    padding=\"none\"\n                                                                >\n                                                                    {typeof tableCellData ===\n                                                                        \"boolean\"\n                                                                        ? tableCellData\n                                                                            ? \"Yes\"\n                                                                            : \"No\"\n                                                                        : tableCellData}\n                                                                </TableCell>\n                                                );\n                                            }\n                                        )}\n                                    </TableRow>\n                                );\n                            })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[50, 100, 200, 300]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </Box>\n    );\n}\n\nexport default withRouter(CommonTable);\n","import Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\nimport exportDataToXSL, { exportPropertyStatementDataToXSL } from \"../assets/PrintingHelper\";\nimport PropTypes from 'prop-types';\n\nfunction ExportToExcelBtn(props) {\n\tconst { disabled, reportName, reportTitle, headCells, dataToPrint } = props\n\treturn (\n\t\t<Button\n\t\t\ttype=\"button\"\n\t\t\taria-label=\"Export to Excel\"\n\t\t\tvariant=\"contained\"\n\t\t\tsize=\"medium\"\n\t\t\tcolor=\"primary\"\n\t\t\tdisabled={disabled}\n\t\t\tonClick={() => exportDataToXSL(reportName, reportTitle, headCells, dataToPrint, reportName)}\n\t\t\tstartIcon={<ImportExportIcon />}\n\t\t>\n\t\t\tExcel\n\t\t</Button >\n\t);\n}\n\nExportToExcelBtn.propTypes = {\n\treportName: PropTypes.string.isRequired,\n\treportTitle: PropTypes.string.isRequired,\n\theadCells: PropTypes.array.isRequired,\n\tdataToPrint: PropTypes.array.isRequired,\n}\n\nexport default ExportToExcelBtn;\n\nexport function ExportStatementToExcelBtn(props) {\n\tconst { displayText, disabled, reportName, reportTitle, headCells, dataToPrint } = props\n\treturn (\n\t\t<Button\n\t\t\ttype=\"button\"\n\t\t\taria-label=\"Export to Excel\"\n\t\t\tvariant=\"contained\"\n\t\t\tsize=\"medium\"\n\t\t\tcolor=\"primary\"\n\t\t\tdisabled={disabled}\n\t\t\tonClick={() => exportPropertyStatementDataToXSL(reportName, reportTitle, headCells, dataToPrint, reportName)}\n\t\t\tstartIcon={<ImportExportIcon />}\n\t\t>\n\t\t\t{ displayText ? displayText : \"Excel\"}\n\t\t</Button >\n\t);\n}\n\nExportStatementToExcelBtn.propTypes = {\n\treportName: PropTypes.string.isRequired,\n\treportTitle: PropTypes.string.isRequired,\n\theadCells: PropTypes.array.isRequired,\n\tdataToPrint: PropTypes.array.isRequired,\n}\n","import Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport { printDataRows } from \"../assets/PrintingHelper\";\nimport PropTypes from 'prop-types';\n\nfunction PrintArrayToPdfBtn (props) {\n    const { disabled, reportName, reportTitle, headCells, dataToPrint } = props\n    return (\n        <Button\n            type=\"button\"\n            aria-label=\"Print to Pdf\"\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"primary\"\n            disabled={disabled}\n            onClick={() => printDataRows(reportName, reportTitle, headCells, dataToPrint)}\n            startIcon={<PrintIcon />}\n        >\n            Pdf\n        </Button>\n    );\n}\n\nPrintArrayToPdfBtn.propTypes = {\n    reportName: PropTypes.string.isRequired,\n    reportTitle: PropTypes.string.isRequired,\n    headCells: PropTypes.array.isRequired,\n    dataToPrint: PropTypes.array.isRequired,\n}\n\nexport default PrintArrayToPdfBtn;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { Grid, TextField, Button, MenuItem, Box } from \"@material-ui/core\";\nimport { handleDelete } from \"../actions/actions\";\nimport CommonTable from \"../components/table/commonTable\";\nimport { withRouter } from \"react-router-dom\";\nimport { commonStyles } from \"../components/commonStyles\";\nimport { connect } from \"react-redux\";\nimport ExportToExcelBtn from \"../components/ExportToExcelBtn\";\nimport Layout from \"../components/PrivateLayout\";\nimport PageHeading from \"../components/PageHeading\";\nimport PrintArrayToPdf from \"../components/PrintArrayToPdfBtn\";\nimport { getCurrentMonthFromToDates, getLastMonthFromToDates, getLastThreeMonthsFromToDates, getLastYearFromToDates, getTransactionsFilterOptions, getYearToDateFromToDates } from \"../assets/commonAssets\";\nimport { parse, isWithinInterval } from \"date-fns\";\n\n\nconst TRANSACTIONS_FILTER_OPTIONS = getTransactionsFilterOptions()\n\n\nconst meterReadingsTableHeadCells = [\n    { id: \"reading_date\", numeric: false, disablePadding: true, label: \"Date Recorded\" },\n    { id: \"unit_ref\", numeric: false, disablePadding: true, label: \"Unit Number/Ref\" },\n    { id: \"tenant_name\", numeric: false, disablePadding: true, label: \"Tenant Name\" },\n    { id: \"tenant_id_number\", numeric: false, disablePadding: true, label: \"Tenant Id Number\" },\n    { id: \"meter_type\", numeric: false, disablePadding: true, label: \"Meter Type\" },\n    { id: \"prior_value\", numeric: false, disablePadding: true, label: \"Prior Value\" },\n    { id: \"current_value\", numeric: false, disablePadding: true, label: \"Curent Value\" },\n    { id: \"usage\", numeric: false, disablePadding: true, label: \"Usage\" },\n    { id: \"base_charge\", numeric: false, disablePadding: true, label: \"Base Charge\" },\n    { id: \"unit_charge\", numeric: false, disablePadding: true, label: \"Unit Charge\" },\n    { id: \"amount\", numeric: false, disablePadding: true, label: \"Amount(Ksh)\" },\n    { id: \"edit\", numeric: false, disablePadding: true, label: \"Edit\" },\n    { id: \"delete\", numeric: false, disablePadding: true, label: \"Delete\" },\n];\n\nlet MeterReadingsPage = ({\n    meterReadings,\n    handleItemDelete,\n    properties,\n    match,\n}) => {\n    const classes = commonStyles();\n    let [meterReadingItems, setMeterReadingItems] = useState([]);\n    let [filteredMeterReadingItems, setFilteredMeterReadingItems] = useState([]);\n    let [fromDateFilter, setFromDateFilter] = useState(\"\");\n    let [periodFilter, setPeriodFilter] = useState(\"month-to-date\");\n    let [toDateFilter, setToDateFilter] = useState(\"\");\n    let [meterTypeFilter, setMeterTypeFilter] = useState(\"\");\n    let [propertyFilter, setPropertyFilter] = useState(\"all\");\n    const [selected, setSelected] = useState([]);\n\n    const METER_TYPE_OPTIONS = Array.from(new Set(meterReadingItems.map((meterReading) => meterReading.meter_type)))\n\n    useEffect(() => {\n        const dateRange = getCurrentMonthFromToDates()\n        const startOfPeriod = dateRange[0]\n        const endOfPeriod = dateRange[1]\n        const currentMonthMeterReadings = meterReadings.filter((meterReading) => {\n            const readingDate = parse(meterReading.reading_date, 'yyyy-MM-dd', new Date())\n            return isWithinInterval(readingDate, { start: startOfPeriod, end: endOfPeriod })\n        })\n        setMeterReadingItems(currentMonthMeterReadings);\n        setFilteredMeterReadingItems(currentMonthMeterReadings);\n    }, [meterReadings]);\n\n    const handleSearchFormSubmit = (event) => {\n        event.preventDefault();\n        //filter the meterReadings here according to search criteria\n        let filteredMeterReadings = meterReadings\n        if (periodFilter) {\n            let dateRange = []\n            let startOfPeriod;\n            let endOfPeriod;\n            switch (periodFilter) {\n                case 'last-month':\n                    dateRange = getLastMonthFromToDates()\n                    startOfPeriod = dateRange[0]\n                    endOfPeriod = dateRange[1]\n                    break;\n                case 'year-to-date':\n                    dateRange = getYearToDateFromToDates()\n                    startOfPeriod = dateRange[0]\n                    endOfPeriod = dateRange[1]\n                    break;\n                case 'last-year':\n                    dateRange = getLastYearFromToDates()\n                    startOfPeriod = dateRange[0]\n                    endOfPeriod = dateRange[1]\n                    break;\n                case 'month-to-date':\n                    dateRange = getCurrentMonthFromToDates()\n                    startOfPeriod = dateRange[0]\n                    endOfPeriod = dateRange[1]\n                    break;\n                case '3-months-to-date':\n                    dateRange = getLastThreeMonthsFromToDates()\n                    startOfPeriod = dateRange[0]\n                    endOfPeriod = dateRange[1]\n                    break;\n                default:\n                    dateRange = getLastMonthFromToDates()\n                    startOfPeriod = dateRange[0]\n                    endOfPeriod = dateRange[1]\n            }\n            filteredMeterReadings = filteredMeterReadings.filter((meterReading) => {\n                const meterReadingDate = parse(meterReading.reading_date, 'yyyy-MM-dd', new Date())\n                return isWithinInterval(meterReadingDate, { start: startOfPeriod, end: endOfPeriod })\n            })\n        }\n        filteredMeterReadings = filteredMeterReadings\n            .filter(({ meter_type }) => !meterTypeFilter ? true : meter_type === meterTypeFilter)\n            .filter(({ property }) => propertyFilter === \"all\" ? true : property === propertyFilter)\n            .filter(({ reading_date }) => !fromDateFilter ? true : reading_date >= fromDateFilter)\n            .filter(({ reading_date }) => !toDateFilter ? true : reading_date <= toDateFilter)\n        setFilteredMeterReadingItems(filteredMeterReadings);\n    };\n\n    const resetSearchForm = (event) => {\n        event.preventDefault();\n        setFromDateFilter(\"\");\n        setPeriodFilter(\"month-to-date\");\n        setToDateFilter(\"\");\n        setMeterTypeFilter(\"\");\n        setPropertyFilter(\"all\");\n        setFilteredMeterReadingItems(meterReadingItems);\n    };\n\n    return (\n        <Layout pageTitle=\"Units Meter Readings\">\n            <Grid\n                container\n                spacing={3}\n                alignItems=\"center\"\n            >\n                <Grid item lg={12}>\n                    <PageHeading text=\"Units Meter Readings\" />\n                </Grid>\n                <Grid\n                    container\n                    spacing={2}\n                    item\n                    alignItems=\"center\"\n                    direction=\"row\"\n                    key={1}\n                >\n                    <Grid item>\n                        <Button\n                            type=\"button\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            startIcon={<AddIcon />}\n                            component={Link}\n                            to={`${match.url}/new`}\n                        >\n                            NEW\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            type=\"button\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            startIcon={<EditIcon />}\n                            disabled={!selected.length}\n                            component={Link}\n                            to={`${match.url}/${selected[0]}/edit`}\n                        >\n                            Edit\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <PrintArrayToPdf\n                            disabled={!selected.length}\n                            reportName={'Meter Readings Records'}\n                            reportTitle={'Meter Readings Records'}\n                            headCells={meterReadingsTableHeadCells}\n                            dataToPrint={meterReadingItems.filter(({ id }) => selected.includes(id))}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <ExportToExcelBtn\n                            disabled={!selected.length}\n                            reportName={'Meter Readings Records'}\n                            reportTitle={'Meter Readings Records'}\n                            headCells={meterReadingsTableHeadCells}\n                            dataToPrint={meterReadingItems.filter(({ id }) => selected.includes(id))}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Box\n                        border={1}\n                        borderRadius=\"borderRadius\"\n                        borderColor=\"grey.400\"\n                    >\n                        <form\n                            className={classes.form}\n                            id=\"contactSearchForm\"\n                            onSubmit={handleSearchFormSubmit}\n                        >\n                            <Grid\n                                container\n                                spacing={2}\n                                justify=\"center\"\n                                direction=\"column\"\n                            >\n                                <Grid\n                                    container\n                                    item\n                                    spacing={2}\n                                    justify=\"center\"\n                                    direction=\"row\"\n                                >\n                                    <Grid item container direction=\"row\" xs={12} md={6} spacing={2}>\n                                        <Grid item xs={12} md={6}>\n                                            <TextField\n                                                fullWidth\n                                                variant=\"outlined\"\n                                                type=\"date\"\n                                                id=\"from_date_filter\"\n                                                name=\"from_date_filter\"\n                                                label=\"From Date\"\n                                                value={fromDateFilter}\n                                                onChange={(event) => {\n                                                    setFromDateFilter(\n                                                        event.target.value\n                                                    );\n                                                }}\n                                                InputLabelProps={{ shrink: true }}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12} md={6}>\n                                            <TextField\n                                                fullWidth\n                                                variant=\"outlined\"\n                                                type=\"date\"\n                                                name=\"to_date_filter\"\n                                                label=\"To Date\"\n                                                id=\"to_date_filter\"\n                                                onChange={(event) => {\n                                                    setToDateFilter(event.target.value);\n                                                }}\n                                                value={toDateFilter}\n                                                InputLabelProps={{ shrink: true }}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            variant=\"outlined\"\n                                            name=\"property_filter\"\n                                            label=\"Property\"\n                                            id=\"property_filter\"\n                                            onChange={(event) => {\n                                                setPropertyFilter(\n                                                    event.target.value\n                                                );\n                                            }}\n                                            value={propertyFilter}\n                                        >\n                                            <MenuItem key={\"all\"} value={\"all\"}>All Properties</MenuItem>\n                                            {properties.map(\n                                                (property, index) => (\n                                                    <MenuItem\n                                                        key={index}\n                                                        value={property.id}\n                                                    >\n                                                        {property.ref}\n                                                    </MenuItem>\n                                                )\n                                            )}\n                                        </TextField>\n                                    </Grid>\n                                    <Grid item container direction=\"row\" spacing={2}>\n                                        <Grid item xs={12} md={6}>\n                                            <TextField\n                                                fullWidth\n                                                select\n                                                variant=\"outlined\"\n                                                name=\"meter_type\"\n                                                label=\"Select Meter Type\"\n                                                id=\"meter_type\"\n                                                onChange={(event) => {\n                                                    setMeterTypeFilter(\n                                                        event.target.value\n                                                    );\n                                                }}\n                                                value={meterTypeFilter}\n                                            >\n                                                {METER_TYPE_OPTIONS.map((filterOption, index) => (\n                                                    <MenuItem\n                                                        key={index}\n                                                        value={filterOption}\n                                                    >\n                                                        {filterOption}\n                                                    </MenuItem>\n                                                ))}\n                                            </TextField>\n                                        </Grid>\n                                        <Grid item xs={12} md={6}>\n                                            <TextField\n                                                fullWidth\n                                                variant=\"outlined\"\n                                                select\n                                                id=\"from_filter\"\n                                                name=\"from_filter\"\n                                                label=\"Period\"\n                                                value={periodFilter}\n                                                onChange={(event) => {\n                                                    setPeriodFilter(\n                                                        event.target.value\n                                                    );\n                                                }}\n                                                InputLabelProps={{ shrink: true }}>\n                                                {TRANSACTIONS_FILTER_OPTIONS.map((filterOption, index) => (\n                                                    <MenuItem\n                                                        key={index}\n                                                        value={filterOption.id}\n                                                    >\n                                                        {filterOption.text}\n                                                    </MenuItem>\n                                                ))}\n                                            </TextField>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid\n                                    container\n                                    spacing={2}\n                                    item\n                                    justify=\"flex-end\"\n                                    alignItems=\"center\"\n                                    direction=\"row\"\n                                    key={1}\n                                >\n                                    <Grid item>\n                                        <Button\n                                            onClick={(event) => handleSearchFormSubmit(event)}\n                                            type=\"submit\"\n                                            form=\"contactSearchForm\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<SearchIcon />}\n                                        >\n                                            SEARCH\n                                    </Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button\n                                            onClick={(event) =>\n                                                resetSearchForm(event)\n                                            }\n                                            type=\"reset\"\n                                            form=\"propertySearchForm\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            size=\"medium\"\n                                            startIcon={<UndoIcon />}\n                                        >\n                                            RESET\n                                    </Button>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </form>\n                    </Box>\n                </Grid>\n                <Grid item xs={12}>\n                    <CommonTable\n                        selected={selected}\n                        setSelected={setSelected}\n                        rows={filteredMeterReadingItems}\n                        headCells={meterReadingsTableHeadCells}\n                        handleDelete={handleItemDelete}\n                        deleteUrl={\"meter_readings\"}\n                    />\n                </Grid>\n            </Grid>\n        </Layout>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        meterReadings: state.meterReadings\n            .map(reading => {\n                const tenant = state.contacts.find((contact) => contact.id === reading.tenant_id) || {};\n                const unit = state.propertyUnits.find((unit) => unit.id === reading.unit_id) || {};\n                return Object.assign({}, reading, {\n                    tenant_name: `${tenant.first_name} ${tenant.last_name}`,\n                    tenant_id_number: tenant.id_number,\n                    unit_ref: unit.ref,\n                })\n            })\n            .sort((meterReading1, meterReading2) => parse(meterReading2.reading_date, 'yyyy-MM-dd', new Date()) -\n                parse(meterReading1.reading_date, 'yyyy-MM-dd', new Date())),\n        properties: state.properties,\n        propertyUnits: state.propertyUnits,\n        contacts: state.contacts,\n    };\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleItemDelete: (itemId, url) => dispatch(handleDelete(itemId, url)),\n    };\n};\n\nMeterReadingsPage = connect(mapStateToProps, mapDispatchToProps)(MeterReadingsPage);\n\nexport default withRouter(MeterReadingsPage);\n"],"sourceRoot":""}