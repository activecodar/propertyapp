{"version":3,"sources":["Routes/TenantsPaymentsStatement.js"],"names":["TRANSACTIONS_FILTER_OPTIONS","getTransactionsFilterOptions","headCells","id","numeric","disablePadding","label","TenantsPaymentsPage","transactions","contacts","properties","classes","useState","paymentsItems","setPaymentsItems","filteredPaymentsItems","setFilteredPaymentsItems","propertyFilter","setPropertyFilter","periodFilter","setPeriodFilter","fromDateFilter","setFromDateFilter","toDateFilter","setToDateFilter","contactFilter","setContactFilter","selected","setSelected","useEffect","dateRange","getCurrentMonthFromToDates","startOfPeriod","endOfPeriod","paymentsForCurrentMonth","filter","payment","paymentDate","parse","payment_date","Date","isWithinInterval","start","end","handleSearchFormSubmit","event","preventDefault","filteredPayments","getLastMonthFromToDates","getYearToDateFromToDates","getLastYearFromToDates","getLastThreeMonthsFromToDates","paymentItem","property_id","tenant_id","container","spacing","alignItems","item","key","text","direction","disabled","length","reportName","reportTitle","dataToPrint","includes","xs","border","borderRadius","borderColor","className","form","onSubmit","justify","md","fullWidth","variant","type","name","value","onChange","target","InputLabelProps","shrink","select","map","filterOption","index","property","ref","options","getOptionSelected","option","newValue","getOptionLabel","tenant","first_name","last_name","style","width","renderInput","params","onClick","color","size","startIcon","resetSearchForm","rows"],"mappings":"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","file":"static/js/54.0393c45f.chunk.js","sourcesContent":["import Grid from \"@material-ui/core/Grid\";\nimport PageHeading from \"../components/PageHeading\";\nimport React, { useEffect, useState } from \"react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport ExportToExcelBtn from \"../components/ExportToExcelBtn\";\nimport CommonTable from \"../components/table/commonTable\";\nimport PrintArrayToPdf from \"../components/PrintArrayToPdfBtn\";\nimport { getCurrentMonthFromToDates, getLastMonthFromToDates, getLastThreeMonthsFromToDates, getLastYearFromToDates, getTransactionsFilterOptions, getYearToDateFromToDates } from \"../assets/commonAssets\";\nimport { parse, isWithinInterval } from \"date-fns\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\n\nconst TRANSACTIONS_FILTER_OPTIONS = getTransactionsFilterOptions()\n\nconst headCells = [\n    { id: \"tenant_name\", numeric: false, disablePadding: true, label: \"Tenant Name\" },\n    { id: \"tenant_id_number\", numeric: false, disablePadding: true, label: \"Tenant ID\" },\n    { id: \"unit_ref\", numeric: false, disablePadding: true, label: \"Unit Number/Ref\" },\n    { id: \"payment_date\", numeric: false, disablePadding: true, label: \"Payment Date\" },\n    { id: \"payment_label\", numeric: false, disablePadding: true, label: \"Payment Type\" },\n    { id: \"payment_amount\", numeric: false, disablePadding: true, label: \"Payment Amount\" },\n    { id: \"memo\", numeric: false, disablePadding: true, label: \"Payment Notes/Memo\" },\n    { id: \"edit\", numeric: false, disablePadding: true, label: \"Edit\" },\n    { id: \"delete\", numeric: false, disablePadding: true, label: \"Delete\" },\n];\n\n\nlet TenantsPaymentsPage = ({\n    transactions,\n    contacts,\n    properties,\n    classes,\n}) => {\n    let [paymentsItems, setPaymentsItems] = useState([]);\n    let [filteredPaymentsItems, setFilteredPaymentsItems] = useState([]);\n    let [propertyFilter, setPropertyFilter] = useState(\"all\");\n    let [periodFilter, setPeriodFilter] = useState(\"month-to-date\");\n    let [fromDateFilter, setFromDateFilter] = useState(\"\");\n    let [toDateFilter, setToDateFilter] = useState(\"\");\n    let [contactFilter, setContactFilter] = useState(null);\n\n    const [selected, setSelected] = useState([]);\n\n    useEffect(() => {\n        const dateRange = getCurrentMonthFromToDates()\n        const startOfPeriod = dateRange[0]\n        const endOfPeriod = dateRange[1]\n        const paymentsForCurrentMonth = transactions.filter((payment) => {\n            const paymentDate = parse(payment.payment_date, 'yyyy-MM-dd', new Date())\n            return isWithinInterval(paymentDate, { start: startOfPeriod, end: endOfPeriod })\n        })\n        setPaymentsItems(paymentsForCurrentMonth);\n        setFilteredPaymentsItems(paymentsForCurrentMonth);\n    }, [transactions]);\n\n    const handleSearchFormSubmit = (event) => {\n        event.preventDefault();\n        //filter the payments according to the search criteria here\n        let filteredPayments = transactions\n        let dateRange = []\n        let startOfPeriod;\n        let endOfPeriod;\n        switch (periodFilter) {\n            case 'all':\n                startOfPeriod = new Date(1990, 1, 1)\n                endOfPeriod = new Date(2100, 1, 1)\n                break;\n            case 'last-month':\n                dateRange = getLastMonthFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n                break;\n            case 'year-to-date':\n                dateRange = getYearToDateFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n                break;\n            case 'last-year':\n                dateRange = getLastYearFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n                break;\n            case 'month-to-date':\n                dateRange = getCurrentMonthFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n                break;\n            case '3-months-to-date':\n                dateRange = getLastThreeMonthsFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n                break;\n            default:\n                dateRange = getLastMonthFromToDates()\n                startOfPeriod = dateRange[0]\n                endOfPeriod = dateRange[1]\n        }\n        filteredPayments = filteredPayments.filter((paymentItem) => {\n            const paymentDate = parse(paymentItem.payment_date, 'yyyy-MM-dd', new Date())\n            return isWithinInterval(paymentDate, { start: startOfPeriod, end: endOfPeriod })\n        })\n        filteredPayments = filteredPayments\n            .filter(({ payment_date }) => !fromDateFilter ? true : payment_date >= fromDateFilter)\n            .filter(({ payment_date }) => !toDateFilter ? true : payment_date <= toDateFilter)\n            .filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter)\n            .filter(({ tenant_id }) => !contactFilter ? true : tenant_id === contactFilter.id)\n        setFilteredPaymentsItems(filteredPayments);\n    }\n\n    const resetSearchForm = (event) => {\n        event.preventDefault();\n        setFilteredPaymentsItems(paymentsItems);\n        setPropertyFilter(\"all\");\n        setPeriodFilter(\"month-to-date\");\n        setFromDateFilter(\"\");\n        setToDateFilter(\"\");\n        setContactFilter(\"\");\n    };\n\n    return (\n        <Grid\n            container\n            spacing={3}\n            alignItems=\"center\"\n        >\n            <Grid item key={2}>\n                <PageHeading text={'Tenants Payments Statement'} />\n            </Grid>\n            <Grid\n                container\n                spacing={2}\n                item\n                alignItems=\"center\"\n                direction=\"row\"\n                key={1}\n            >\n                <Grid item>\n                    <PrintArrayToPdf\n                        disabled={!selected.length}\n                        reportName={'Tenants Payments Records'}\n                        reportTitle={'Tenants Payments Data'}\n                        headCells={headCells}\n                        dataToPrint={paymentsItems.filter(({ id }) => selected.includes(id))}\n                    />\n                </Grid>\n                <Grid item>\n                    <ExportToExcelBtn\n                        disabled={!selected.length}\n                        reportName={'Tenants Payments Records'}\n                        reportTitle={'Tenants Payments Data'}\n                        headCells={headCells}\n                        dataToPrint={paymentsItems.filter(({ id }) => selected.includes(id))}\n                    />\n                </Grid>\n            </Grid>\n            <Grid item xs={12}>\n                <Box\n                    border={1}\n                    borderRadius=\"borderRadius\"\n                    borderColor=\"grey.400\"\n                >\n                    <form\n                        className={classes.form}\n                        id=\"contactSearchForm\"\n                        onSubmit={handleSearchFormSubmit}\n                    >\n                        <Grid\n                            container\n                            spacing={2}\n                            justify=\"center\"\n                        >\n                            <Grid item container spacing={2}>\n                                <Grid item container direction=\"row\" spacing={2}>\n                                    <Grid item container xs={12} md={6} direction=\"row\" spacing={2}>\n                                        <Grid item xs={12} md={6}>\n                                            <TextField\n                                                fullWidth\n                                                variant=\"outlined\"\n                                                type=\"date\"\n                                                id=\"from_date_filter\"\n                                                name=\"from_date_filter\"\n                                                label=\"From Date\"\n                                                value={fromDateFilter}\n                                                onChange={(event) => {\n                                                    setFromDateFilter(\n                                                        event.target.value\n                                                    );\n                                                }}\n                                                InputLabelProps={{ shrink: true }}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12} md={6}>\n                                            <TextField\n                                                fullWidth\n                                                variant=\"outlined\"\n                                                type=\"date\"\n                                                name=\"to_date_filter\"\n                                                label=\"To Date\"\n                                                id=\"to_date_filter\"\n                                                onChange={(event) => {\n                                                    setToDateFilter(event.target.value);\n                                                }}\n                                                value={toDateFilter}\n                                                InputLabelProps={{ shrink: true }}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            fullWidth\n                                            variant=\"outlined\"\n                                            select\n                                            id=\"period_filter\"\n                                            name=\"period_filter\"\n                                            label=\"Period\"\n                                            value={periodFilter}\n                                            onChange={(event) => {\n                                                setPeriodFilter(\n                                                    event.target.value\n                                                );\n                                            }}\n                                            InputLabelProps={{ shrink: true }}\n                                        >\n                                            {TRANSACTIONS_FILTER_OPTIONS.map((filterOption, index) => (\n                                                <MenuItem\n                                                    key={index}\n                                                    value={filterOption.id}\n                                                >\n                                                    {filterOption.text}\n                                                </MenuItem>\n                                            ))}\n                                        </TextField>\n                                    </Grid>\n                                </Grid>\n                                <Grid item container direction=\"row\" spacing={2}>\n                                    <Grid item md={6} xs={12}>\n                                        <TextField\n                                            fullWidth\n                                            select\n                                            variant=\"outlined\"\n                                            name=\"property_filter\"\n                                            label=\"Property\"\n                                            id=\"property_filter\"\n                                            onChange={(event) => {\n                                                setPropertyFilter(\n                                                    event.target.value\n                                                );\n                                            }}\n                                            value={propertyFilter}\n                                        >\n                                            <MenuItem key={\"all\"} value={\"all\"}>All Properties</MenuItem>\n                                            {properties.map(\n                                                (property, index) => (\n                                                    <MenuItem\n                                                        key={index}\n                                                        value={property.id}\n                                                    >\n                                                        {property.ref}\n                                                    </MenuItem>\n                                                )\n                                            )}\n                                        </TextField>\n                                    </Grid>\n                                    <Grid item xs={12} md={6}>\n                                        <Autocomplete\n                                            id=\"contact_filter\"\n                                            options={contacts}\n                                            getOptionSelected={(option, value) => option.id === value.id}\n                                            name=\"contact_filter\"\n                                            onChange={(event, newValue) => {\n                                                setContactFilter(newValue);\n                                            }}\n                                            value={contactFilter}\n                                            getOptionLabel={(tenant) => tenant ? `${tenant.first_name} ${tenant.last_name}` : ''}\n                                            style={{ width: \"100%\" }}\n                                            renderInput={(params) => <TextField {...params} label=\"Tenant\" variant=\"outlined\" />}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            <Grid\n                                container\n                                spacing={2}\n                                item\n                                justify=\"flex-end\"\n                                alignItems=\"center\"\n                                direction=\"row\"\n                                key={1}\n                            >\n                                <Grid item>\n                                    <Button\n                                        onClick={(event) => handleSearchFormSubmit(event)}\n                                        type=\"submit\"\n                                        form=\"rentRollSearchForm\"\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        size=\"medium\"\n                                        startIcon={<SearchIcon />}\n                                    >\n                                        SEARCH\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        onClick={(event) => resetSearchForm(event)}\n                                        type=\"reset\"\n                                        form=\"rentRollSearchForm\"\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        size=\"medium\"\n                                        startIcon={<UndoIcon />}\n                                    >\n                                        RESET\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </Box>\n            </Grid>\n            <Grid item xs={12}>\n                <CommonTable\n                    selected={selected}\n                    setSelected={setSelected}\n                    rows={filteredPaymentsItems}\n                    headCells={headCells}\n                />\n            </Grid>\n\n        </Grid>\n    );\n};\n\n\nexport default TenantsPaymentsPage;\n"],"sourceRoot":""}