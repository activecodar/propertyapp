{"version":3,"sources":["components/CustomCircularProgress.js","components/emails/EmailsSelect.js","components/emails/EmailInputForm.js","Routes/EmailPage.js"],"names":["useStyles","makeStyles","theme","root","display","alignItems","height","width","wrapper","margin","spacing","position","buttonProgress","color","green","top","left","marginTop","marginLeft","CustomCircularProgress","open","dialogTitle","classes","maxWidth","aria-labelledby","container","direction","item","lg","className","size","not","a","b","filter","value","indexOf","intersection","TransferList","props","commonStyles","contacts","users","contactToSendEmailTo","contactSource","submitEmailSourceValues","handleBack","React","useState","checked","setChecked","setLeft","right","setRight","selectedEmailsSource","setSelectedEmailsSource","useEffect","leftChecked","rightChecked","handleToggle","currentIndex","newChecked","push","splice","customList","items","Paper","paper","List","dense","component","role","map","index","labelId","ListItem","key","button","onClick","ListItemIcon","Checkbox","tabIndex","disableRipple","inputProps","ListItemText","id","primary","first_name","last_name","Grid","Typography","variant","length","TextField","fullWidth","select","onChange","event","target","label","source","MenuItem","sm","Button","concat","disabled","aria-label","tenantDetails","contact_email","userDetails","primary_email","EmailSchema","Yup","shape","from_user","required","email_subject","trim","email_message","quillEditorModules","toolbar","clipboard","matchVisual","quillEditorFormats","HorizontalLinearStepper","currentUser","history","emailTemplates","handleItemSubmit","activeStep","setActiveStep","defaultEmailValues","email","template","emailValues","setEmailValues","isSaving","setIsSaving","steps","handleNext","prevActiveStep","handleCancel","goBack","handleSendEmailSubmit","emailsArray","sendEmails","emailObjectToSave","date_sent","Date","toDateString","fullHeightWidthContainer","Stepper","Step","StepLabel","oneMarginTopBottom","oneMarginRight","initialValues","validationSchema","onSubmit","values","submitEmailDetailsForm","handleSubmit","touched","setFieldValue","errors","handleChange","handleBlur","form","method","justify","InputLabelProps","shrink","name","onBlur","error","helperText","selectedTemplate","find","template_contents","emailTemplate","template_name","paragraph","quillEditor","content","modules","formats","startIcon","disableElevation","type","EmailPage","params","queryString","parse","location","search","contact","contactToSendEmailToDetails","pageTitle","PageHeading","text","connect","state","dispatch","url","handleItemFormSubmit","withRouter"],"mappings":"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","file":"static/js/52.1dfd1bc2.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { green } from '@material-ui/core/colors';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        alignItems: 'center',\n        height: 80,\n        width: 120,\n    },\n    wrapper: {\n        margin: theme.spacing(1),\n        position: 'relative',\n        height: 50,\n        width: 50,\n    },\n    buttonProgress: {\n        color: green[500],\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: -12,\n        marginLeft: -12,\n    },\n}));\n\nexport default function CustomCircularProgress({ open, dialogTitle }) {\n    const classes = useStyles();\n    \n    return (\n        <Dialog maxWidth={\"md\"} aria-labelledby=\"simple-dialog-title\" open={open}>\n            <DialogContent>\n                <Grid container alignItems=\"center\" direction=\"column\">\n                    <Grid item lg>\n                        <Typography>{dialogTitle || \"Saving...\"}</Typography>\n                    </Grid>\n                    <Grid item lg>\n                        <div className={classes.root}>\n                            <div className={classes.wrapper}>\n                                {open && <CircularProgress size={50} className={classes.buttonProgress} />}\n                            </div>\n                        </div>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n        </Dialog>\n\n    );\n}\n","import React, { useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { commonStyles } from \"../commonStyles\";\n\n\nfunction not(a, b) {\n  return a.filter((value) => b.indexOf(value) === -1);\n}\n\nfunction intersection(a, b) {\n  return a.filter((value) => b.indexOf(value) !== -1);\n}\n\nexport default function TransferList(props) {\n  const classes = commonStyles();\n  const { contacts, users, contactToSendEmailTo, contactSource, submitEmailSourceValues, handleBack } = props;\n  const [checked, setChecked] = React.useState([]);\n  const [left, setLeft] = React.useState([]);\n  const [right, setRight] = React.useState([]);\n  const [selectedEmailsSource, setSelectedEmailsSource] = React.useState('Tenants');\n  const emailsSources = [\"Tenants\", \"Users\"];\n\n  useEffect(() => {\n    setLeft(contacts);\n    setSelectedEmailsSource('Tenants')\n  }, [contacts])\n\n  useEffect(() => {\n    setChecked([contactToSendEmailTo]);\n    setSelectedEmailsSource(contactSource)\n  }, [contactToSendEmailTo])\n\n  useEffect(() => {\n    setLeft(users);\n    setSelectedEmailsSource('Users')\n  }, [users])\n\n  const getEmailsFromSource = () => {\n    return selectedEmailsSource === \"Tenants\" ? right.map(tenantDetails => tenantDetails.contact_email)\n      : right.map(userDetails => userDetails.primary_email)\n  }\n\n  const leftChecked = intersection(checked, left);\n  const rightChecked = intersection(checked, right);\n\n  const handleToggle = (value) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const handleAllRight = () => {\n    setRight(right.concat(left));\n    setLeft([]);\n  };\n\n  const handleCheckedRight = () => {\n    setRight(right.concat(leftChecked));\n    setLeft(not(left, leftChecked));\n    setChecked(not(checked, leftChecked));\n  };\n\n  const handleCheckedLeft = () => {\n    setLeft(left.concat(rightChecked));\n    setRight(not(right, rightChecked));\n    setChecked(not(checked, rightChecked));\n  };\n\n  const handleAllLeft = () => {\n    setLeft(left.concat(right));\n    setRight([]);\n  };\n\n  const customList = (items) => (\n    <Paper className={classes.paper}>\n      <List dense component=\"div\" role=\"list\">\n        {items.map((value, index) => {\n          const labelId = `transfer-list-item-${index}-label`;\n          return (\n            <ListItem\n              key={index}\n              role=\"listitem\"\n              button\n              onClick={handleToggle(value)}\n            >\n              <ListItemIcon>\n                <Checkbox\n                  checked={checked.indexOf(value) !== -1}\n                  tabIndex={-1}\n                  disableRipple\n                  inputProps={{ \"aria-labelledby\": labelId }}\n                />\n              </ListItemIcon>\n              <ListItemText id={labelId} primary={`${value.first_name} ${value.last_name}`} />\n            </ListItem>\n          );\n        })}\n        <ListItem />\n      </List>\n    </Paper>\n  );\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      direction=\"column\"\n      className={classes.root}\n    >\n      <Grid\n        item\n        container\n        alignItems=\"center\"\n        direction=\"column\"\n        spacing={2}\n      >\n\n        <Grid item>\n          <Typography variant=\"subtitle1\">\n            {right.length >= 1 ? `${right.length} ${selectedEmailsSource} selected`\n              : `Select ${selectedEmailsSource} to send email`}\n          </Typography>\n        </Grid>\n        <Grid item>\n          <TextField\n            fullWidth\n            select\n            onChange={(event) => {\n              setSelectedEmailsSource(event.target.value)\n              switch (event.target.value) {\n                case 'Tenants': setLeft(contacts); setRight([]); setChecked([]);\n                  break;\n\n                case 'Users': setLeft(users); setRight([]); setChecked([]);\n                  break;\n\n                default: break;\n              }\n            }}\n            variant=\"outlined\"\n            label=\"Select Emails Source\"\n            value={selectedEmailsSource}>\n            {\n              emailsSources.map((source, index) => {\n                return (\n                  <MenuItem key={index} value={source}>\n                    {source}\n                  </MenuItem>);\n              })\n            }\n          </TextField>\n        </Grid>\n        <Grid\n          item\n          container\n          direction=\"row\"\n          spacing={2}\n        >\n          <Grid item sm>{customList(left)}</Grid>\n          <Grid item sm={4} container direction=\"column\" spacing={1} alignItems=\"center\">\n            <Grid item>\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                className={classes.button}\n                onClick={handleAllRight}\n                disabled={left.length === 0}\n                aria-label=\"move all right\"\n              >\n                ≫\n                    </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                className={classes.button}\n                onClick={handleCheckedRight}\n                disabled={leftChecked.length === 0}\n                aria-label=\"move selected right\"\n              >\n                &gt;\n                     </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                className={classes.button}\n                onClick={handleCheckedLeft}\n                disabled={rightChecked.length === 0}\n                aria-label=\"move selected left\"\n              >\n                &lt;\n                    </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                className={classes.button}\n                onClick={handleAllLeft}\n                disabled={right.length === 0}\n                aria-label=\"move all left\"\n              >\n                ≪\n                    </Button>\n            </Grid>\n          </Grid>\n          <Grid item sm>{customList(right)}</Grid>\n        </Grid>\n      </Grid>\n      <Grid\n        item\n        container\n        spacing={2}\n      >\n        <Grid item>\n          <Button\n            onClick={handleBack}\n            variant=\"contained\">\n            Back\n                      </Button>\n        </Grid>\n        <Grid item>\n          <Button\n            disabled={!right.length}\n            onClick={() => { submitEmailSourceValues(getEmailsFromSource()) }}\n            variant=\"contained\"\n            color=\"primary\">\n            Send\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { Formik } from \"formik\";\nimport EmailsSelect from \"./EmailsSelect\";\nimport { commonStyles } from \"../commonStyles\";\nimport { sendEmails } from \"../../actions/actions\";\nimport ReactQuill from 'react-quill'; // ES6\nimport 'react-quill/dist/quill.snow.css'; // ES6\nimport * as Yup from \"yup\";\nimport CustomCircularProgress from \"../CustomCircularProgress\";\n\n\nconst EmailSchema = Yup.object().shape({\n  from_user: Yup.string().required(\"From User is required\"),\n  email_subject: Yup.string().trim().required(\"Email Subject Required\"),\n  email_message: Yup.string().trim().required(\"Email Message is Required\"),\n});\n\nconst quillEditorModules = {\n  toolbar: [\n    [{ 'header': [1, 2, 3, 4, 5, 6, false] }, { 'font': [] }],\n    [{ size: [] }],\n    ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n    [{ 'list': 'ordered' }, { 'list': 'bullet' },\n    { 'indent': '-1' }, { 'indent': '+1' }],\n    ['link'],\n    ['clean']\n  ],\n  clipboard: {\n    // toggle to add extra line breaks when pasting HTML:\n    matchVisual: false,\n  }\n}\n/* \n * Quill editor formats\n * See https://quilljs.com/docs/formats/\n */\nconst quillEditorFormats = [\n  'header', 'font', 'size',\n  'bold', 'italic', 'underline', 'strike', 'blockquote',\n  'list', 'bullet', 'indent',\n  'link', 'image', 'video'\n]\n\nfunction getSteps() {\n  return [\"Create an email\", \"Select an email group\"];\n}\n\nexport default function HorizontalLinearStepper(props) {\n\n  const { currentUser, contactToSendEmailTo, contactSource,\n    users, contacts, history, emailTemplates, handleItemSubmit } = props;\n\n  const classes = commonStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const defaultEmailValues = {\n    from_user: currentUser.email || \"\",\n    email_subject: \"\",\n    email_message: \"\",\n    template: '',\n  }\n  //for the transfer list below\n  const [emailValues, setEmailValues] = React.useState(defaultEmailValues);\n  const [isSaving, setIsSaving] = React.useState(false);\n\n  const steps = getSteps();\n\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setEmailValues(defaultEmailValues)\n    setActiveStep(0);\n  };\n\n  const handleCancel = () => {\n    history.goBack()\n  }\n\n  const submitEmailDetailsForm = (emailValues) => {\n    setEmailValues(emailValues)\n    handleNext()\n  }\n\n  const handleSendEmailSubmit = async (emailsArray) => {\n    //send the emails here\n    setIsSaving(true)\n    await sendEmails(emailValues.from_user, emailValues.email_subject, emailValues.email_message, emailsArray)\n    const emailObjectToSave = {\n      email_subject: emailValues.email_subject,\n      from_user: emailValues.from_user,\n      date_sent: new Date().toDateString(),\n    }\n    await handleItemSubmit(emailObjectToSave, \"communication_emails\")\n    setIsSaving(false)\n    handleNext()\n  }\n\n  return (\n    <div className={classes.fullHeightWidthContainer}>\n      {\n        isSaving && (<CustomCircularProgress dialogTitle=\"Sending email...\" open={true} />)\n      }\n      <Stepper activeStep={activeStep}>\n        {steps.map((label, index) => {\n          return (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <div>\n        {activeStep === steps.length ? (\n          <div>\n            <Typography className={classes.oneMarginTopBottom}>\n              Email Sent...\n            </Typography>\n            <Button onClick={handleReset} className={classes.oneMarginRight}>\n              Reset\n            </Button>\n          </div>\n        ) : activeStep === 0 ? (\n          <Grid container direction=\"column\">\n            <Formik\n              initialValues={emailValues}\n              validationSchema={EmailSchema}\n              onSubmit={(values) => {\n                const email = {\n                  from_user: values.from_user,\n                  email_subject: values.email_subject,\n                  email_message: values.email_message,\n                };\n                submitEmailDetailsForm(email);\n              }}\n            >\n              {({\n                values,\n                handleSubmit,\n                touched,\n                setFieldValue,\n                errors,\n                handleChange,\n                handleBlur,\n              }) => (\n                <form\n                  className={classes.form}\n                  method=\"post\"\n                  id=\"emailDetailsInputForm\"\n                  onSubmit={handleSubmit}\n                >\n                  <Grid\n                    container\n                    spacing={2}\n                    justify=\"center\"\n                    alignItems=\"stretch\"\n                    direction=\"column\"\n                  >\n                    <Grid item>\n                      <TextField\n                        InputLabelProps={{ shrink: true }}\n                        fullWidth\n                        variant=\"outlined\"\n                        id=\"from_user\"\n                        name=\"from_user\"\n                        label=\"From:\"\n                        value={values.from_user}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        error={errors.from_user && touched.from_user}\n                        helperText={errors.from_user}\n                      />\n                    </Grid>\n                    <Grid item>\n                      <TextField\n                        fullWidth\n                        select\n                        variant=\"outlined\"\n                        id=\"template\"\n                        name=\"template\"\n                        label=\"Template\"\n                        value={values.template}\n                        onChange={(event) => {\n                          const selectedTemplate = emailTemplates.find(({ id }) => id === event.target.value) || {}\n                          setFieldValue('template', event.target.value)\n                          setFieldValue('email_message', selectedTemplate.template_contents)\n                        }}\n                        onBlur={handleBlur}\n                        error={errors.template && touched.template}\n                        helperText={errors.template}>\n                        {emailTemplates.map((emailTemplate, index) => (\n                          <MenuItem key={index} value={emailTemplate.id}>\n                            {emailTemplate.template_name}\n                          </MenuItem>\n                        ))}\n                      </TextField>\n                    </Grid>\n                    <Grid item>\n                      <TextField\n                        fullWidth\n                        InputLabelProps={{ shrink: true }}\n                        variant=\"outlined\"\n                        id=\"email_subject\"\n                        name=\"email_subject\"\n                        label=\"Email Subject\"\n                        value={values.email_subject}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        error={\n                          errors.email_subject && touched.email_subject\n                        }\n                        helperText={\n                          touched.email_subject && errors.email_subject\n                        }\n                      />\n                    </Grid>\n                    <Grid item>\n                      <Typography color='textSecondary' variant='body1' paragraph>Email Message</Typography>\n                      <ReactQuill\n                        className={classes.quillEditor}\n                        value={values.email_message}\n                        onChange={(content) => {\n                          setFieldValue('email_message', content)\n                        }}\n                        theme=\"snow\"\n                        modules={quillEditorModules}\n                        formats={quillEditorFormats} >\n                      </ReactQuill>\n                    </Grid>\n                    <Grid\n                      item\n                      container\n                      spacing={2}\n                    >\n                      <Grid item>\n                        <Button\n                          color=\"secondary\"\n                          variant=\"contained\"\n                          size=\"medium\"\n                          startIcon={<CancelIcon />}\n                          onClick={handleCancel}\n                          disableElevation\n                        >\n                          Cancel\n                      </Button>\n                      </Grid>\n                      <Grid item>\n                        <Button\n                          form=\"emailDetailsInputForm\"\n                          type=\"submit\"\n                          variant=\"contained\"\n                          color=\"primary\">\n                          Next\n                  </Button>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </form>\n              )}\n            </Formik>\n          </Grid>\n        ) : activeStep === 1 ? (\n          <EmailsSelect contacts={contacts} users={users} handleBack={handleBack}\n            contactToSendEmailTo={contactToSendEmailTo} contactSource={contactSource}\n            submitEmailSourceValues={handleSendEmailSubmit} />) : null}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport PageHeading from \"../components/PageHeading\";\nimport Layout from \"../components/PrivateLayout\";\nimport { connect } from \"react-redux\";\nimport EmailInputForm from \"../components/emails/EmailInputForm\";\nimport { withRouter } from \"react-router-dom\";\nimport queryString from 'query-string';\nimport { handleItemFormSubmit } from '../actions/actions'\n\nlet EmailPage = (props) => {\n\tconst { users, currentUser, contacts, emailTemplates, handleItemSubmit } = props\n\tconst pageTitle = \"Compose Email\";\n\tconst params = queryString.parse(props.location.search)\n\tvar contactToSendEmailTo = params.contact;\n\tvar contactSource = params.contactSource;\n\tconst contactToSendEmailToDetails = users.find(({ id }) => id === contactToSendEmailTo)\n\n\treturn (\n\t\t<Layout pageTitle=\"Email Campaign Details\">\n\t\t\t<Grid container justify=\"center\" direction=\"column\">\n\t\t\t\t<Grid item key={2}>\n\t\t\t\t\t<PageHeading text={pageTitle} />\n\t\t\t\t</Grid>\n\t\t\t\t<Grid\n\t\t\t\t\tcontainer\n\t\t\t\t\tdirection=\"column\"\n\t\t\t\t\tjustify=\"center\"\n\t\t\t\t\titem\n\t\t\t\t\tkey={3}\n\t\t\t\t>\n\t\t\t\t\t<EmailInputForm contactToSendEmailTo={contactToSendEmailToDetails} contactSource={contactSource}\n\t\t\t\t\t\tcurrentUser={currentUser} contacts={contacts} history={props.history}\n\t\t\t\t\t\tusers={users} emailTemplates={emailTemplates} handleItemSubmit={handleItemSubmit} />\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Layout>\n\t);\n};\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tcontacts: state.contacts,\n\t\tcurrentUser: state.currentUser,\n\t\temailTemplates: state.emailTemplates,\n\t\tusers: state.users,\n\t};\n};\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\thandleItemSubmit: (item, url) => dispatch(handleItemFormSubmit(item, url)),\n\t}\n};\n\n\nEmailPage = connect(mapStateToProps, mapDispatchToProps)(EmailPage);\n\nexport default withRouter(EmailPage);\n"],"sourceRoot":""}