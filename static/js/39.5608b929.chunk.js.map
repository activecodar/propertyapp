{"version":3,"sources":["assets/commonAssets.js","components/table/EnhancedTableHead.js","components/table/tableStyles.js","components/table/tablesSortingFunctions.js","components/table/commonTable.js","components/ExportToExcelBtn.js","components/PrintArrayToPdfBtn.js","Routes/OtherCharges.js"],"names":["monthsInYear","eachMonthOfInterval","start","startOfYear","startOfToday","end","endOfYear","TITLES_LIST","GENDERS_LIST","EXPENSES_CATEGORIES","UNIT_TYPES","LEASE_OPTIONS","METER_TYPES","PAYMENT_FREQUENCY_OPTIONS","getContactTitles","getGendersList","getExpensesCategories","getUnitTypes","getPropertyBaths","baths","i","push","concat","getPropertyBeds","beds","getMeterTypes","getLeaseOptions","getPaymentOptions","getTransactionsFilterOptions","id","text","getLastMonthFromToDates","startOfMonth","subMonths","endOfMonth","getLastYearFromToDates","subYears","getYearToDateFromToDates","getCurrentMonthFromToDates","getLastThreeMonthsFromToDates","getMonthsInYear","currencyFormatter","Intl","NumberFormat","undefined","style","currency","EnhancedTableHead","props","classes","onSelectAllClick","order","orderBy","headCells","numSelected","rowCount","onRequestSort","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","checked","onChange","inputProps","map","headCell","key","align","numeric","disablePadding","sortDirection","TableSortLabel","active","direction","onClick","property","event","label","className","visuallyHidden","useStyles","makeStyles","theme","root","width","paper","marginBottom","spacing","table","minWidth","border","clip","height","margin","overflow","position","top","desc","a","b","withRouter","rows","selected","setSelected","deleteUrl","handleDelete","noEditCol","noDeleteCol","noDetailsCol","match","React","useState","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","Box","borderRadius","borderColor","TableContainer","Table","stickyHeader","aria-labelledby","size","aria-label","length","target","newSelecteds","n","TableBody","array","cmp","stabilizedThis","el","index","sort","stableSort","getSorting","slice","row","isItemSelected","indexOf","labelId","hover","role","aria-checked","tabIndex","stopPropagation","selectedIndex","newSelected","handleClick","tableCellIndex","tableCellData","component","scope","Tooltip","title","placement","IconButton","color","Link","to","url","fontSize","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","value","ExportStatementToExcelBtn","displayText","disabled","reportName","reportTitle","dataToPrint","type","variant","exportPropertyStatementDataToXSL","startIcon","ExportToExcelBtn","exportDataToXSL","PrintArrayToPdfBtn","printDataRows","TRANSACTIONS_FILTER_OPTIONS","defaultDate","format","TenantChargesStatementPage","properties","contacts","transactions","leases","transactionsCharges","handleItemSubmit","handleItemDelete","commonStyles","tenantChargesItems","setTenantChargesItems","filteredChargeItems","setFilteredChargeItems","chargeType","setChargeTypeFilter","fromDateFilter","setFromDateFilter","toDateFilter","setToDateFilter","periodFilter","setPeriodFilter","contactFilter","setContactFilter","propertyFilter","setPropertyFilter","CHARGE_TYPES","Array","from","Set","chargeItem","JSON","stringify","charge_label","charge_type","parse","useEffect","dateRange","startOfPeriod","endOfPeriod","chargesForCurrentMonth","filter","chargeItemDate","charge_date","Date","isWithinInterval","totalNumOfCharges","totalChargesAmount","reduce","total","currentValue","parseFloat","charge_amount","chargesWithPayments","charge","payed_status","totalPaymentsAmount","payed_amount","handleSearchFormSubmit","preventDefault","filteredStatements","property_id","tenant_id","handleChargeDelete","chargeId","payment","charge_id","forEach","security_deposit_charge_id","leaseWithChargeOnDeposit","find","securityDepositBeforePayment","security_deposit","payment_amount","leaseToEdit","setChargesPaidInFull","includes","chargePayment","payment_date","unit_id","payment_label","memo","payment_type","payed","pageTitle","container","justify","item","alignItems","sm","form","onSubmit","xs","md","fullWidth","name","InputLabelProps","shrink","select","filterOption","ref","options","getOptionSelected","option","defaultValue","newValue","getOptionLabel","tenant","first_name","last_name","renderInput","params","resetSearchForm","connect","state","contact","unitWithCharge","propertyUnits","chargeDetails","tenant_name","tenant_id_number","id_number","unit_ref","chargePayments","balance","Object","assign","charge1","charge2","dispatch","handleItemFormSubmit","itemId"],"mappings":"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","file":"static/js/39.5608b929.chunk.js","sourcesContent":["import { endOfMonth, endOfYear, startOfToday, eachMonthOfInterval, startOfMonth, startOfYear, subMonths, subYears } from \"date-fns\";\n\nconst monthsInYear = eachMonthOfInterval({\n\tstart: startOfYear(startOfToday()),\n\tend: endOfYear(startOfToday()),\n})\n//general contact titles\nconst TITLES_LIST = [\"Mr\", \"Prof\", \"Hon\", \"Sir\", \"Mrs\", \"Miss\", \"Dr\", \"Madam\", \"Other\"]\nconst GENDERS_LIST = [\"Male\", \"Female\", \"Unspecified\"];\nconst EXPENSES_CATEGORIES = [\n\t'Security Deposit Refund',\n\t'Water Deposit Refund',\n\t'Management Fees',\n\t'Utilities',\n\t'Taxes',\n\t'Mortgage',\n\t'Office',\n\t'Maintenance & Cleaning',\n\t'Advertising',\n\t'Insurance',\n\t'Legal & Other Professional Fees',\n\t'Auto & Travel',\n\t'Supplies',\n\t'Other Refund',\n\t'Repairs',\n\t'Other'\n]\nconst PROPRERTY_TYPES = [\n\t\"Residential\",\n\t\"Condo/Townhouse\",\n\t\"Multi-family\",\n\t\"Single-family\",\n]\nconst UNIT_TYPES = [\n\t\"Bed Sitter\",\n\t\"One Bedroom\",\n\t\"Two Bedroom\",\n\t\"Single Room\",\n\t\"Double Room\",\n\t\"Shop\",\n\t\"Other\",\n];\nconst LEASE_OPTIONS = [\n\t\"Fixed\",\n\t\"Fixed w/rollover\",\n];\nconst METER_TYPES = [\"Electric\", \"Sewer\", \"Water\"];\nconst FREQUENCY_OPTIONS = [\"Per Day\", \"Week\", \"Month\", \"Quarter\", \"Half Year\", \"Year\"];\nconst PAYMENT_FREQUENCY_OPTIONS = [\"Daily\", \"Weekly\", \"Monthly\", \"Quarterly\", \"Half-Yearly\", \"Yearly\"];\n\n//functions to get the above values\nexport function getContactTitles() {\n\treturn TITLES_LIST;\n}\n\nexport function getGendersList() {\n\treturn GENDERS_LIST;\n}\n\nexport function getExpensesCategories() {\n\treturn EXPENSES_CATEGORIES;\n}\n\n//general property types\nexport function getPropertyTypes() {\n\treturn PROPRERTY_TYPES;\n}\n\n//general unit types\nexport function getUnitTypes() {\n\treturn UNIT_TYPES;\n}\n\nexport function getPropertyBaths() {\n\tconst baths = [];\n\tfor (let i = 1; i <= 5; i++) {\n\t\tbaths.push(i);\n\t}\n\treturn baths.concat(\"5+\");\n}\n\nexport function getPropertyBeds() {\n\tconst beds = [];\n\tfor (let i = 1; i <= 5; i++) {\n\t\tbeds.push(i);\n\t}\n\treturn beds;\n}\n\nexport function getFrequencyOptions() {\n\treturn FREQUENCY_OPTIONS;\n}\n\nexport function getMeterTypes() {\n\treturn METER_TYPES;\n}\n\nexport function getLeaseOptions() {\n\treturn LEASE_OPTIONS;\n}\n\nexport function getPaymentOptions() {\n\treturn PAYMENT_FREQUENCY_OPTIONS;\n}\n\nexport function getTransactionsFilterOptions() {\n\treturn [\n\t\t{ id: 'month-to-date', text: 'Month To Date' }, { id: 'last-month', text: 'Last Month' },\n\t\t{ id: '3-months-to-date', text: '3 Months To Date' }, { id: 'year-to-date', text: 'Year To Date' },\n\t\t{ id: 'last-year', text: 'Last Year' },];\n}\n\nexport function getLastMonthFromToDates() {\n\treturn [startOfMonth(subMonths(startOfToday(), 1)), endOfMonth(subMonths(startOfToday(), 1))]\n}\n\nexport function getLastYearFromToDates() {\n\treturn [startOfYear(subYears(startOfToday(), 1)), endOfYear(subYears(startOfToday(), 1))]\n}\n\nexport function getYearToDateFromToDates() {\n\treturn [startOfYear(startOfToday()), startOfToday()]\n}\n\nexport function getCurrentMonthFromToDates() {\n\treturn [startOfMonth(startOfToday()), endOfMonth(startOfToday())]\n}\n\nexport function getLastThreeMonthsFromToDates() {\n\treturn [startOfMonth(subMonths(startOfToday(), 2)), endOfMonth(startOfToday())]\n}\n\nexport function getMonthsInYear() {\n\treturn monthsInYear\n}\n\n// Create our number formatter.\nexport const currencyFormatter = new Intl.NumberFormat(undefined, {\n\tstyle: 'decimal',\n\tcurrency: 'KES',\n});\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\n\nfunction EnhancedTableHead(props) {\n    const {\n        classes,\n        onSelectAllClick,\n        order,\n        orderBy,\n        headCells,\n        numSelected,\n        rowCount,\n        onRequestSort,\n    } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={\n                            numSelected > 0 && numSelected < rowCount\n                        }\n                        checked={numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ \"aria-label\": \"select all\" }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? \"right\" : \"left\"}\n                        padding={headCell.disablePadding ? \"none\" : \"default\"}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={order}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === \"desc\"\n                                        ? \"sorted descending\"\n                                        : \"sorted ascending\"}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nexport default EnhancedTableHead;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nexport default useStyles;\n","\nfunction desc(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction stableSort(array, cmp) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = cmp(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nfunction getSorting(order, orderBy) {\n    return order === \"desc\"\n        ? (a, b) => desc(a, b, orderBy)\n        : (a, b) => -desc(a, b, orderBy);\n}\n\nexport { desc, stableSort, getSorting };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport TableBody from '@material-ui/core/TableBody';\nimport Table from '@material-ui/core/Table';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableCell from '@material-ui/core/TableCell';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DetailsIcon from \"@material-ui/icons/Details\";\nimport { withRouter } from \"react-router-dom\";\nimport EnhancedTableHead from \"./EnhancedTableHead\";\nimport useStyles from \"./tableStyles\";\nimport { stableSort, getSorting } from \"./tablesSortingFunctions\";\n\nfunction CommonTable(props) {\n    const {\n        rows,\n        headCells,\n        selected,\n        setSelected,\n        deleteUrl,\n        handleDelete,\n        noEditCol,\n        noDeleteCol,\n        noDetailsCol,\n    } = props;\n    const { match } = props;\n    const classes = useStyles();\n    const [order, setOrder] = React.useState(\"asc\");\n    const [orderBy, setOrderBy] = React.useState(\"Beds\");\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(50);\n\n    const handleRequestSort = (event, property) => {\n        const isDesc = orderBy === property && order === \"desc\";\n        setOrder(isDesc ? \"asc\" : \"desc\");\n        setOrderBy(property);\n    };\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.id);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, id) => {\n        event.stopPropagation();\n        const selectedIndex = selected.indexOf(id);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, id);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1)\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (id) => selected.indexOf(id) !== -1;\n\n    return (\n        <Box border={1} borderRadius=\"borderRadius\" borderColor=\"grey.400\">\n            <TableContainer>\n                <Table\n                    stickyHeader\n                    className={classes.table}\n                    aria-labelledby=\"tableTitle\"\n                    size={\"medium\"}\n                    aria-label=\"enhanced table\"\n                >\n                    <EnhancedTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        headCells={headCells}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getSorting(order, orderBy))\n                            .slice(\n                                page * rowsPerPage,\n                                page * rowsPerPage + rowsPerPage\n                            )\n                            .map((row, index) => {\n                                const isItemSelected = isSelected(row.id);\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        // onClick={() => {if(typeof tableRowOnClickHandler === 'function') tableRowOnClickHandler(row.id) }}\n                                        hover\n                                        role=\"checkbox\"\n                                        aria-checked={isItemSelected}\n                                        tabIndex={-1}\n                                        key={row.id}\n                                        selected={isItemSelected}\n                                    >\n                                        <TableCell padding=\"checkbox\">\n                                            <Checkbox\n                                                onClick={(event) =>\n                                                    handleClick(event, row.id)\n                                                }\n                                                checked={isItemSelected}\n                                                inputProps={{\n                                                    \"aria-labelledby\": labelId,\n                                                }}\n                                            />\n                                        </TableCell>\n                                        {headCells.map(\n                                            (headCell, tableCellIndex) => {\n                                                const tableCellData =\n                                                    row[headCell.id];\n                                                return (\n                                                    headCell.id === 'edit' ?\n                                                        (\n                                                            noEditCol ? null : (\n                                                                <TableCell\n                                                                    key={`edit${tableCellIndex}`}\n                                                                    component=\"th\"\n                                                                    scope=\"row\"\n                                                                    sortDirection={false}\n                                                                >\n                                                                    <Tooltip\n                                                                        title=\"Edit\"\n                                                                        placement=\"bottom\"\n                                                                    >\n                                                                        <IconButton\n                                                                            color=\"primary\"\n                                                                            size=\"small\"\n                                                                            component={Link}\n                                                                            to={`${match.url}/${row.id}/edit`}\n                                                                        >\n                                                                            <EditIcon fontSize=\"default\" />\n                                                                        </IconButton>\n                                                                    </Tooltip>\n                                                                </TableCell>\n                                                            )\n                                                        )\n                                                        : headCell.id === 'delete' ?\n                                                            (\n                                                                noDeleteCol ? null : (\n                                                                    <TableCell\n                                                                        key={`delete${tableCellIndex}`}\n                                                                        component=\"th\"\n                                                                        scope=\"row\"\n                                                                        sortDirection={false}\n                                                                    >\n                                                                        <Tooltip\n                                                                            title=\"Delete\"\n                                                                            placement=\"bottom\"\n                                                                        >\n                                                                            <IconButton\n                                                                                onClick={(event) => {\n                                                                                    handleDelete(\n                                                                                        row.id,\n                                                                                        deleteUrl\n                                                                                    );\n                                                                                }}\n                                                                                color=\"primary\"\n                                                                                size=\"small\"\n                                                                            >\n                                                                                <DeleteIcon fontSize=\"default\" />\n                                                                            </IconButton>\n                                                                        </Tooltip>\n                                                                    </TableCell>\n                                                                )\n                                                            )\n                                                            : headCell.id === 'details' ?\n                                                                (\n                                                                    !noDetailsCol ? null : (\n                                                                        <TableCell\n                                                                            key={`details${tableCellIndex}`}\n                                                                            component=\"th\"\n                                                                            scope=\"row\"\n                                                                            sortDirection={false}\n                                                                        >\n                                                                            <Tooltip\n                                                                                title=\"Details\"\n                                                                                placement=\"bottom\"\n                                                                            >\n                                                                                <IconButton\n                                                                                    color=\"primary\"\n                                                                                    size=\"small\"\n                                                                                    component={Link}\n                                                                                    to={`${match.url}/${row.id}/details`}\n                                                                                >\n                                                                                    <DetailsIcon fontSize=\"default\" />\n                                                                                </IconButton>\n                                                                            </Tooltip>\n                                                                        </TableCell>\n                                                                    )\n                                                                )\n                                                                :\n                                                                <TableCell\n                                                                    key={tableCellIndex}\n                                                                    component=\"th\"\n                                                                    id={labelId}\n                                                                    scope=\"row\"\n                                                                    padding=\"none\"\n                                                                >\n                                                                    {typeof tableCellData ===\n                                                                        \"boolean\"\n                                                                        ? tableCellData\n                                                                            ? \"Yes\"\n                                                                            : \"No\"\n                                                                        : tableCellData}\n                                                                </TableCell>\n                                                );\n                                            }\n                                        )}\n                                    </TableRow>\n                                );\n                            })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[50, 100, 200, 300]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </Box>\n    );\n}\n\nexport default withRouter(CommonTable);\n","import Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\nimport exportDataToXSL, { exportPropertyStatementDataToXSL } from \"../assets/PrintingHelper\";\nimport PropTypes from 'prop-types';\n\nfunction ExportToExcelBtn(props) {\n\tconst { disabled, reportName, reportTitle, headCells, dataToPrint } = props\n\treturn (\n\t\t<Button\n\t\t\ttype=\"button\"\n\t\t\taria-label=\"Export to Excel\"\n\t\t\tvariant=\"contained\"\n\t\t\tsize=\"medium\"\n\t\t\tcolor=\"primary\"\n\t\t\tdisabled={disabled}\n\t\t\tonClick={() => exportDataToXSL(reportName, reportTitle, headCells, dataToPrint, reportName)}\n\t\t\tstartIcon={<ImportExportIcon />}\n\t\t>\n\t\t\tExcel\n\t\t</Button >\n\t);\n}\n\nExportToExcelBtn.propTypes = {\n\treportName: PropTypes.string.isRequired,\n\treportTitle: PropTypes.string.isRequired,\n\theadCells: PropTypes.array.isRequired,\n\tdataToPrint: PropTypes.array.isRequired,\n}\n\nexport default ExportToExcelBtn;\n\nexport function ExportStatementToExcelBtn(props) {\n\tconst { displayText, disabled, reportName, reportTitle, headCells, dataToPrint } = props\n\treturn (\n\t\t<Button\n\t\t\ttype=\"button\"\n\t\t\taria-label=\"Export to Excel\"\n\t\t\tvariant=\"contained\"\n\t\t\tsize=\"medium\"\n\t\t\tcolor=\"primary\"\n\t\t\tdisabled={disabled}\n\t\t\tonClick={() => exportPropertyStatementDataToXSL(reportName, reportTitle, headCells, dataToPrint, reportName)}\n\t\t\tstartIcon={<ImportExportIcon />}\n\t\t>\n\t\t\t{ displayText ? displayText : \"Excel\"}\n\t\t</Button >\n\t);\n}\n\nExportStatementToExcelBtn.propTypes = {\n\treportName: PropTypes.string.isRequired,\n\treportTitle: PropTypes.string.isRequired,\n\theadCells: PropTypes.array.isRequired,\n\tdataToPrint: PropTypes.array.isRequired,\n}\n","import Button from \"@material-ui/core/Button\";\nimport React from \"react\";\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport { printDataRows } from \"../assets/PrintingHelper\";\nimport PropTypes from 'prop-types';\n\nfunction PrintArrayToPdfBtn (props) {\n    const { disabled, reportName, reportTitle, headCells, dataToPrint } = props\n    return (\n        <Button\n            type=\"button\"\n            aria-label=\"Print to Pdf\"\n            variant=\"contained\"\n            size=\"medium\"\n            color=\"primary\"\n            disabled={disabled}\n            onClick={() => printDataRows(reportName, reportTitle, headCells, dataToPrint)}\n            startIcon={<PrintIcon />}\n        >\n            Pdf\n        </Button>\n    );\n}\n\nPrintArrayToPdfBtn.propTypes = {\n    reportName: PropTypes.string.isRequired,\n    reportTitle: PropTypes.string.isRequired,\n    headCells: PropTypes.array.isRequired,\n    dataToPrint: PropTypes.array.isRequired,\n}\n\nexport default PrintArrayToPdfBtn;\n","import React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/PrivateLayout\";\nimport PageHeading from \"../components/PageHeading\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { Link } from \"react-router-dom\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport ExportToExcelBtn from \"../components/ExportToExcelBtn\";\nimport PrintArrayToPdf from \"../components/PrintArrayToPdfBtn\";\nimport CommonTable from \"../components/table/commonTable\";\nimport { handleItemFormSubmit, handleDelete } from \"../actions/actions\";\nimport { commonStyles } from '../components/commonStyles'\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { getTransactionsFilterOptions, currencyFormatter, getCurrentMonthFromToDates, getLastMonthFromToDates, getLastThreeMonthsFromToDates, getLastYearFromToDates, getYearToDateFromToDates } from \"../assets/commonAssets\";\nimport { parse, isWithinInterval, format, startOfToday } from \"date-fns\";\nconst TRANSACTIONS_FILTER_OPTIONS = getTransactionsFilterOptions()\n\nconst defaultDate = format(startOfToday(), 'yyyy-MM-dd')\n\n\nconst headCells = [\n    { id: \"tenant_name\", numeric: false, disablePadding: true, label: \"Tenant Name\", },\n    { id: \"unit_ref\", numeric: false, disablePadding: true, label: \"Unit Ref/Number\", },\n    { id: \"charge_label\", numeric: false, disablePadding: true, label: \"Charge Name/Type\", },\n    { id: \"charge_date\", numeric: false, disablePadding: true, label: \"Charge Date\", },\n    { id: \"charge_amount\", numeric: false, disablePadding: true, label: \"Charge Amount\", },\n    { id: \"payed_status\", numeric: false, disablePadding: true, label: \"Payments Made\" },\n    { id: \"payed_amount\", numeric: false, disablePadding: true, label: \"Total Amounts Paid\" },\n    { id: \"balance\", numeric: false, disablePadding: true, label: \"Balance\" },\n    { id: \"delete\", numeric: false, disablePadding: true, label: \"Delete\" },\n\n];\n\nlet TenantChargesStatementPage = ({\n    properties,\n    contacts,\n    transactions,\n    leases,\n    transactionsCharges,\n    handleItemSubmit,\n    handleItemDelete,\n}) => {\n    const classes = commonStyles()\n    let [tenantChargesItems, setTenantChargesItems] = useState([]);\n    let [filteredChargeItems, setFilteredChargeItems] = useState([]);\n    let [chargeType, setChargeTypeFilter] = useState(\"\");\n    let [fromDateFilter, setFromDateFilter] = useState('');\n    let [toDateFilter, setToDateFilter] = useState(\"\");\n    let [periodFilter, setPeriodFilter] = useState(\"month-to-date\");\n    let [contactFilter, setContactFilter] = useState(null);\n    let [propertyFilter, setPropertyFilter] = useState(\"all\");\n\n    const [selected, setSelected] = useState([]);\n\n    const CHARGE_TYPES = Array.from(new Set(tenantChargesItems\n        .map((chargeItem) => (JSON.stringify({ label: chargeItem.charge_label, value: chargeItem.charge_type })))))\n        .map(chargeType => JSON.parse(chargeType))\n\n    useEffect(() => {\n        const dateRange = getCurrentMonthFromToDates()\n        const startOfPeriod = dateRange[0]\n        const endOfPeriod = dateRange[1]\n        const chargesForCurrentMonth = transactionsCharges.filter((chargeItem) => {\n            const chargeItemDate = parse(chargeItem.charge_date, 'yyyy-MM-dd', new Date())\n            return isWithinInterval(chargeItemDate, { start: startOfPeriod, end: endOfPeriod })\n        })\n        setTenantChargesItems(chargesForCurrentMonth);\n        setFilteredChargeItems(chargesForCurrentMonth);\n    }, [transactionsCharges]);\n\n    const totalNumOfCharges = filteredChargeItems.length\n\n    const totalChargesAmount = filteredChargeItems\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.charge_amount) || 0\n        }, 0)\n\n    const chargesWithPayments = filteredChargeItems.filter(charge => charge.payed_status === true).length\n\n    const totalPaymentsAmount = filteredChargeItems\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.payed_amount) || 0\n        }, 0)\n\n    const handleSearchFormSubmit = (event) => {\n        event.preventDefault();\n        //filter the transactionsCharges according to the search criteria here\n        let filteredStatements = transactionsCharges\n        let dateRange = []\n        let startOfPeriod;\n        let endOfPeriod;\n        if (periodFilter) {\n            switch (periodFilter) {\n                case 'last-month':\n                    dateRange = getLastMonthFromToDates()\n                    startOfPeriod = dateRange[0]\n                    endOfPeriod = dateRange[1]\n                    break;\n                case 'year-to-date':\n                    dateRange = getYearToDateFromToDates()\n                    startOfPeriod = dateRange[0]\n                    endOfPeriod = dateRange[1]\n                    break;\n                case 'last-year':\n                    dateRange = getLastYearFromToDates()\n                    startOfPeriod = dateRange[0]\n                    endOfPeriod = dateRange[1]\n                    break;\n                case 'month-to-date':\n                    dateRange = getCurrentMonthFromToDates()\n                    startOfPeriod = dateRange[0]\n                    endOfPeriod = dateRange[1]\n                    break;\n                case '3-months-to-date':\n                    dateRange = getLastThreeMonthsFromToDates()\n                    startOfPeriod = dateRange[0]\n                    endOfPeriod = dateRange[1]\n                    break;\n                default:\n                    dateRange = getLastMonthFromToDates()\n                    startOfPeriod = dateRange[0]\n                    endOfPeriod = dateRange[1]\n            }\n            filteredStatements = filteredStatements.filter((chargeItem) => {\n                const chargeItemDate = parse(chargeItem.charge_date, 'yyyy-MM-dd', new Date())\n                return isWithinInterval(chargeItemDate, { start: startOfPeriod, end: endOfPeriod })\n            })\n        }\n        filteredStatements = filteredStatements\n            .filter(({ charge_date }) => !fromDateFilter ? true : charge_date >= fromDateFilter)\n            .filter(({ charge_date }) => !toDateFilter ? true : charge_date <= toDateFilter)\n            .filter(({ charge_type }) => !chargeType ? true : charge_type === chargeType.value)\n            .filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter)\n            .filter(({ tenant_id }) => !contactFilter ? true : tenant_id === contactFilter.id)\n        setFilteredChargeItems(filteredStatements);\n    };\n\n    const handleChargeDelete = async (chargeId, url) => {\n        transactions.filter((payment) => payment.charge_id === chargeId).forEach(async payment => {\n            await handleItemDelete(payment.id, \"charge-payments\")\n            if (payment.security_deposit_charge_id) {\n                const leaseWithChargeOnDeposit = leases.find(({ id }) => id === payment.security_deposit_charge_id)\n                if (leaseWithChargeOnDeposit) {\n                    const securityDepositBeforePayment = parseFloat(leaseWithChargeOnDeposit.security_deposit) + parseFloat(payment.payment_amount)\n                    const leaseToEdit = {\n                        id: payment.security_deposit_charge_id,\n                        security_deposit: securityDepositBeforePayment\n                    }\n                    await handleItemSubmit(leaseToEdit, 'leases')\n                }\n            }\n        });\n        await handleItemDelete(chargeId, url)\n    }\n\n    const setChargesPaidInFull = async () => {\n        const chargesToAddPayments = transactionsCharges.filter(({ id }) => selected.includes(id))\n            .filter(({ payed_status }) => payed_status === false)\n        //post the charges here to show that they are payed\n        chargesToAddPayments.forEach(async (charge) => {\n            const chargePayment = {\n                charge_id: charge.id,\n                payment_amount: charge.charge_amount,\n                payment_date: defaultDate,\n                tenant_id: charge.tenant_id,\n                unit_id: charge.unit_id,\n                property_id: charge.property_id,\n                payment_label: charge.charge_label,\n                memo: `${charge.charge_label} Payment`,\n                payment_type: charge.charge_type,\n            };\n            await handleItemSubmit(chargePayment, 'charge-payments')\n            await handleItemSubmit({ id: charge.id, payed: true }, 'transactions-charges')\n        })\n    }\n\n    const resetSearchForm = (event) => {\n        event.preventDefault();\n        setFilteredChargeItems(tenantChargesItems);\n        setChargeTypeFilter(\"\");\n        setFromDateFilter(\"\");\n        setToDateFilter(\"\");\n        setContactFilter(null)\n        setPeriodFilter(\"month-to-date\");\n        setPropertyFilter(\"all\")\n    };\n\n    return (\n        <Layout pageTitle=\"Other Charges\">\n            <Grid\n                container\n                spacing={2}\n                justify=\"center\" direction=\"column\"\n            >\n                <Grid item key={2}>\n                    <PageHeading text={\"Other Charges\"} />\n                </Grid>\n                <Grid\n                    container\n                    spacing={2}\n                    item\n                    alignItems=\"center\"\n                    direction=\"row\"\n                    key={1}\n                >\n                    <Grid item>\n                        <Button\n                            type=\"button\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            startIcon={<AddIcon />}\n                            disabled={!selected.length}\n                            onClick={() => setChargesPaidInFull()}\n                        >\n                            Receive Full Payments\n                            </Button>\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            type=\"button\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            disabled={!selected.length}\n                            startIcon={<AddIcon />}\n                            component={Link}\n                            to={`/app/payments/${selected[0]}/new`}\n                        >\n                            Receive Payment\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            type=\"button\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"medium\"\n                            disabled={!selected.length}\n                            startIcon={<AddIcon />}\n                            to={`/app/payments/${selected[0]}/new?charge_deposit=1`}\n                            component={Link}\n                        >\n                            Charge on Deposit\n                            </Button>\n                    </Grid>\n                    <Grid item>\n                        <ExportToExcelBtn\n                            disabled={!selected.length}\n                            reportName={`Tenants Charges Records`}\n                            reportTitle={'Tenant Charges Data'}\n                            headCells={headCells}\n                            dataToPrint={tenantChargesItems.filter(({ id }) => selected.includes(id))}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <PrintArrayToPdf\n                            disabled={!selected.length}\n                            reportName={'Tenant Charges Data'}\n                            reportTitle={`Tenant Charges Records`}\n                            headCells={headCells}\n                            dataToPrint={tenantChargesItems.filter(({ id }) => selected.includes(id))}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid item container>\n                    <Grid item sm={12}>\n                        <Box\n                            border={1}\n                            borderRadius=\"borderRadius\"\n                            borderColor=\"grey.400\"\n                        >\n                            <form\n                                className={classes.form}\n                                id=\"contactSearchForm\"\n                                onSubmit={handleSearchFormSubmit}\n                            >\n                                <Grid\n                                    container\n                                    spacing={2}\n                                    justify=\"center\"\n                                    direction=\"column\"\n                                >\n                                    <Grid item container direction=\"column\" spacing={2}>\n                                        <Grid item container direction=\"row\" spacing={2}>\n                                            <Grid item container xs={12} md={6} direction=\"row\" spacing={2}>\n                                                <Grid item xs={12} md={6}>\n                                                    <TextField\n                                                        fullWidth\n                                                        variant=\"outlined\"\n                                                        type=\"date\"\n                                                        id=\"from_date_filter\"\n                                                        name=\"from_date_filter\"\n                                                        label=\"From Date\"\n                                                        value={fromDateFilter}\n                                                        onChange={(event) => {\n                                                            setFromDateFilter(\n                                                                event.target.value\n                                                            );\n                                                        }}\n                                                        InputLabelProps={{ shrink: true }}\n                                                    />\n                                                </Grid>\n                                                <Grid item xs={12} md={6}>\n                                                    <TextField\n                                                        fullWidth\n                                                        variant=\"outlined\"\n                                                        type=\"date\"\n                                                        name=\"to_date_filter\"\n                                                        label=\"To Date\"\n                                                        id=\"to_date_filter\"\n                                                        onChange={(event) => {\n                                                            setToDateFilter(event.target.value);\n                                                        }}\n                                                        value={toDateFilter}\n                                                        InputLabelProps={{ shrink: true }}\n                                                    />\n                                                </Grid>\n                                            </Grid>\n                                            <Grid item md={6} xs={12}>\n                                                <TextField\n                                                    fullWidth\n                                                    variant=\"outlined\"\n                                                    select\n                                                    id=\"period_filter\"\n                                                    name=\"period_filter\"\n                                                    label=\"Period\"\n                                                    value={periodFilter}\n                                                    onChange={(event) => {\n                                                        setPeriodFilter(\n                                                            event.target.value\n                                                        );\n                                                    }}\n                                                    InputLabelProps={{ shrink: true }}\n                                                >\n                                                    {TRANSACTIONS_FILTER_OPTIONS.map((filterOption, index) => (\n                                                        <MenuItem\n                                                            key={index}\n                                                            value={filterOption.id}\n                                                        >\n                                                            {filterOption.text}\n                                                        </MenuItem>\n                                                    ))}\n                                                </TextField>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item container direction=\"row\" spacing={2}>\n                                            <Grid item xs={12} md={4}>\n                                                <TextField\n                                                    fullWidth\n                                                    select\n                                                    variant=\"outlined\"\n                                                    name=\"property_filter\"\n                                                    label=\"Property\"\n                                                    id=\"property_filter\"\n                                                    onChange={(event) => {\n                                                        setPropertyFilter(\n                                                            event.target.value\n                                                        );\n                                                    }}\n                                                    value={propertyFilter}\n                                                >\n                                                    <MenuItem key={\"all\"} value={\"all\"}>All Properties</MenuItem>\n                                                    {properties.map(\n                                                        (property, index) => (\n                                                            <MenuItem\n                                                                key={index}\n                                                                value={property.id}\n                                                            >\n                                                                {property.ref}\n                                                            </MenuItem>\n                                                        )\n                                                    )}\n                                                </TextField>\n                                            </Grid>\n                                            <Grid item xs={12} md={4}>\n                                                <Autocomplete\n                                                    id=\"contact_filter\"\n                                                    options={contacts}\n                                                    getOptionSelected={(option, value) => option.id === value.id}\n                                                    name=\"contact_filter\"\n                                                    defaultValue=\"\"\n                                                    onChange={(event, newValue) => {\n                                                        setContactFilter(newValue);\n                                                    }}\n                                                    value={contactFilter}\n                                                    getOptionLabel={(tenant) => tenant ? `${tenant.first_name} ${tenant.last_name}` : ''}\n                                                    style={{ width: \"100%\" }}\n                                                    renderInput={(params) => <TextField {...params} label=\"Tenant\" variant=\"outlined\" />}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} md={4}>\n                                                <Autocomplete\n                                                    id=\"charge_type_filter\"\n                                                    options={CHARGE_TYPES}\n                                                    getOptionSelected={(option, value) => option.value === value.value}\n                                                    name=\"charge_type_filter\"\n                                                    onChange={(event, newValue) => {\n                                                        setChargeTypeFilter(newValue);\n                                                    }}\n                                                    value={chargeType}\n                                                    getOptionLabel={(charge_type) => charge_type ? charge_type.label : ''}\n                                                    style={{ width: \"100%\" }}\n                                                    renderInput={(params) => <TextField {...params} label=\"Charge Type\" variant=\"outlined\" />}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid\n                                        container\n                                        spacing={2}\n                                        item\n                                        justify=\"flex-end\"\n                                        alignItems=\"center\"\n                                        direction=\"row\"\n                                        key={1}\n                                    >\n                                        <Grid item>\n                                            <Button\n                                                onClick={(event) => handleSearchFormSubmit(event)}\n                                                type=\"submit\"\n                                                form=\"contactSearchForm\"\n                                                color=\"primary\"\n                                                variant=\"contained\"\n                                                size=\"medium\"\n                                                startIcon={<SearchIcon />}\n                                            >\n                                                SEARCH\n                                    </Button>\n                                        </Grid>\n                                        <Grid item>\n                                            <Button\n                                                onClick={(event) => resetSearchForm(event)}\n                                                type=\"reset\"\n                                                form=\"contactSearchForm\"\n                                                color=\"primary\"\n                                                variant=\"contained\"\n                                                size=\"medium\"\n                                                startIcon={<UndoIcon />}\n                                            >\n                                                RESET\n                                    </Button>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </form>\n                        </Box>\n                    </Grid>\n                </Grid>\n                <Grid item container>\n                    <Grid item sm={12}>\n                        <Box border={1} borderRadius=\"borderRadius\" borderColor=\"grey.400\" className={classes.form}>\n                            <Grid container direction=\"row\" spacing={1}>\n                                <Grid item container md={4}>\n                                    <Grid item sm={12}>\n                                        <Typography variant=\"subtitle1\" align=\"center\">\n                                            Total Charges: {currencyFormatter.format(totalChargesAmount)}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item sm={12}>\n                                        <Typography variant=\"subtitle1\" align=\"center\">\n                                            Total Charges: {totalNumOfCharges}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                                <Grid item container md={4}>\n                                    <Grid item sm={12}>\n                                        <Typography variant=\"subtitle1\" align=\"center\">\n                                            Total  Payments: {currencyFormatter.format(totalPaymentsAmount)}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item sm={12}>\n                                        <Typography variant=\"subtitle1\" align=\"center\">\n                                            Charges With Payments: {chargesWithPayments}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                                <Grid item container md={4}>\n                                    <Grid item sm={12}>\n                                        <Typography variant=\"subtitle1\" align=\"center\">\n                                            Outstanding Balances: {currencyFormatter.format((totalChargesAmount - totalPaymentsAmount))}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item sm={12}>\n                                        <Typography variant=\"subtitle1\" align=\"center\">\n                                            Charges Without Payments: {(totalNumOfCharges - chargesWithPayments)}\n                                        </Typography>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Grid>\n                </Grid>\n                <Grid item container>\n                    <Grid item sm={12}>\n                        <CommonTable\n                            selected={selected}\n                            setSelected={setSelected}\n                            rows={filteredChargeItems}\n                            headCells={headCells}\n                            noDetailsCol={true}\n                            noEditCol={true}\n                            deleteUrl={'transactions-charges'}\n                            handleDelete={handleChargeDelete}\n                        />\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Layout >\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        transactions: state.transactions.filter((payment) => payment.payment_type !== 'rent'),\n        transactionsCharges: state.transactionsCharges\n            .filter((charge) => charge.charge_type !== 'rent')\n            .map((charge) => {\n                const tenant = state.contacts.find((contact) => contact.id === charge.tenant_id) || {};\n                const unitWithCharge = state.propertyUnits.find(({ id }) => id === charge.unit_id) || {};\n                const chargeDetails = {}\n                chargeDetails.tenant_name = `${tenant.first_name} ${tenant.last_name}`\n                chargeDetails.tenant_id_number = tenant.id_number\n                chargeDetails.unit_ref = unitWithCharge.ref\n                //get payments with this charge id\n                const chargePayments = state.transactions.filter((payment) => payment.charge_id === charge.id)\n                chargeDetails.payed_status = chargePayments.length ? true : false;\n                const payed_amount = chargePayments.reduce((total, currentValue) => {\n                    return total + parseFloat(currentValue.payment_amount) || 0\n                }, 0)\n                chargeDetails.payed_amount = payed_amount\n                chargeDetails.balance = parseFloat(charge.charge_amount) - payed_amount\n                return Object.assign({}, charge, chargeDetails);\n            }).sort((charge1, charge2) => parse(charge2.charge_date, 'yyyy-MM-dd', new Date()) -\n                parse(charge1.charge_date, 'yyyy-MM-dd', new Date())),\n        contacts: state.contacts,\n        leases: state.leases,\n        properties: state.properties,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleItemSubmit: (item, url) => dispatch(handleItemFormSubmit(item, url)),\n        handleItemDelete: (itemId, url) => dispatch(handleDelete(itemId, url)),\n    };\n};\n\nTenantChargesStatementPage = connect(mapStateToProps, mapDispatchToProps)(TenantChargesStatementPage);\n\nexport default withRouter(TenantChargesStatementPage);\n"],"sourceRoot":""}