{"version":3,"sources":["../node_modules/date-fns/esm/addMonths/index.js","assets/commonAssets.js","../node_modules/date-fns/esm/startOfMonth/index.js","../node_modules/date-fns/esm/subMonths/index.js","../node_modules/date-fns/esm/endOfMonth/index.js","../node_modules/date-fns/esm/addYears/index.js","../node_modules/date-fns/esm/subYears/index.js","../node_modules/date-fns/esm/isWithinInterval/index.js","../node_modules/date-fns/esm/addDays/index.js","Routes/PropertyPerformancePage.js","../node_modules/date-fns/esm/isSameDay/index.js"],"names":["addMonths","dirtyDate","dirtyAmount","requiredArgs","arguments","date","toDate","amount","toInteger","isNaN","Date","NaN","dayOfMonth","getDate","endOfDesiredMonth","getTime","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","monthsInYear","eachMonthOfInterval","start","startOfYear","startOfToday","end","endOfYear","TITLES_LIST","GENDERS_LIST","EXPENSES_CATEGORIES","UNIT_TYPES","LEASE_OPTIONS","METER_TYPES","PAYMENT_FREQUENCY_OPTIONS","getContactTitles","getGendersList","getExpensesCategories","getUnitTypes","getPropertyBaths","baths","i","push","concat","getPropertyBeds","beds","getMeterTypes","getLeaseOptions","getPaymentOptions","getTransactionsFilterOptions","id","text","getLastMonthFromToDates","startOfMonth","subMonths","endOfMonth","getLastYearFromToDates","subYears","getYearToDateFromToDates","getCurrentMonthFromToDates","getLastThreeMonthsFromToDates","getMonthsInYear","currencyFormatter","Intl","NumberFormat","undefined","style","currency","setDate","setHours","month","addYears","isWithinInterval","dirtyInterval","interval","time","startTime","endTime","RangeError","addDays","chargesPerformanceGraphsOptions","responsive","tooltips","mode","scales","xAxes","ticks","min","max","graphOptions","elements","line","fill","yAxes","FilterYearSchema","Yup","shape","filter_year","typeError","required","positive","integer","connect","state","properties","transactionsCharges","map","charge","chargeDetails","chargePayments","transactions","filter","payment","charge_id","length","payed_status","last_payment_date","slice","payment_date","payed_amount","reduce","total","currentValue","parseFloat","payment_amount","balance","charge_amount","Object","assign","expenses","classes","commonStyles","useState","propertyFilter","setPropertyFilter","chargesItems","setChargesItems","expensesItems","setExpensesItems","useEffect","charge_date","getYear","parse","expense_date","paymentsTypes","Set","chargeItem","charge_type","paymentTotalsForPaymentType","paymentType","paymentsTypesForDisplay","result","totalRentCharges","totalOtherCharges","totalRentPayments","totalOtherChargesPayments","totalRentChargesBalances","totalOtherChargesBalances","monthsOfYearLabels","monthDate","format","chargesAndPaymentsGraphData","labels","datasets","incomeCategoriesGraphData","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data","totalEachMonthPayments","chargeDate","currentTransaction","totalEachMonthExpenses","expense","expenseDate","totalEachMonthCharges","expensesCategoriesGraphData","type","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","rentChargesPaymentsPeformanceData","due_date","next_thirty","next_sixty","next_ninety","next_three_months","otherChargesPaymentsPeformanceData","forEach","rentCharge","rentChargeLastPaymentDate","rentChargeDueDate","endOfNextThirtyDays","endOfNextSixtyDays","endOfNextNinetyDays","endOfNextThreeMonths","dirtyDateLeft","dirtyDateRight","dateLeftStartOfDay","startOfDay","dateRightStartOfDay","isSameDay","otherCharge","otherChargeLastPaymentDate","otherChargeDueDate","getPeriodDisplayValue","objectKeys","Array","from","key","displayName","getPerformanceDataFromObject","performanceObject","totalPerformanceDataPoints","values","dataPoint","performanceDataPoint","rentCollectionPerformanceData","keys","otherChargesCollectionPerformanceData","pageTitle","Grid","container","justify","direction","spacing","item","PageHeading","Box","border","borderRadius","initialValues","validationSchema","onSubmit","filterYear","parseInt","property_id","handleSubmit","touched","errors","handleChange","handleBlur","className","form","alignItems","sm","TextField","fullWidth","select","variant","name","onChange","event","target","value","MenuItem","property","index","ref","onBlur","error","helperText","Button","color","size","startIcon","InfoDisplayPaper","xs","title","Typography","align","gutterBottom","options","component","height"],"mappings":"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","file":"static/js/31.06f673bf.chunk.js","sourcesContent":["import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * var result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 1, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import { endOfMonth, endOfYear, startOfToday, eachMonthOfInterval, startOfMonth, startOfYear, subMonths, subYears } from \"date-fns\";\n\nconst monthsInYear = eachMonthOfInterval({\n\tstart: startOfYear(startOfToday()),\n\tend: endOfYear(startOfToday()),\n})\n//general contact titles\nconst TITLES_LIST = [\"Mr\", \"Prof\", \"Hon\", \"Sir\", \"Mrs\", \"Miss\", \"Dr\", \"Madam\", \"Other\"]\nconst GENDERS_LIST = [\"Male\", \"Female\", \"Unspecified\"];\nconst EXPENSES_CATEGORIES = [\n\t'Security Deposit Refund',\n\t'Water Deposit Refund',\n\t'Management Fees',\n\t'Utilities',\n\t'Taxes',\n\t'Mortgage',\n\t'Office',\n\t'Maintenance & Cleaning',\n\t'Advertising',\n\t'Insurance',\n\t'Legal & Other Professional Fees',\n\t'Auto & Travel',\n\t'Supplies',\n\t'Other Refund',\n\t'Repairs',\n\t'Other'\n]\nconst PROPRERTY_TYPES = [\n\t\"Residential\",\n\t\"Condo/Townhouse\",\n\t\"Multi-family\",\n\t\"Single-family\",\n]\nconst UNIT_TYPES = [\n\t\"Bed Sitter\",\n\t\"One Bedroom\",\n\t\"Two Bedroom\",\n\t\"Single Room\",\n\t\"Double Room\",\n\t\"Shop\",\n\t\"Other\",\n];\nconst LEASE_OPTIONS = [\n\t\"Fixed\",\n\t\"Fixed w/rollover\",\n];\nconst METER_TYPES = [\"Electric\", \"Sewer\", \"Water\"];\nconst FREQUENCY_OPTIONS = [\"Per Day\", \"Week\", \"Month\", \"Quarter\", \"Half Year\", \"Year\"];\nconst PAYMENT_FREQUENCY_OPTIONS = [\"Daily\", \"Weekly\", \"Monthly\", \"Quarterly\", \"Half-Yearly\", \"Yearly\"];\n\n//functions to get the above values\nexport function getContactTitles() {\n\treturn TITLES_LIST;\n}\n\nexport function getGendersList() {\n\treturn GENDERS_LIST;\n}\n\nexport function getExpensesCategories() {\n\treturn EXPENSES_CATEGORIES;\n}\n\n//general property types\nexport function getPropertyTypes() {\n\treturn PROPRERTY_TYPES;\n}\n\n//general unit types\nexport function getUnitTypes() {\n\treturn UNIT_TYPES;\n}\n\nexport function getPropertyBaths() {\n\tconst baths = [];\n\tfor (let i = 1; i <= 5; i++) {\n\t\tbaths.push(i);\n\t}\n\treturn baths.concat(\"5+\");\n}\n\nexport function getPropertyBeds() {\n\tconst beds = [];\n\tfor (let i = 1; i <= 5; i++) {\n\t\tbeds.push(i);\n\t}\n\treturn beds;\n}\n\nexport function getFrequencyOptions() {\n\treturn FREQUENCY_OPTIONS;\n}\n\nexport function getMeterTypes() {\n\treturn METER_TYPES;\n}\n\nexport function getLeaseOptions() {\n\treturn LEASE_OPTIONS;\n}\n\nexport function getPaymentOptions() {\n\treturn PAYMENT_FREQUENCY_OPTIONS;\n}\n\nexport function getTransactionsFilterOptions() {\n\treturn [\n\t\t{ id: 'month-to-date', text: 'Month To Date' }, { id: 'last-month', text: 'Last Month' },\n\t\t{ id: '3-months-to-date', text: '3 Months To Date' }, { id: 'year-to-date', text: 'Year To Date' },\n\t\t{ id: 'last-year', text: 'Last Year' },];\n}\n\nexport function getLastMonthFromToDates() {\n\treturn [startOfMonth(subMonths(startOfToday(), 1)), endOfMonth(subMonths(startOfToday(), 1))]\n}\n\nexport function getLastYearFromToDates() {\n\treturn [startOfYear(subYears(startOfToday(), 1)), endOfYear(subYears(startOfToday(), 1))]\n}\n\nexport function getYearToDateFromToDates() {\n\treturn [startOfYear(startOfToday()), startOfToday()]\n}\n\nexport function getCurrentMonthFromToDates() {\n\treturn [startOfMonth(startOfToday()), endOfMonth(startOfToday())]\n}\n\nexport function getLastThreeMonthsFromToDates() {\n\treturn [startOfMonth(subMonths(startOfToday(), 2)), endOfMonth(startOfToday())]\n}\n\nexport function getMonthsInYear() {\n\treturn monthsInYear\n}\n\n// Create our number formatter.\nexport const currencyFormatter = new Intl.NumberFormat(undefined, {\n\tstyle: 'decimal',\n\tcurrency: 'KES',\n});\n","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * var result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * var result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * var result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addYears from '../addYears/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * var result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\n\nexport default function subYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addYears(dirtyDate, -amount);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `isWithinRange` to `isWithinInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   isWithinRange(\n *     new Date(2014, 0, 3),\n *     new Date(2014, 0, 1), new Date(2014, 0, 7)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   isWithinInterval(\n *     new Date(2014, 0, 3),\n *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date to check\n * @param {Interval} interval - the interval to check\n * @returns {Boolean} the date is within the interval\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date }) // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end }) // => true\n */\n\nexport default function isWithinInterval(dirtyDate, dirtyInterval) {\n  requiredArgs(2, arguments);\n  var interval = dirtyInterval || {};\n  var time = toDate(dirtyDate).getTime();\n  var startTime = toDate(interval.start).getTime();\n  var endTime = toDate(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  return time >= startTime && time <= endTime;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * var result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/PrivateLayout\";\nimport { connect } from \"react-redux\";\nimport PageHeading from \"../components/PageHeading\";\nimport InfoDisplayPaper from \"../components/InfoDisplayPaper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Bar, HorizontalBar } from 'react-chartjs-2';\nimport { commonStyles } from '../components/commonStyles'\nimport * as Yup from \"yup\";\nimport { Formik } from \"formik\";\nimport { format, getYear, parse, getMonth, isWithinInterval, startOfToday, addDays, isSameDay } from \"date-fns\";\nimport { getMonthsInYear, currencyFormatter } from \"../assets/commonAssets\";\n\n\nconst chargesPerformanceGraphsOptions = {\n    responsive: true,\n    tooltips: {\n        mode: 'label'\n    },\n    scales: {\n        xAxes: [\n            {\n                ticks: {\n                    min: 0,\n                    max: 100,\n                }\n            }\n        ]\n    }\n};\n\nconst graphOptions = {\n    responsive: true,\n    tooltips: {\n        mode: 'label'\n    },\n    elements: {\n        line: {\n            fill: false\n        }\n    },\n    scales: {\n        yAxes: [\n            {\n                ticks: {\n                    min: 0,\n                }\n            }\n        ],\n        xAxes: [\n            {\n                ticks: {\n                    min: 0,\n                }\n            }\n        ]\n    }\n};\n\nconst FilterYearSchema = Yup.object().shape({\n    filter_year: Yup.number()\n        .typeError(\"Year must be a number!\")\n        .required(\"Year is required\")\n        .positive()\n        .min(0, \"Must be greater than 0\")\n        .max(2100, \"Sorry but we won't be here during those times.\")\n        .integer(),\n});\n\nconst monthsInYear = getMonthsInYear()\n\nlet PropertyPerformancePage = ({ transactionsCharges, expenses, properties }) => {\n    const classes = commonStyles()\n    let [propertyFilter, setPropertyFilter] = useState(\"all\");\n    const [chargesItems, setChargesItems] = useState([]);\n    const [expensesItems, setExpensesItems] = useState(expenses);\n\n    useEffect(() => {\n        setChargesItems(transactionsCharges\n            .filter(({ charge_date }) => getYear(parse(charge_date, 'yyyy-MM-dd', new Date())) === getYear(new Date()))\n        );\n    }, [transactionsCharges]);\n\n    useEffect(() => {\n        setExpensesItems(expenses\n            .filter(({ expense_date }) => getYear(parse(expense_date, 'yyyy-MM-dd', new Date())) === getYear(new Date()))\n        );\n    }, [expenses]);\n\n    const setFilteredTransactionItemsByYear = (filterYear) => {\n        setChargesItems(\n            transactionsCharges\n                .filter(({ charge_date }) => getYear(parse(charge_date, 'yyyy-MM-dd', new Date())) === filterYear)\n                .filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter)\n        );\n        setExpensesItems(\n            expenses\n                .filter(({ expense_date }) => getYear(parse(expense_date, 'yyyy-MM-dd', new Date())) === filterYear)\n                .filter(({ property_id }) => propertyFilter === \"all\" ? true : property_id === propertyFilter)\n        );\n    };\n    //get the different charges types as a set\n    const paymentsTypes = [...new Set(chargesItems.filter(chargeItem => chargeItem.payed_status)\n        .map(charge => charge.charge_type))]\n    //get totals payments for each payment type\n    const paymentTotalsForPaymentType = paymentsTypes.map(paymentType => {\n        return chargesItems.filter(charge => charge.charge_type === paymentType && charge.payed_status)\n            .reduce((total, currentValue) => {\n                return total + parseFloat(currentValue.payed_amount) || 0\n            }, 0)\n    })\n    const paymentsTypesForDisplay = paymentsTypes.map(paymentType => {\n        let result;\n        switch (paymentType) {\n            case 'security_deposit':\n                result = \"Security Deposit\"\n                break;\n            case 'rent':\n                result = \"Rent\"\n                break;\n            case 'recurring_charge':\n                result = \"Recurring Charges\"\n                break;\n            case 'meter_type' || \"meter\":\n                result = \"Utility Charge\"\n                break;\n            case 'one_time_charge':\n                result = \"Recurring Charges\"\n                break;\n            default:\n                result = \"Others\"\n                break;\n        }\n        return result;\n    })\n\n    //get the total values of the various charges and payments \n    const totalRentCharges = chargesItems.filter(charge => charge.charge_type === 'rent')\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.charge_amount) || 0\n        }, 0)\n\n    const totalOtherCharges = chargesItems.filter(charge => charge.charge_type !== 'rent')\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.charge_amount) || 0\n        }, 0)\n\n    const totalRentPayments = chargesItems.filter(payment => payment.charge_type === 'rent')\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.payed_amount) || 0\n        }, 0)\n\n    const totalOtherChargesPayments = chargesItems.filter(payment => payment.charge_type !== 'rent')\n        .reduce((total, currentValue) => {\n            return total + parseFloat(currentValue.payed_amount) || 0\n        }, 0)\n    const totalRentChargesBalances = totalRentCharges - totalRentPayments\n    const totalOtherChargesBalances = totalOtherCharges - totalOtherChargesPayments\n    //get months in an year in short format\n    const monthsOfYearLabels = monthsInYear.map((monthDate) => format(monthDate, 'MMMM'));\n    //get charges and payments graph data from previous values\n    const chargesAndPaymentsGraphData = {\n        labels: monthsOfYearLabels,\n        datasets: []\n    }\n\n    //get income categories graph data from previous values\n    const incomeCategoriesGraphData = {\n        labels: paymentsTypesForDisplay,\n        datasets: [\n            {\n                label: 'Income Categories',\n                backgroundColor: 'rgba(130, 224, 170,0.6)',\n                borderColor: 'rgba(130, 224, 170,1)',\n                borderWidth: 1,\n                hoverBackgroundColor: 'rgba(130, 224, 170,1)',\n                hoverBorderColor: 'rgba(130, 224, 170,1)',\n                data: paymentTotalsForPaymentType\n            }\n        ]\n    }\n    const totalEachMonthPayments = monthsInYear.map((monthDate) => {\n        //get transactions recorded in the same month and year as monthDate\n        return chargesItems\n            .filter((charge) => {\n                const chargeDate = parse(charge.charge_date, 'yyyy-MM-dd', new Date())\n                return getMonth(monthDate) === getMonth(chargeDate)\n            }).reduce((total, currentTransaction) => total + (parseFloat(currentTransaction.payed_amount) || 0), 0)\n    })\n    const totalEachMonthExpenses = monthsInYear.map((monthDate) => {\n        //get transactions recorded in the same month and year as monthDate\n        return expensesItems\n            .filter((expense) => {\n                const expenseDate = parse(expense.expense_date, 'yyyy-MM-dd', new Date())\n                return getMonth(monthDate) === getMonth(expenseDate)\n            }).reduce((total, currentTransaction) => total + (parseFloat(currentTransaction.amount) || 0), 0)\n    })\n\n    const totalEachMonthCharges = monthsInYear.map((monthDate) => {\n        //get transactions recorded in the same month and year as monthDate\n        return chargesItems\n            .filter((charge) => {\n                const chargeDate = parse(charge.charge_date, 'yyyy-MM-dd', new Date())\n                return getMonth(monthDate) === getMonth(chargeDate)\n            }).reduce((total, currentTransaction) => total + (parseFloat(currentTransaction.charge_amount) || 0), 0)\n    })\n\n    //get expenses categories graph data from previous values\n    const expensesCategoriesGraphData = {\n        labels: monthsOfYearLabels,\n        datasets: [\n            {\n                label: 'Expenses',\n                backgroundColor: \"rgba(174, 182, 191,0.6)\",\n                borderColor: 'rgba(174, 182, 191,1)',\n                borderWidth: 1,\n                hoverBackgroundColor: 'rgba(174, 182, 191, 1)',\n                hoverBorderColor: 'rgba(174, 182, 191,1)',\n                data: totalEachMonthExpenses\n            }\n        ]\n    }\n\n    chargesAndPaymentsGraphData.datasets.push({\n        data: totalEachMonthPayments,\n        label: 'Monthly Payments Collection', type: 'bar',\n        fill: false,\n        backgroundColor: '#71B37C',\n        borderColor: '#71B37C',\n        hoverBackgroundColor: '#71B37C',\n        hoverBorderColor: '#71B37C',\n    })\n\n    chargesAndPaymentsGraphData.datasets.push({\n        data: totalEachMonthCharges,\n        label: 'Monthly Charges', type: 'line', borderColor: '#EC932F', fill: false,\n        backgroundColor: '#EC932F',\n        pointBorderColor: '#EC932F',\n        pointBackgroundColor: '#EC932F',\n        pointHoverBackgroundColor: '#EC932F',\n        pointHoverBorderColor: '#EC932F',\n    })\n\n    const rentChargesPaymentsPeformanceData = {\n        due_date: 0,\n        next_thirty: 0,\n        next_sixty: 0,\n        next_ninety: 0,\n        next_three_months: 0,\n    }\n    const otherChargesPaymentsPeformanceData = {\n        due_date: 0,\n        next_thirty: 0,\n        next_sixty: 0,\n        next_ninety: 0,\n        next_three_months: 0,\n    }\n\n    chargesItems.filter(({ charge_type, payed_status }) => charge_type === \"rent\" && payed_status)\n        .forEach(rentCharge => {\n            const rentChargeLastPaymentDate = parse(rentCharge.last_payment_date, 'yyyy-MM-dd', new Date())\n            const rentChargeDueDate = parse(rentCharge.due_date, 'yyyy-MM-dd', new Date())\n            const endOfNextThirtyDays = addDays(rentChargeDueDate, 30);\n            const endOfNextSixtyDays = addDays(rentChargeDueDate, 60);\n            const endOfNextNinetyDays = addDays(rentChargeDueDate, 90);\n            const endOfNextThreeMonths = new Date(2100, 0, 1);\n            //check if payment was made on the due date\n            if (isSameDay(rentChargeLastPaymentDate, rentChargeDueDate)) {\n                rentChargesPaymentsPeformanceData['due_date'] += 1\n            }\n            //check if payment was made within 7 days\n            else if (isWithinInterval(rentChargeLastPaymentDate, { start: rentChargeDueDate, end: endOfNextThirtyDays })) {\n                rentChargesPaymentsPeformanceData['next_thirty'] += 1\n            }\n            //check if payment was made within 14 days\n            else if (isWithinInterval(rentChargeLastPaymentDate, { start: endOfNextThirtyDays, end: endOfNextSixtyDays })) {\n                rentChargesPaymentsPeformanceData['next_sixty'] += 1\n            }\n            //check if payment was made within 30 days\n            else if (isWithinInterval(rentChargeLastPaymentDate, { start: endOfNextSixtyDays, end: endOfNextNinetyDays })) {\n                rentChargesPaymentsPeformanceData['next_ninety'] += 1\n            }\n            //check if payment was made within 120+ days\n            else if (isWithinInterval(rentChargeLastPaymentDate, { start: endOfNextNinetyDays, end: endOfNextThreeMonths })) {\n                rentChargesPaymentsPeformanceData['next_three_months'] += 1\n            }\n        })\n    chargesItems.filter(({ charge_type, payed_status }) => charge_type != \"rent\" && payed_status)\n        .forEach(otherCharge => {\n            const otherChargeLastPaymentDate = parse(otherCharge.last_payment_date, 'yyyy-MM-dd', new Date())\n            const otherChargeDueDate = parse(otherCharge.due_date, 'yyyy-MM-dd', new Date())\n            const endOfNextThirtyDays = addDays(otherChargeDueDate, 30);\n            const endOfNextSixtyDays = addDays(otherChargeDueDate, 60);\n            const endOfNextNinetyDays = addDays(otherChargeDueDate, 90);\n            const endOfNextThreeMonths = new Date(2100, 0, 1);\n            //check if payment was made on the due date\n            if (otherChargeLastPaymentDate === otherChargeDueDate) {\n                otherChargesPaymentsPeformanceData['due_date'] += 1\n            }\n            //check if payment was made within 7 days\n            else if (isWithinInterval(otherChargeLastPaymentDate, { start: otherChargeDueDate, end: endOfNextThirtyDays })) {\n                otherChargesPaymentsPeformanceData['next_thirty'] += 1\n            }\n            //check if payment was made within 14 days\n            else if (isWithinInterval(otherChargeLastPaymentDate, { start: endOfNextThirtyDays, end: endOfNextSixtyDays })) {\n                otherChargesPaymentsPeformanceData['next_sixty'] += 1\n            }\n            //check if payment was made within 30 days\n            else if (isWithinInterval(otherChargeLastPaymentDate, { start: endOfNextSixtyDays, end: endOfNextNinetyDays })) {\n                otherChargesPaymentsPeformanceData['next_ninety'] += 1\n            }\n            //check if payment was made within 120+ days\n            else if (isWithinInterval(otherChargeLastPaymentDate, { start: endOfNextNinetyDays, end: endOfNextThreeMonths })) {\n                otherChargesPaymentsPeformanceData['next_three_months'] += 1\n            }\n        })\n\n    const getPeriodDisplayValue = (objectKeys) => {\n        return Array.from(objectKeys).map(key => {\n            let displayName;\n            switch (key) {\n                case \"due_date\":\n                    displayName = \"Due Date\"\n                    break;\n                case \"next_thirty\":\n                    displayName = \"Due Date + 30 days\"\n                    break;\n                case \"next_sixty\":\n                    displayName = \"Due Date + 60 days\"\n                    break;\n                case \"next_ninety\":\n                    displayName = \"Due Date + 90 days\"\n                    break;\n                case \"next_three_months\":\n                    displayName = \"Due Date + 120 days\"\n                    break;\n                default:\n                    break;\n            }\n            return displayName;\n        })\n    }\n\n    const getPerformanceDataFromObject = (performanceObject) => {\n        const totalPerformanceDataPoints = Object.values(performanceObject)\n            .reduce((total, dataPoint) => total + dataPoint, 0)\n        return Object.values(performanceObject)\n            .map(performanceDataPoint => (performanceDataPoint / totalPerformanceDataPoints) * 100)\n    }\n\n    //get charges payments performance graph data\n    const rentCollectionPerformanceData = {\n        labels: getPeriodDisplayValue(Object.keys(rentChargesPaymentsPeformanceData)),\n        datasets: [\n            {\n                label: 'Rent',\n                backgroundColor: \"rgba(174, 184, 191,0.6)\",\n                borderColor: 'rgba(174, 184, 191,1)',\n                borderWidth: 1,\n                hoverBackgroundColor: 'rgba(174, 184, 191, 1)',\n                hoverBorderColor: 'rgba(174, 184, 191,1)',\n                data: getPerformanceDataFromObject(rentChargesPaymentsPeformanceData)\n            }\n        ]\n    }\n\n    //get charges payments performance graph data\n    const otherChargesCollectionPerformanceData = {\n        labels: getPeriodDisplayValue(Object.keys(otherChargesPaymentsPeformanceData)),\n        datasets: [\n            {\n                label: 'Service Charges',\n                backgroundColor: \"rgba(174, 182, 191,0.6)\",\n                borderColor: 'rgba(174, 182, 191,1)',\n                borderWidth: 1,\n                hoverBackgroundColor: 'rgba(174, 182, 191, 1)',\n                hoverBorderColor: 'rgba(174, 182, 191,1)',\n                data: getPerformanceDataFromObject(otherChargesPaymentsPeformanceData)\n            }\n        ]\n    }\n\n    return (\n        <Layout pageTitle=\"Property Performance\">\n            <Grid container justify=\"center\" direction=\"column\" spacing={4}>\n                <Grid item key={0}>\n                    <PageHeading text=\"Property Performance\" />\n                </Grid>\n                <Grid container item direction=\"column\" spacing={2}>\n                    <Grid item>\n                        <Box\n                            border={1}\n                            borderRadius=\"borderRadius\"\n                            borderColor=\"grey.400\"\n                        >\n                            <Formik\n                                initialValues={{ filter_year: getYear(new Date()) }}\n                                validationSchema={FilterYearSchema}\n                                onSubmit={(values) => {\n                                    setFilteredTransactionItemsByYear(parseInt(values.filter_year));\n                                }}\n                            >\n                                {({\n                                    values,\n                                    handleSubmit,\n                                    touched,\n                                    errors,\n                                    handleChange,\n                                    handleBlur,\n                                }) => (\n                                    <form\n                                        className={classes.form}\n                                        id=\"yearFilterForm\"\n                                        onSubmit={handleSubmit}\n                                    >\n                                        <Grid\n                                            container\n                                            spacing={2}\n                                            alignItems=\"center\"\n                                            justify=\"center\"\n                                            direction=\"row\"\n                                        >\n                                            <Grid item sm={3}>\n                                                <TextField\n                                                    fullWidth\n                                                    select\n                                                    variant=\"outlined\"\n                                                    name=\"property_filter\"\n                                                    label=\"Property\"\n                                                    id=\"property_filter\"\n                                                    onChange={(event) => {\n                                                        setPropertyFilter(\n                                                            event.target.value\n                                                        );\n                                                    }}\n                                                    value={propertyFilter}\n                                                >\n                                                    <MenuItem key={\"all\"} value={\"all\"}>All Properties</MenuItem>\n                                                    {properties.map(\n                                                        (property, index) => (\n                                                            <MenuItem\n                                                                key={index}\n                                                                value={property.id}\n                                                            >\n                                                                {property.ref}\n                                                            </MenuItem>\n                                                        )\n                                                    )}\n                                                </TextField>\n                                            </Grid>\n                                            <Grid item>\n                                                <TextField\n                                                    variant=\"outlined\"\n                                                    id=\"filter_year\"\n                                                    name=\"filter_year\"\n                                                    label=\"Year\"\n                                                    value={values.filter_year}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    error={errors.filter_year && touched.filter_year}\n                                                    helperText={\n                                                        touched.filter_year && errors.filter_year\n                                                    }\n                                                />\n                                            </Grid>\n                                            <Grid item>\n                                                <Button\n                                                    type=\"submit\"\n                                                    form=\"yearFilterForm\"\n                                                    color=\"primary\"\n                                                    variant=\"contained\"\n                                                    size=\"medium\"\n                                                    startIcon={<SearchIcon />}\n                                                >\n                                                    SEARCH\n                            </Button>\n                                            </Grid>\n                                        </Grid>\n                                    </form>\n                                )}\n                            </Formik>\n                        </Box>\n                    </Grid>\n                </Grid>\n                <Grid\n                    item\n                    container\n                    spacing={2}\n                    direction=\"row\"\n                    alignItems=\"stretch\"\n                    justify=\"space-around\"\n                    key={3}\n                >\n                    <InfoDisplayPaper xs={12} title={\"Total Rent Charges\"} value={currencyFormatter.format(totalRentCharges)} />\n                    <InfoDisplayPaper xs={12} title={\"Total Rent Payments\"} value={currencyFormatter.format(totalRentPayments)} />\n                    <InfoDisplayPaper xs={12} title={\"Total Rent Outstanding Balances\"} value={currencyFormatter.format(totalRentChargesBalances)} />\n                </Grid>\n                <Grid\n                    item\n                    container\n                    spacing={2}\n                    direction=\"row\"\n                    alignItems=\"stretch\"\n                    justify=\"space-around\"\n                >\n                    <InfoDisplayPaper xs={12} title={\"Total Other Charges\"} value={currencyFormatter.format(totalOtherCharges)} />\n                    <InfoDisplayPaper xs={12} title={\"Total Other Payments\"} value={currencyFormatter.format(totalOtherChargesPayments)} />\n                    <InfoDisplayPaper xs={12} title={\"Total Other Charges Outstanding Balances\"} value={currencyFormatter.format(totalOtherChargesBalances)} />\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                        Monthly Charges &amp; Payments\n                    </Typography>\n                    <Bar\n                        data={chargesAndPaymentsGraphData}\n                        options={graphOptions}>\n                    </Bar>\n                </Grid>\n                <Grid item container direction=\"column\" spacing={1}>\n                    <Grid item>\n                        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n                            Collection Performance\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography component=\"div\" align=\"center\">\n                            Collected by:\n                        </Typography>\n                    </Grid>\n                </Grid>\n                <Grid item container direction=\"row\" spacing={4}>\n                    <Grid item xs>\n                        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                            Rent Collection\n                        </Typography>\n                        <HorizontalBar\n                            height={250}\n                            data={rentCollectionPerformanceData}\n                            options={chargesPerformanceGraphsOptions}>\n                        </HorizontalBar>\n                    </Grid>\n                    <Grid item xs>\n                        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                            Service Charge Collection\n                        </Typography>\n                        <HorizontalBar\n                            height={250}\n                            data={otherChargesCollectionPerformanceData}\n                            options={chargesPerformanceGraphsOptions}>\n                        </HorizontalBar>\n                    </Grid>\n                </Grid>\n                <Grid item container direction=\"row\" spacing={4}>\n                    <Grid item xs>\n                        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                            Income Categories\n                    </Typography>\n                        <HorizontalBar\n                            height={250}\n                            data={incomeCategoriesGraphData}\n                            options={graphOptions}>\n                        </HorizontalBar>\n                    </Grid>\n                    <Grid item xs>\n                        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                            Expenses\n                    </Typography>\n                        <HorizontalBar\n                            height={250}\n                            data={expensesCategoriesGraphData}\n                            options={graphOptions}>\n                        </HorizontalBar>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Layout>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        properties: state.properties,\n        transactionsCharges: state.transactionsCharges.map((charge) => {\n            const chargeDetails = {}\n            //get payments with this charge id\n            const chargePayments = state.transactions.filter((payment) => payment.charge_id === charge.id)\n            if (chargePayments.length) {\n                chargeDetails.payed_status = true\n                chargeDetails.last_payment_date = chargePayments.slice(-1)[0].payment_date\n            } else {\n                chargeDetails.payed_status = false\n            }\n            const payed_amount = chargePayments.reduce((total, currentValue) => {\n                return total + parseFloat(currentValue.payment_amount) || 0\n            }, 0)\n            chargeDetails.payed_amount = payed_amount\n            chargeDetails.balance = parseFloat(charge.charge_amount) - payed_amount\n            return Object.assign({}, charge, chargeDetails);\n        }),\n        expenses: state.expenses,\n    };\n};\n\nexport default connect(mapStateToProps)(PropertyPerformancePage);\n","import startOfDay from '../startOfDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}"],"sourceRoot":""}